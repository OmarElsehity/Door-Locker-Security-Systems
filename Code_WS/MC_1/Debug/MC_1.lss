
MC_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000285e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  0000285e  000028f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080010c  0080010c  0000299e  2**0
                  ALLOC
  3 .stab         00002640  00000000  00000000  000029a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001323  00000000  00000000  00004fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006303  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006443  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000065b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000081fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000090e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a281  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aa4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 31       	cpi	r26, 0x17	; 23
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 2d 14 	jmp	0x285a	; 0x285a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ef       	ldi	r26, 0xFD	; 253
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d ef       	ldi	r24, 0xFD	; 253
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/* Variable to store the pressed key */
	uint8 key_option;

	SREG  |= ( 1 << 7 ); /* Enable Global Interrupts */
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	/* Initialize the UART with Configuration */
	UART_ConfigType UART_Config = {9600, EIGHT_BITS, ONE_STOP_BIT, DISABLED};
     b68:	9e 01       	movw	r18, r28
     b6a:	2e 5f       	subi	r18, 0xFE	; 254
     b6c:	3f 4f       	sbci	r19, 0xFF	; 255
     b6e:	3c 87       	std	Y+12, r19	; 0x0c
     b70:	2b 87       	std	Y+11, r18	; 0x0b
     b72:	85 e0       	ldi	r24, 0x05	; 5
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	9e 87       	std	Y+14, r25	; 0x0e
     b78:	8d 87       	std	Y+13, r24	; 0x0d
     b7a:	97 e0       	ldi	r25, 0x07	; 7
     b7c:	9f 87       	std	Y+15, r25	; 0x0f
     b7e:	ed 85       	ldd	r30, Y+13	; 0x0d
     b80:	fe 85       	ldd	r31, Y+14	; 0x0e
     b82:	00 80       	ld	r0, Z
     b84:	2d 85       	ldd	r18, Y+13	; 0x0d
     b86:	3e 85       	ldd	r19, Y+14	; 0x0e
     b88:	2f 5f       	subi	r18, 0xFF	; 255
     b8a:	3f 4f       	sbci	r19, 0xFF	; 255
     b8c:	3e 87       	std	Y+14, r19	; 0x0e
     b8e:	2d 87       	std	Y+13, r18	; 0x0d
     b90:	eb 85       	ldd	r30, Y+11	; 0x0b
     b92:	fc 85       	ldd	r31, Y+12	; 0x0c
     b94:	00 82       	st	Z, r0
     b96:	2b 85       	ldd	r18, Y+11	; 0x0b
     b98:	3c 85       	ldd	r19, Y+12	; 0x0c
     b9a:	2f 5f       	subi	r18, 0xFF	; 255
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	3c 87       	std	Y+12, r19	; 0x0c
     ba0:	2b 87       	std	Y+11, r18	; 0x0b
     ba2:	3f 85       	ldd	r19, Y+15	; 0x0f
     ba4:	31 50       	subi	r19, 0x01	; 1
     ba6:	3f 87       	std	Y+15, r19	; 0x0f
     ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
     baa:	88 23       	and	r24, r24
     bac:	41 f7       	brne	.-48     	; 0xb7e <main+0x38>
	UART_init(&UART_Config);
     bae:	ce 01       	movw	r24, r28
     bb0:	02 96       	adiw	r24, 0x02	; 2
     bb2:	0e 94 69 12 	call	0x24d2	; 0x24d2 <UART_init>

	/* Initialize LCD */
	LCD_init();
     bb6:	0e 94 c9 0c 	call	0x1992	; 0x1992 <LCD_init>

	/* Set the Password for the first time */
	MC1_newPassword();
     bba:	0e 94 88 06 	call	0xd10	; 0xd10 <MC1_newPassword>

	while(1)
	{
		/* Display the main options */
		MC1_mainMenueOptions();
     bbe:	0e 94 0f 08 	call	0x101e	; 0x101e <MC1_mainMenueOptions>

		/* Store which key has been pressed */
		key_option = KEYPAD_getPressedKey();
     bc2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <KEYPAD_getPressedKey>
     bc6:	89 83       	std	Y+1, r24	; 0x01

		switch (key_option)
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	e8 2f       	mov	r30, r24
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	fa 87       	std	Y+10, r31	; 0x0a
     bd0:	e9 87       	std	Y+9, r30	; 0x09
     bd2:	29 85       	ldd	r18, Y+9	; 0x09
     bd4:	3a 85       	ldd	r19, Y+10	; 0x0a
     bd6:	2b 32       	cpi	r18, 0x2B	; 43
     bd8:	31 05       	cpc	r19, r1
     bda:	31 f0       	breq	.+12     	; 0xbe8 <main+0xa2>
     bdc:	89 85       	ldd	r24, Y+9	; 0x09
     bde:	9a 85       	ldd	r25, Y+10	; 0x0a
     be0:	8d 32       	cpi	r24, 0x2D	; 45
     be2:	91 05       	cpc	r25, r1
     be4:	f9 f0       	breq	.+62     	; 0xc24 <main+0xde>
     be6:	eb cf       	rjmp	.-42     	; 0xbbe <main+0x78>
		{
		case OPEN_DOOR:

			/* Ask the user to input a password */
			MC1_requestPassword();
     be8:	0e 94 24 08 	call	0x1048	; 0x1048 <MC1_requestPassword>
			/* Ask Mc2 to check the Password */
			MC1_sendCommand(SEND_CHECK_PASSWORD);
     bec:	88 ef       	ldi	r24, 0xF8	; 248
     bee:	0e 94 59 06 	call	0xcb2	; 0xcb2 <MC1_sendCommand>
			/* Send the inputed password to MC2 */
			MC1_sendPassword(g_inputPassword);
     bf2:	82 e1       	ldi	r24, 0x12	; 18
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 cc 06 	call	0xd98	; 0xd98 <MC1_sendPassword>
			/* Inform MC2 what the user has chosen */
			MC1_sendCommand(OPEN_DOOR);
     bfa:	8b e2       	ldi	r24, 0x2B	; 43
     bfc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <MC1_sendCommand>

			/* Receive the state command from MC2 */
			g_matchStatus = MC1_receiveCommand();
     c00:	0e 94 71 06 	call	0xce2	; 0xce2 <MC1_receiveCommand>
     c04:	80 93 0c 01 	sts	0x010C, r24

			/* In case the two passwords matches */
			if(g_matchStatus ==  OPENING_DOOR)
     c08:	80 91 0c 01 	lds	r24, 0x010C
     c0c:	80 3f       	cpi	r24, 0xF0	; 240
     c0e:	19 f4       	brne	.+6      	; 0xc16 <main+0xd0>
			{
				MC1_openingDoor();
     c10:	0e 94 35 08 	call	0x106a	; 0x106a <MC1_openingDoor>
     c14:	d4 cf       	rjmp	.-88     	; 0xbbe <main+0x78>
			}
			/* In case the two passwords did not match */
			else if(g_matchStatus == WRONG_PASSWORD)
     c16:	80 91 0c 01 	lds	r24, 0x010C
     c1a:	81 3f       	cpi	r24, 0xF1	; 241
     c1c:	81 f6       	brne	.-96     	; 0xbbe <main+0x78>
			{
				MC1_wrongPassword();
     c1e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <MC1_wrongPassword>
     c22:	cd cf       	rjmp	.-102    	; 0xbbe <main+0x78>
			break;

		case CHANGE_PASSWORD:

			/* Ask the user to input a password */
			MC1_requestPassword();
     c24:	0e 94 24 08 	call	0x1048	; 0x1048 <MC1_requestPassword>
			/* Ask MC2 to check the Password */
			MC1_sendCommand(SEND_CHECK_PASSWORD);
     c28:	88 ef       	ldi	r24, 0xF8	; 248
     c2a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <MC1_sendCommand>
			/* Send the inputed password to the MC2 */
			MC1_getPassword(g_inputPassword);
     c2e:	82 e1       	ldi	r24, 0x12	; 18
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	0e 94 67 07 	call	0xece	; 0xece <MC1_getPassword>
			/* Inform MC2 what the user has chosen */
			MC1_sendCommand(CHANGE_PASSWORD);
     c36:	8d e2       	ldi	r24, 0x2D	; 45
     c38:	0e 94 59 06 	call	0xcb2	; 0xcb2 <MC1_sendCommand>

			/* Receive the order command from MC2 */
			g_matchStatus = MC1_receiveCommand();
     c3c:	0e 94 71 06 	call	0xce2	; 0xce2 <MC1_receiveCommand>
     c40:	80 93 0c 01 	sts	0x010C, r24

			/* In case the two passwords matches */
			if(g_matchStatus ==  CHANGING_PASSWORD)
     c44:	80 91 0c 01 	lds	r24, 0x010C
     c48:	82 3f       	cpi	r24, 0xF2	; 242
     c4a:	19 f4       	brne	.+6      	; 0xc52 <main+0x10c>
			{
				MC1_newPassword();
     c4c:	0e 94 88 06 	call	0xd10	; 0xd10 <MC1_newPassword>
     c50:	b6 cf       	rjmp	.-148    	; 0xbbe <main+0x78>
			}
			/* In case the two passwords did not match */
			else if(g_matchStatus == WRONG_PASSWORD)
     c52:	80 91 0c 01 	lds	r24, 0x010C
     c56:	81 3f       	cpi	r24, 0xF1	; 241
     c58:	09 f0       	breq	.+2      	; 0xc5c <main+0x116>
     c5a:	b1 cf       	rjmp	.-158    	; 0xbbe <main+0x78>
			{
				MC1_wrongPassword();
     c5c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <MC1_wrongPassword>
     c60:	ae cf       	rjmp	.-164    	; 0xbbe <main+0x78>

00000c62 <MC1_TimerCallBack>:
/*
 * Description:
 * Function to set the call back function for the Interrupt to be executed
 */
void MC1_TimerCallBack(void)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
	g_tick++; /* Increment the ticks */
     c6a:	80 91 0d 01 	lds	r24, 0x010D
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
     c70:	80 93 0d 01 	sts	0x010D, r24
}
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <MC1_startTimer>:
/*
 * Description:
 * Function to initialize Timer
 */
void MC1_startTimer(void)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <MC1_startTimer+0x6>
     c80:	00 d0       	rcall	.+0      	; 0xc82 <MC1_startTimer+0x8>
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
	/* Setup Timer 0 Configuration */
	Timer0_ConfigType TIMER_Config = {Timer0_CTC, Timer0_1024_Prescaler, 0, 7813 };
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	85 e0       	ldi	r24, 0x05	; 5
     c8c:	8a 83       	std	Y+2, r24	; 0x02
     c8e:	1b 82       	std	Y+3, r1	; 0x03
     c90:	85 e8       	ldi	r24, 0x85	; 133
     c92:	8c 83       	std	Y+4, r24	; 0x04

	/* Initialize the Timer */
	Timer0_init(&TIMER_Config);
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	0e 94 df 11 	call	0x23be	; 0x23be <Timer0_init>

	/* Set Call Back function for the timer */
	Timer0_SetCallBack(MC1_TimerCallBack);
     c9c:	81 e3       	ldi	r24, 0x31	; 49
     c9e:	96 e0       	ldi	r25, 0x06	; 6
     ca0:	0e 94 3f 12 	call	0x247e	; 0x247e <Timer0_SetCallBack>
}
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <MC1_sendCommand>:
/*
 * Description:
 * Function to send specific commands to the MC2 through UART
 */
void MC1_sendCommand(uint8 g_command)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	0f 92       	push	r0
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	89 83       	std	Y+1, r24	; 0x01
	/* Inform MC2 that you are to send */
	UART_sendByte(READY_TO_SEND);
     cbe:	83 ef       	ldi	r24, 0xF3	; 243
     cc0:	0e 94 fd 12 	call	0x25fa	; 0x25fa <UART_sendByte>

	/* Wait until MC2 are ready to receive */
	while(UART_recieveByte() != READY_TO_RECEIVE);
     cc4:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_recieveByte>
     cc8:	84 3f       	cpi	r24, 0xF4	; 244
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <MC1_sendCommand+0x12>

	/* Send the required command to MC2 */
	UART_sendByte(g_command);
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	0e 94 fd 12 	call	0x25fa	; 0x25fa <UART_sendByte>

	/* Wait until the MC2 receive the command */
	while(UART_recieveByte() != RECEIVE_DONE);
     cd2:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_recieveByte>
     cd6:	85 3f       	cpi	r24, 0xF5	; 245
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <MC1_sendCommand+0x20>
}
     cda:	0f 90       	pop	r0
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <MC1_receiveCommand>:
 * Description:
 * Function to receive specific command from the MC2 through UART
 * and Direct the MC2 to do predefined set of operations
 */
uint8 MC1_receiveCommand(void)
{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the MC2 is ready to send */
	while(UART_recieveByte() != READY_TO_SEND);
     cea:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_recieveByte>
     cee:	83 3f       	cpi	r24, 0xF3	; 243
     cf0:	e1 f7       	brne	.-8      	; 0xcea <MC1_receiveCommand+0x8>

	/* Inform the MC2 that you are ready to receive */
	UART_sendByte(READY_TO_RECEIVE);
     cf2:	84 ef       	ldi	r24, 0xF4	; 244
     cf4:	0e 94 fd 12 	call	0x25fa	; 0x25fa <UART_sendByte>

	/* Receive the command from the MC2 */
	g_command = UART_recieveByte();
     cf8:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_recieveByte>
     cfc:	80 93 11 01 	sts	0x0111, r24

	/* Inform the MC2 that the receive has been done successfully */
	UART_sendByte(RECEIVE_DONE);
     d00:	85 ef       	ldi	r24, 0xF5	; 245
     d02:	0e 94 fd 12 	call	0x25fa	; 0x25fa <UART_sendByte>

	return g_command;
     d06:	80 91 11 01 	lds	r24, 0x0111
}
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <MC1_newPassword>:
/*
 * Description:
 * Function to set a new Password
 */
void MC1_newPassword(void)
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	38 c0       	rjmp	.+112    	; 0xd8a <MC1_newPassword+0x7a>
	/* Loop until the MC1 get the same password */
	while(g_matchStatus == PASS_MIS_MATCHED)
	{

		LCD_clearScreen();
     d1a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <LCD_clearScreen>
		LCD_displayString("Enter Password"); /* request the password for the first time */
     d1e:	80 e6       	ldi	r24, 0x60	; 96
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayString>
		LCD_moveCursor(1,0); /* Move Cursor to the second line */
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_moveCursor>
		MC1_getPassword(g_inputPassword); /* Get the password from the user */
     d2e:	82 e1       	ldi	r24, 0x12	; 18
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0e 94 67 07 	call	0xece	; 0xece <MC1_getPassword>

		MC1_sendCommand(SEND_FIRST_PASSWORD); /* Inform the MC2 that you will send the first password */
     d36:	86 ef       	ldi	r24, 0xF6	; 246
     d38:	0e 94 59 06 	call	0xcb2	; 0xcb2 <MC1_sendCommand>
		MC1_sendPassword(g_inputPassword); /* Send the password to MC2 */
     d3c:	82 e1       	ldi	r24, 0x12	; 18
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	0e 94 cc 06 	call	0xd98	; 0xd98 <MC1_sendPassword>


		LCD_clearScreen();
     d44:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <LCD_clearScreen>
		LCD_displayString("ReEnter The Password"); /* request the password for the second time */
     d48:	8f e6       	ldi	r24, 0x6F	; 111
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayString>
		LCD_moveCursor(1,0); /* Move Cursor to the second line */
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_moveCursor>
		MC1_getPassword(g_inputPassword); /* Get the password from the user */
     d58:	82 e1       	ldi	r24, 0x12	; 18
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 67 07 	call	0xece	; 0xece <MC1_getPassword>

		MC1_sendCommand(SEND_SECOND_PASSWORD); /* Inform the MC2 that you will send the second password */
     d60:	87 ef       	ldi	r24, 0xF7	; 247
     d62:	0e 94 59 06 	call	0xcb2	; 0xcb2 <MC1_sendCommand>
		MC1_sendPassword(g_inputPassword); /* Send the password to MC2 */
     d66:	82 e1       	ldi	r24, 0x12	; 18
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	0e 94 cc 06 	call	0xd98	; 0xd98 <MC1_sendPassword>

		/* Wait until the MC2 is able to send the confirmation of the second password */
		g_matchStatus = MC1_receiveCommand();
     d6e:	0e 94 71 06 	call	0xce2	; 0xce2 <MC1_receiveCommand>
     d72:	80 93 0c 01 	sts	0x010C, r24

		/* In case the Passwords didn't match */
		if (g_matchStatus == PASS_MIS_MATCHED)
     d76:	80 91 0c 01 	lds	r24, 0x010C
     d7a:	88 23       	and	r24, r24
     d7c:	31 f4       	brne	.+12     	; 0xd8a <MC1_newPassword+0x7a>
		{
			LCD_clearScreen(); /* Clear Screen */
     d7e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <LCD_clearScreen>
			LCD_displayString("Wrong Password"); /* Display an Error Message */
     d82:	84 e8       	ldi	r24, 0x84	; 132
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayString>
 * Function to set a new Password
 */
void MC1_newPassword(void)
{
	/* Loop until the MC1 get the same password */
	while(g_matchStatus == PASS_MIS_MATCHED)
     d8a:	80 91 0c 01 	lds	r24, 0x010C
     d8e:	88 23       	and	r24, r24
     d90:	21 f2       	breq	.-120    	; 0xd1a <MC1_newPassword+0xa>
			LCD_clearScreen(); /* Clear Screen */
			LCD_displayString("Wrong Password"); /* Display an Error Message */

		}
	}
}
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <MC1_sendPassword>:
 * Description:
 * Function that takes Password characters form array
 * and Send that password to MC2 through UART
 */
void MC1_sendPassword(uint8 a_inputPassword[])
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	61 97       	sbiw	r28, 0x11	; 17
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	99 8b       	std	Y+17, r25	; 0x11
     dae:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter;

	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
     db0:	1f 86       	std	Y+15, r1	; 0x0f
     db2:	80 c0       	rjmp	.+256    	; 0xeb4 <MC1_sendPassword+0x11c>
	{
		UART_sendByte(a_inputPassword[counter]); /* Send Password element by element to the MC2 */
     db4:	8f 85       	ldd	r24, Y+15	; 0x0f
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	88 89       	ldd	r24, Y+16	; 0x10
     dbc:	99 89       	ldd	r25, Y+17	; 0x11
     dbe:	fc 01       	movw	r30, r24
     dc0:	e2 0f       	add	r30, r18
     dc2:	f3 1f       	adc	r31, r19
     dc4:	80 81       	ld	r24, Z
     dc6:	0e 94 fd 12 	call	0x25fa	; 0x25fa <UART_sendByte>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a0 e2       	ldi	r26, 0x20	; 32
     dd0:	b1 e4       	ldi	r27, 0x41	; 65
     dd2:	8b 87       	std	Y+11, r24	; 0x0b
     dd4:	9c 87       	std	Y+12, r25	; 0x0c
     dd6:	ad 87       	std	Y+13, r26	; 0x0d
     dd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dda:	6b 85       	ldd	r22, Y+11	; 0x0b
     ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dde:	8d 85       	ldd	r24, Y+13	; 0x0d
     de0:	9e 85       	ldd	r25, Y+14	; 0x0e
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	4a ef       	ldi	r20, 0xFA	; 250
     de8:	54 e4       	ldi	r21, 0x44	; 68
     dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	8f 83       	std	Y+7, r24	; 0x07
     df4:	98 87       	std	Y+8, r25	; 0x08
     df6:	a9 87       	std	Y+9, r26	; 0x09
     df8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dfa:	6f 81       	ldd	r22, Y+7	; 0x07
     dfc:	78 85       	ldd	r23, Y+8	; 0x08
     dfe:	89 85       	ldd	r24, Y+9	; 0x09
     e00:	9a 85       	ldd	r25, Y+10	; 0x0a
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e8       	ldi	r20, 0x80	; 128
     e08:	5f e3       	ldi	r21, 0x3F	; 63
     e0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e0e:	88 23       	and	r24, r24
     e10:	2c f4       	brge	.+10     	; 0xe1c <MC1_sendPassword+0x84>
		__ticks = 1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	9e 83       	std	Y+6, r25	; 0x06
     e18:	8d 83       	std	Y+5, r24	; 0x05
     e1a:	3f c0       	rjmp	.+126    	; 0xe9a <MC1_sendPassword+0x102>
	else if (__tmp > 65535)
     e1c:	6f 81       	ldd	r22, Y+7	; 0x07
     e1e:	78 85       	ldd	r23, Y+8	; 0x08
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	3f ef       	ldi	r19, 0xFF	; 255
     e28:	4f e7       	ldi	r20, 0x7F	; 127
     e2a:	57 e4       	ldi	r21, 0x47	; 71
     e2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e30:	18 16       	cp	r1, r24
     e32:	4c f5       	brge	.+82     	; 0xe86 <MC1_sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e34:	6b 85       	ldd	r22, Y+11	; 0x0b
     e36:	7c 85       	ldd	r23, Y+12	; 0x0c
     e38:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e2       	ldi	r20, 0x20	; 32
     e42:	51 e4       	ldi	r21, 0x41	; 65
     e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	bc 01       	movw	r22, r24
     e4e:	cd 01       	movw	r24, r26
     e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	8d 83       	std	Y+5, r24	; 0x05
     e5c:	0f c0       	rjmp	.+30     	; 0xe7c <MC1_sendPassword+0xe4>
     e5e:	88 ec       	ldi	r24, 0xC8	; 200
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <MC1_sendPassword+0xd2>
     e6e:	9c 83       	std	Y+4, r25	; 0x04
     e70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e72:	8d 81       	ldd	r24, Y+5	; 0x05
     e74:	9e 81       	ldd	r25, Y+6	; 0x06
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	69 f7       	brne	.-38     	; 0xe5e <MC1_sendPassword+0xc6>
     e84:	14 c0       	rjmp	.+40     	; 0xeae <MC1_sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e86:	6f 81       	ldd	r22, Y+7	; 0x07
     e88:	78 85       	ldd	r23, Y+8	; 0x08
     e8a:	89 85       	ldd	r24, Y+9	; 0x09
     e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	8d 83       	std	Y+5, r24	; 0x05
     e9a:	8d 81       	ldd	r24, Y+5	; 0x05
     e9c:	9e 81       	ldd	r25, Y+6	; 0x06
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	9a 81       	ldd	r25, Y+2	; 0x02
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <MC1_sendPassword+0x10e>
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01
 */
void MC1_sendPassword(uint8 a_inputPassword[])
{
	uint8 counter;

	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
     eae:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb0:	8f 5f       	subi	r24, 0xFF	; 255
     eb2:	8f 87       	std	Y+15, r24	; 0x0f
     eb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb6:	85 30       	cpi	r24, 0x05	; 5
     eb8:	08 f4       	brcc	.+2      	; 0xebc <MC1_sendPassword+0x124>
     eba:	7c cf       	rjmp	.-264    	; 0xdb4 <MC1_sendPassword+0x1c>
	{
		UART_sendByte(a_inputPassword[counter]); /* Send Password element by element to the MC2 */
		_delay_ms(SEND_RECEIVE_TIME);      /* Delay for the time gap for sending receiving time between the MCUs */
	}
}
     ebc:	61 96       	adiw	r28, 0x11	; 17
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <MC1_getPassword>:
 * Description:
 * Function that takes Password from Keypad
 * and Store it in array and Display asterisk on the screen
 */
void MC1_getPassword(uint8 a_inputPassword[])
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	62 97       	sbiw	r28, 0x12	; 18
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	9a 8b       	std	Y+18, r25	; 0x12
     ee4:	89 8b       	std	Y+17, r24	; 0x11
	LCD_moveCursor(2, 0);
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_moveCursor>

	uint8 counter = 0; /* Variable to be used as a counter */
     eee:	18 8a       	std	Y+16, r1	; 0x10
	uint8 password_key = 0; /* Variable to store the pressed key */
     ef0:	1f 86       	std	Y+15, r1	; 0x0f
     ef2:	88 c0       	rjmp	.+272    	; 0x1004 <MC1_getPassword+0x136>

	/* Stop getting number after you get 5 characters */
	while( counter != PASSWORD_LENGTH )
	{
		password_key = KEYPAD_getPressedKey(); /* Get the get the key pressed and store it in the password array */
     ef4:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <KEYPAD_getPressedKey>
     ef8:	8f 87       	std	Y+15, r24	; 0x0f

		if ( (password_key >= 0) && (password_key <= 9) )
     efa:	8f 85       	ldd	r24, Y+15	; 0x0f
     efc:	8a 30       	cpi	r24, 0x0A	; 10
     efe:	80 f4       	brcc	.+32     	; 0xf20 <MC1_getPassword+0x52>
		{
			LCD_displayCharacter('*'); /* Display asterisk to hide the password */
     f00:	8a e2       	ldi	r24, 0x2A	; 42
     f02:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_displayCharacter>
			a_inputPassword[counter] = password_key;
     f06:	88 89       	ldd	r24, Y+16	; 0x10
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	89 89       	ldd	r24, Y+17	; 0x11
     f0e:	9a 89       	ldd	r25, Y+18	; 0x12
     f10:	fc 01       	movw	r30, r24
     f12:	e2 0f       	add	r30, r18
     f14:	f3 1f       	adc	r31, r19
     f16:	8f 85       	ldd	r24, Y+15	; 0x0f
     f18:	80 83       	st	Z, r24
			counter++;
     f1a:	88 89       	ldd	r24, Y+16	; 0x10
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	88 8b       	std	Y+16, r24	; 0x10
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	aa ef       	ldi	r26, 0xFA	; 250
     f26:	b3 e4       	ldi	r27, 0x43	; 67
     f28:	8b 87       	std	Y+11, r24	; 0x0b
     f2a:	9c 87       	std	Y+12, r25	; 0x0c
     f2c:	ad 87       	std	Y+13, r26	; 0x0d
     f2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f30:	6b 85       	ldd	r22, Y+11	; 0x0b
     f32:	7c 85       	ldd	r23, Y+12	; 0x0c
     f34:	8d 85       	ldd	r24, Y+13	; 0x0d
     f36:	9e 85       	ldd	r25, Y+14	; 0x0e
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	4a ef       	ldi	r20, 0xFA	; 250
     f3e:	54 e4       	ldi	r21, 0x44	; 68
     f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	8f 83       	std	Y+7, r24	; 0x07
     f4a:	98 87       	std	Y+8, r25	; 0x08
     f4c:	a9 87       	std	Y+9, r26	; 0x09
     f4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f50:	6f 81       	ldd	r22, Y+7	; 0x07
     f52:	78 85       	ldd	r23, Y+8	; 0x08
     f54:	89 85       	ldd	r24, Y+9	; 0x09
     f56:	9a 85       	ldd	r25, Y+10	; 0x0a
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e8       	ldi	r20, 0x80	; 128
     f5e:	5f e3       	ldi	r21, 0x3F	; 63
     f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f64:	88 23       	and	r24, r24
     f66:	2c f4       	brge	.+10     	; 0xf72 <MC1_getPassword+0xa4>
		__ticks = 1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9e 83       	std	Y+6, r25	; 0x06
     f6e:	8d 83       	std	Y+5, r24	; 0x05
     f70:	3f c0       	rjmp	.+126    	; 0xff0 <MC1_getPassword+0x122>
	else if (__tmp > 65535)
     f72:	6f 81       	ldd	r22, Y+7	; 0x07
     f74:	78 85       	ldd	r23, Y+8	; 0x08
     f76:	89 85       	ldd	r24, Y+9	; 0x09
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	3f ef       	ldi	r19, 0xFF	; 255
     f7e:	4f e7       	ldi	r20, 0x7F	; 127
     f80:	57 e4       	ldi	r21, 0x47	; 71
     f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f86:	18 16       	cp	r1, r24
     f88:	4c f5       	brge	.+82     	; 0xfdc <MC1_getPassword+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f90:	9e 85       	ldd	r25, Y+14	; 0x0e
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e2       	ldi	r20, 0x20	; 32
     f98:	51 e4       	ldi	r21, 0x41	; 65
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	bc 01       	movw	r22, r24
     fa4:	cd 01       	movw	r24, r26
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9e 83       	std	Y+6, r25	; 0x06
     fb0:	8d 83       	std	Y+5, r24	; 0x05
     fb2:	0f c0       	rjmp	.+30     	; 0xfd2 <MC1_getPassword+0x104>
     fb4:	88 ec       	ldi	r24, 0xC8	; 200
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 83       	std	Y+4, r25	; 0x04
     fba:	8b 83       	std	Y+3, r24	; 0x03
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <MC1_getPassword+0xf2>
     fc4:	9c 83       	std	Y+4, r25	; 0x04
     fc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	9e 83       	std	Y+6, r25	; 0x06
     fd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	69 f7       	brne	.-38     	; 0xfb4 <MC1_getPassword+0xe6>
     fda:	14 c0       	rjmp	.+40     	; 0x1004 <MC1_getPassword+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fdc:	6f 81       	ldd	r22, Y+7	; 0x07
     fde:	78 85       	ldd	r23, Y+8	; 0x08
     fe0:	89 85       	ldd	r24, Y+9	; 0x09
     fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	9e 83       	std	Y+6, r25	; 0x06
     fee:	8d 83       	std	Y+5, r24	; 0x05
     ff0:	8d 81       	ldd	r24, Y+5	; 0x05
     ff2:	9e 81       	ldd	r25, Y+6	; 0x06
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <MC1_getPassword+0x12e>
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01

	uint8 counter = 0; /* Variable to be used as a counter */
	uint8 password_key = 0; /* Variable to store the pressed key */

	/* Stop getting number after you get 5 characters */
	while( counter != PASSWORD_LENGTH )
    1004:	88 89       	ldd	r24, Y+16	; 0x10
    1006:	85 30       	cpi	r24, 0x05	; 5
    1008:	09 f0       	breq	.+2      	; 0x100c <MC1_getPassword+0x13e>
    100a:	74 cf       	rjmp	.-280    	; 0xef4 <MC1_getPassword+0x26>
			a_inputPassword[counter] = password_key;
			counter++;
		}
		_delay_ms(KEYPAD_CLICK_TIME); /* Delay time for keypad press */
	}
}
    100c:	62 96       	adiw	r28, 0x12	; 18
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <MC1_mainMenueOptions>:
/*
 * Description:
 * Function that displays the main options for the program
 */
void MC1_mainMenueOptions(void)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1026:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <LCD_clearScreen>
	LCD_displayString("(+): Open Door");
    102a:	83 e9       	ldi	r24, 0x93	; 147
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayString>
	LCD_moveCursor(1,0); /* Move to the next line */
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_moveCursor>
	LCD_displayString("(-): Change Password");
    103a:	82 ea       	ldi	r24, 0xA2	; 162
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayString>
}
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <MC1_requestPassword>:
/*
 * Description:
 * Request a password
 */
void MC1_requestPassword(void)
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1050:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <LCD_clearScreen>
	LCD_displayString("Enter The Password :");
    1054:	87 eb       	ldi	r24, 0xB7	; 183
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayString>
	MC1_getPassword(g_inputPassword);
    105c:	82 e1       	ldi	r24, 0x12	; 18
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	0e 94 67 07 	call	0xece	; 0xece <MC1_getPassword>
}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <MC1_openingDoor>:
/*
 * Description:
 * Function that explain door phase on the screen
 */
void MC1_openingDoor(void)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	MC1_startTimer(); /* Start the timer to measure time period */
    1072:	0e 94 3d 06 	call	0xc7a	; 0xc7a <MC1_startTimer>

	/* Open the door for ( 15 sec ) */
	LCD_clearScreen();
    1076:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <LCD_clearScreen>
	LCD_displayString("Door is Opening");
    107a:	8c ec       	ldi	r24, 0xCC	; 204
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayString>
	while(g_tick < OPEN_DOOR_TIME); /* Count up to 15 */
    1082:	80 91 0d 01 	lds	r24, 0x010D
    1086:	8f 30       	cpi	r24, 0x0F	; 15
    1088:	e0 f3       	brcs	.-8      	; 0x1082 <MC1_openingDoor+0x18>
	g_tick = 0; /* Reset counter to reuse it */
    108a:	10 92 0d 01 	sts	0x010D, r1

	/* Close the door for ( 15 sec ) */
	LCD_clearScreen();
    108e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <LCD_clearScreen>
	LCD_displayString("Door is Closing");
    1092:	8c ed       	ldi	r24, 0xDC	; 220
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayString>
	while(g_tick < CLOSE_DOOR_TIME); /* Count up to 15 */
    109a:	80 91 0d 01 	lds	r24, 0x010D
    109e:	8f 30       	cpi	r24, 0x0F	; 15
    10a0:	e0 f3       	brcs	.-8      	; 0x109a <MC1_openingDoor+0x30>
	g_tick = 0; /* Reset counter to reuse it */
    10a2:	10 92 0d 01 	sts	0x010D, r1

	Timer0_Deinit();
    10a6:	0e 94 51 12 	call	0x24a2	; 0x24a2 <Timer0_Deinit>
	LCD_clearScreen();
    10aa:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <LCD_clearScreen>
}
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <MC1_wrongPassword>:
/*
 * Description:
 * Function that take care of wrong password scenarios
 */
void MC1_wrongPassword(void)
{
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
	g_passwordMistakes++; /* Increment the wrong counter */
    10bc:	80 91 0e 01 	lds	r24, 0x010E
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    10c2:	80 93 0e 01 	sts	0x010E, r24

	LCD_clearScreen();
    10c6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <LCD_clearScreen>
	LCD_displayString(" Wrong Password ");
    10ca:	8c ee       	ldi	r24, 0xEC	; 236
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayString>

	/* If the user entered the password 3 times wrong */
	if(g_passwordMistakes == MAX_NUM_OF_MISTAKES)
    10d2:	80 91 0e 01 	lds	r24, 0x010E
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	41 f4       	brne	.+16     	; 0x10ea <MC1_wrongPassword+0x36>
	{
		MC1_startTimer(); /* Start the timer to measure time period */
    10da:	0e 94 3d 06 	call	0xc7a	; 0xc7a <MC1_startTimer>

		/* Reset the counters */
		g_passwordMistakes = 0;
    10de:	10 92 0e 01 	sts	0x010E, r1
		g_tick = 0;
    10e2:	10 92 0d 01 	sts	0x010D, r1

		Timer0_Deinit(); /* Stop the timer */
    10e6:	0e 94 51 12 	call	0x24a2	; 0x24a2 <Timer0_Deinit>
	}
	LCD_clearScreen();
    10ea:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <LCD_clearScreen>
}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <GPIO_setupPinDirection+0x6>
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <GPIO_setupPinDirection+0x8>
    10fc:	0f 92       	push	r0
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	6a 83       	std	Y+2, r22	; 0x02
    1106:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	88 30       	cpi	r24, 0x08	; 8
    110c:	08 f0       	brcs	.+2      	; 0x1110 <GPIO_setupPinDirection+0x1c>
    110e:	d5 c0       	rjmp	.+426    	; 0x12ba <GPIO_setupPinDirection+0x1c6>
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	84 30       	cpi	r24, 0x04	; 4
    1114:	08 f0       	brcs	.+2      	; 0x1118 <GPIO_setupPinDirection+0x24>
    1116:	d1 c0       	rjmp	.+418    	; 0x12ba <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	3d 83       	std	Y+5, r19	; 0x05
    1120:	2c 83       	std	Y+4, r18	; 0x04
    1122:	8c 81       	ldd	r24, Y+4	; 0x04
    1124:	9d 81       	ldd	r25, Y+5	; 0x05
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	91 05       	cpc	r25, r1
    112a:	09 f4       	brne	.+2      	; 0x112e <GPIO_setupPinDirection+0x3a>
    112c:	43 c0       	rjmp	.+134    	; 0x11b4 <GPIO_setupPinDirection+0xc0>
    112e:	2c 81       	ldd	r18, Y+4	; 0x04
    1130:	3d 81       	ldd	r19, Y+5	; 0x05
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	31 05       	cpc	r19, r1
    1136:	2c f4       	brge	.+10     	; 0x1142 <GPIO_setupPinDirection+0x4e>
    1138:	8c 81       	ldd	r24, Y+4	; 0x04
    113a:	9d 81       	ldd	r25, Y+5	; 0x05
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	71 f0       	breq	.+28     	; 0x115c <GPIO_setupPinDirection+0x68>
    1140:	bc c0       	rjmp	.+376    	; 0x12ba <GPIO_setupPinDirection+0x1c6>
    1142:	2c 81       	ldd	r18, Y+4	; 0x04
    1144:	3d 81       	ldd	r19, Y+5	; 0x05
    1146:	22 30       	cpi	r18, 0x02	; 2
    1148:	31 05       	cpc	r19, r1
    114a:	09 f4       	brne	.+2      	; 0x114e <GPIO_setupPinDirection+0x5a>
    114c:	5f c0       	rjmp	.+190    	; 0x120c <GPIO_setupPinDirection+0x118>
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	9d 81       	ldd	r25, Y+5	; 0x05
    1152:	83 30       	cpi	r24, 0x03	; 3
    1154:	91 05       	cpc	r25, r1
    1156:	09 f4       	brne	.+2      	; 0x115a <GPIO_setupPinDirection+0x66>
    1158:	85 c0       	rjmp	.+266    	; 0x1264 <GPIO_setupPinDirection+0x170>
    115a:	af c0       	rjmp	.+350    	; 0x12ba <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	a1 f4       	brne	.+40     	; 0x118a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1162:	aa e3       	ldi	r26, 0x3A	; 58
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	ea e3       	ldi	r30, 0x3A	; 58
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <GPIO_setupPinDirection+0x8c>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <GPIO_setupPinDirection+0x88>
    1184:	84 2b       	or	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	98 c0       	rjmp	.+304    	; 0x12ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    118a:	aa e3       	ldi	r26, 0x3A	; 58
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	ea e3       	ldi	r30, 0x3A	; 58
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <GPIO_setupPinDirection+0xb4>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <GPIO_setupPinDirection+0xb0>
    11ac:	80 95       	com	r24
    11ae:	84 23       	and	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	83 c0       	rjmp	.+262    	; 0x12ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	a1 f4       	brne	.+40     	; 0x11e2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    11ba:	a7 e3       	ldi	r26, 0x37	; 55
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e7 e3       	ldi	r30, 0x37	; 55
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <GPIO_setupPinDirection+0xe4>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <GPIO_setupPinDirection+0xe0>
    11dc:	84 2b       	or	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	6c c0       	rjmp	.+216    	; 0x12ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    11e2:	a7 e3       	ldi	r26, 0x37	; 55
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e7 e3       	ldi	r30, 0x37	; 55
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <GPIO_setupPinDirection+0x10c>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <GPIO_setupPinDirection+0x108>
    1204:	80 95       	com	r24
    1206:	84 23       	and	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	57 c0       	rjmp	.+174    	; 0x12ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	a1 f4       	brne	.+40     	; 0x123a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1212:	a4 e3       	ldi	r26, 0x34	; 52
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e4 e3       	ldi	r30, 0x34	; 52
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <GPIO_setupPinDirection+0x13c>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <GPIO_setupPinDirection+0x138>
    1234:	84 2b       	or	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	40 c0       	rjmp	.+128    	; 0x12ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    123a:	a4 e3       	ldi	r26, 0x34	; 52
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e4 e3       	ldi	r30, 0x34	; 52
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <GPIO_setupPinDirection+0x164>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <GPIO_setupPinDirection+0x160>
    125c:	80 95       	com	r24
    125e:	84 23       	and	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	2b c0       	rjmp	.+86     	; 0x12ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	a1 f4       	brne	.+40     	; 0x1292 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    126a:	a1 e3       	ldi	r26, 0x31	; 49
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e1 e3       	ldi	r30, 0x31	; 49
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <GPIO_setupPinDirection+0x194>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <GPIO_setupPinDirection+0x190>
    128c:	84 2b       	or	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	14 c0       	rjmp	.+40     	; 0x12ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1292:	a1 e3       	ldi	r26, 0x31	; 49
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e1 e3       	ldi	r30, 0x31	; 49
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <GPIO_setupPinDirection+0x1bc>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <GPIO_setupPinDirection+0x1b8>
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <GPIO_writePin+0x6>
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <GPIO_writePin+0x8>
    12d2:	0f 92       	push	r0
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	6a 83       	std	Y+2, r22	; 0x02
    12dc:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	88 30       	cpi	r24, 0x08	; 8
    12e2:	08 f0       	brcs	.+2      	; 0x12e6 <GPIO_writePin+0x1c>
    12e4:	d5 c0       	rjmp	.+426    	; 0x1490 <GPIO_writePin+0x1c6>
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	84 30       	cpi	r24, 0x04	; 4
    12ea:	08 f0       	brcs	.+2      	; 0x12ee <GPIO_writePin+0x24>
    12ec:	d1 c0       	rjmp	.+418    	; 0x1490 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else {
		switch(port_num)
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	3d 83       	std	Y+5, r19	; 0x05
    12f6:	2c 83       	std	Y+4, r18	; 0x04
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	9d 81       	ldd	r25, Y+5	; 0x05
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	91 05       	cpc	r25, r1
    1300:	09 f4       	brne	.+2      	; 0x1304 <GPIO_writePin+0x3a>
    1302:	43 c0       	rjmp	.+134    	; 0x138a <GPIO_writePin+0xc0>
    1304:	2c 81       	ldd	r18, Y+4	; 0x04
    1306:	3d 81       	ldd	r19, Y+5	; 0x05
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	2c f4       	brge	.+10     	; 0x1318 <GPIO_writePin+0x4e>
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	9d 81       	ldd	r25, Y+5	; 0x05
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	71 f0       	breq	.+28     	; 0x1332 <GPIO_writePin+0x68>
    1316:	bc c0       	rjmp	.+376    	; 0x1490 <GPIO_writePin+0x1c6>
    1318:	2c 81       	ldd	r18, Y+4	; 0x04
    131a:	3d 81       	ldd	r19, Y+5	; 0x05
    131c:	22 30       	cpi	r18, 0x02	; 2
    131e:	31 05       	cpc	r19, r1
    1320:	09 f4       	brne	.+2      	; 0x1324 <GPIO_writePin+0x5a>
    1322:	5f c0       	rjmp	.+190    	; 0x13e2 <GPIO_writePin+0x118>
    1324:	8c 81       	ldd	r24, Y+4	; 0x04
    1326:	9d 81       	ldd	r25, Y+5	; 0x05
    1328:	83 30       	cpi	r24, 0x03	; 3
    132a:	91 05       	cpc	r25, r1
    132c:	09 f4       	brne	.+2      	; 0x1330 <GPIO_writePin+0x66>
    132e:	85 c0       	rjmp	.+266    	; 0x143a <GPIO_writePin+0x170>
    1330:	af c0       	rjmp	.+350    	; 0x1490 <GPIO_writePin+0x1c6>
		{
		case PIN0_ID:
			if(value == LOGIC_HIGH)
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	a1 f4       	brne	.+40     	; 0x1360 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1338:	ab e3       	ldi	r26, 0x3B	; 59
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	eb e3       	ldi	r30, 0x3B	; 59
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <GPIO_writePin+0x8c>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <GPIO_writePin+0x88>
    135a:	84 2b       	or	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	98 c0       	rjmp	.+304    	; 0x1490 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1360:	ab e3       	ldi	r26, 0x3B	; 59
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	eb e3       	ldi	r30, 0x3B	; 59
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <GPIO_writePin+0xb4>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <GPIO_writePin+0xb0>
    1382:	80 95       	com	r24
    1384:	84 23       	and	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	83 c0       	rjmp	.+262    	; 0x1490 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	a1 f4       	brne	.+40     	; 0x13b8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1390:	a8 e3       	ldi	r26, 0x38	; 56
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e8 e3       	ldi	r30, 0x38	; 56
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <GPIO_writePin+0xe4>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <GPIO_writePin+0xe0>
    13b2:	84 2b       	or	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	6c c0       	rjmp	.+216    	; 0x1490 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    13b8:	a8 e3       	ldi	r26, 0x38	; 56
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e8 e3       	ldi	r30, 0x38	; 56
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <GPIO_writePin+0x10c>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <GPIO_writePin+0x108>
    13da:	80 95       	com	r24
    13dc:	84 23       	and	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	57 c0       	rjmp	.+174    	; 0x1490 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	a1 f4       	brne	.+40     	; 0x1410 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    13e8:	a5 e3       	ldi	r26, 0x35	; 53
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e5 e3       	ldi	r30, 0x35	; 53
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <GPIO_writePin+0x13c>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <GPIO_writePin+0x138>
    140a:	84 2b       	or	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	40 c0       	rjmp	.+128    	; 0x1490 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1410:	a5 e3       	ldi	r26, 0x35	; 53
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e5 e3       	ldi	r30, 0x35	; 53
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <GPIO_writePin+0x164>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <GPIO_writePin+0x160>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	2b c0       	rjmp	.+86     	; 0x1490 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	a1 f4       	brne	.+40     	; 0x1468 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1440:	a2 e3       	ldi	r26, 0x32	; 50
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e2 e3       	ldi	r30, 0x32	; 50
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <GPIO_writePin+0x194>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <GPIO_writePin+0x190>
    1462:	84 2b       	or	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	14 c0       	rjmp	.+40     	; 0x1490 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1468:	a2 e3       	ldi	r26, 0x32	; 50
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e2 e3       	ldi	r30, 0x32	; 50
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <GPIO_writePin+0x1bc>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <GPIO_writePin+0x1b8>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
			}
		}
	}
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <GPIO_readPin+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <GPIO_readPin+0x8>
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	88 30       	cpi	r24, 0x08	; 8
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <GPIO_readPin+0x1a>
    14b8:	9e c0       	rjmp	.+316    	; 0x15f6 <GPIO_readPin+0x156>
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	84 30       	cpi	r24, 0x04	; 4
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <GPIO_readPin+0x22>
    14c0:	9a c0       	rjmp	.+308    	; 0x15f6 <GPIO_readPin+0x156>
	{
		/* Do Nothing */
	}
	else {
		switch(port_num)
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3d 83       	std	Y+5, r19	; 0x05
    14ca:	2c 83       	std	Y+4, r18	; 0x04
    14cc:	4c 81       	ldd	r20, Y+4	; 0x04
    14ce:	5d 81       	ldd	r21, Y+5	; 0x05
    14d0:	41 30       	cpi	r20, 0x01	; 1
    14d2:	51 05       	cpc	r21, r1
    14d4:	b1 f1       	breq	.+108    	; 0x1542 <GPIO_readPin+0xa2>
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	82 30       	cpi	r24, 0x02	; 2
    14dc:	91 05       	cpc	r25, r1
    14de:	34 f4       	brge	.+12     	; 0x14ec <GPIO_readPin+0x4c>
    14e0:	2c 81       	ldd	r18, Y+4	; 0x04
    14e2:	3d 81       	ldd	r19, Y+5	; 0x05
    14e4:	21 15       	cp	r18, r1
    14e6:	31 05       	cpc	r19, r1
    14e8:	71 f0       	breq	.+28     	; 0x1506 <GPIO_readPin+0x66>
    14ea:	85 c0       	rjmp	.+266    	; 0x15f6 <GPIO_readPin+0x156>
    14ec:	4c 81       	ldd	r20, Y+4	; 0x04
    14ee:	5d 81       	ldd	r21, Y+5	; 0x05
    14f0:	42 30       	cpi	r20, 0x02	; 2
    14f2:	51 05       	cpc	r21, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <GPIO_readPin+0x58>
    14f6:	43 c0       	rjmp	.+134    	; 0x157e <GPIO_readPin+0xde>
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	9d 81       	ldd	r25, Y+5	; 0x05
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	91 05       	cpc	r25, r1
    1500:	09 f4       	brne	.+2      	; 0x1504 <GPIO_readPin+0x64>
    1502:	5b c0       	rjmp	.+182    	; 0x15ba <GPIO_readPin+0x11a>
    1504:	78 c0       	rjmp	.+240    	; 0x15f6 <GPIO_readPin+0x156>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    1506:	e9 e3       	ldi	r30, 0x39	; 57
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <GPIO_readPin+0x80>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	2a 95       	dec	r18
    1522:	e2 f7       	brpl	.-8      	; 0x151c <GPIO_readPin+0x7c>
    1524:	9a 01       	movw	r18, r20
    1526:	28 23       	and	r18, r24
    1528:	39 23       	and	r19, r25
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a9 01       	movw	r20, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <GPIO_readPin+0x98>
    1534:	55 95       	asr	r21
    1536:	47 95       	ror	r20
    1538:	8a 95       	dec	r24
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <GPIO_readPin+0x94>
    153c:	ca 01       	movw	r24, r20
    153e:	8b 83       	std	Y+3, r24	; 0x03
    1540:	5b c0       	rjmp	.+182    	; 0x15f8 <GPIO_readPin+0x158>
			break;
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    1542:	e6 e3       	ldi	r30, 0x36	; 54
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <GPIO_readPin+0xbc>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	2a 95       	dec	r18
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <GPIO_readPin+0xb8>
    1560:	9a 01       	movw	r18, r20
    1562:	28 23       	and	r18, r24
    1564:	39 23       	and	r19, r25
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	88 2f       	mov	r24, r24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a9 01       	movw	r20, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <GPIO_readPin+0xd4>
    1570:	55 95       	asr	r21
    1572:	47 95       	ror	r20
    1574:	8a 95       	dec	r24
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <GPIO_readPin+0xd0>
    1578:	ca 01       	movw	r24, r20
    157a:	8b 83       	std	Y+3, r24	; 0x03
    157c:	3d c0       	rjmp	.+122    	; 0x15f8 <GPIO_readPin+0x158>
			break;
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    157e:	e3 e3       	ldi	r30, 0x33	; 51
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <GPIO_readPin+0xf8>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	2a 95       	dec	r18
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <GPIO_readPin+0xf4>
    159c:	9a 01       	movw	r18, r20
    159e:	28 23       	and	r18, r24
    15a0:	39 23       	and	r19, r25
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a9 01       	movw	r20, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <GPIO_readPin+0x110>
    15ac:	55 95       	asr	r21
    15ae:	47 95       	ror	r20
    15b0:	8a 95       	dec	r24
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <GPIO_readPin+0x10c>
    15b4:	ca 01       	movw	r24, r20
    15b6:	8b 83       	std	Y+3, r24	; 0x03
    15b8:	1f c0       	rjmp	.+62     	; 0x15f8 <GPIO_readPin+0x158>
			break;
		case PORTD_ID:
			return GET_BIT(PIND,pin_num);
    15ba:	e0 e3       	ldi	r30, 0x30	; 48
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <GPIO_readPin+0x134>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	2a 95       	dec	r18
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <GPIO_readPin+0x130>
    15d8:	9a 01       	movw	r18, r20
    15da:	28 23       	and	r18, r24
    15dc:	39 23       	and	r19, r25
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <GPIO_readPin+0x14c>
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <GPIO_readPin+0x148>
    15f0:	ca 01       	movw	r24, r20
    15f2:	8b 83       	std	Y+3, r24	; 0x03
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <GPIO_readPin+0x158>

		}
	}
	return LOGIC_LOW;
    15f6:	1b 82       	std	Y+3, r1	; 0x03
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	00 d0       	rcall	.+0      	; 0x1610 <GPIO_setupPortDirection+0x6>
    1610:	00 d0       	rcall	.+0      	; 0x1612 <GPIO_setupPortDirection+0x8>
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	90 f5       	brcc	.+100    	; 0x1684 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	3c 83       	std	Y+4, r19	; 0x04
    1628:	2b 83       	std	Y+3, r18	; 0x03
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	91 05       	cpc	r25, r1
    1632:	d1 f0       	breq	.+52     	; 0x1668 <GPIO_setupPortDirection+0x5e>
    1634:	2b 81       	ldd	r18, Y+3	; 0x03
    1636:	3c 81       	ldd	r19, Y+4	; 0x04
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	2c f4       	brge	.+10     	; 0x1648 <GPIO_setupPortDirection+0x3e>
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	61 f0       	breq	.+24     	; 0x165e <GPIO_setupPortDirection+0x54>
    1646:	1e c0       	rjmp	.+60     	; 0x1684 <GPIO_setupPortDirection+0x7a>
    1648:	2b 81       	ldd	r18, Y+3	; 0x03
    164a:	3c 81       	ldd	r19, Y+4	; 0x04
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	81 f0       	breq	.+32     	; 0x1672 <GPIO_setupPortDirection+0x68>
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	83 30       	cpi	r24, 0x03	; 3
    1658:	91 05       	cpc	r25, r1
    165a:	81 f0       	breq	.+32     	; 0x167c <GPIO_setupPortDirection+0x72>
    165c:	13 c0       	rjmp	.+38     	; 0x1684 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    165e:	ea e3       	ldi	r30, 0x3A	; 58
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	80 83       	st	Z, r24
    1666:	0e c0       	rjmp	.+28     	; 0x1684 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1668:	e7 e3       	ldi	r30, 0x37	; 55
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	80 83       	st	Z, r24
    1670:	09 c0       	rjmp	.+18     	; 0x1684 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1672:	e4 e3       	ldi	r30, 0x34	; 52
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	80 83       	st	Z, r24
    167a:	04 c0       	rjmp	.+8      	; 0x1684 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    167c:	e1 e3       	ldi	r30, 0x31	; 49
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	80 83       	st	Z, r24
			break;
		}
	}
}
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <GPIO_writePort+0x6>
    1698:	00 d0       	rcall	.+0      	; 0x169a <GPIO_writePort+0x8>
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
	{
		/* Do Nothing */
	}
	switch(port_num){
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	3c 83       	std	Y+4, r19	; 0x04
    16aa:	2b 83       	std	Y+3, r18	; 0x03
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	91 05       	cpc	r25, r1
    16b4:	d1 f0       	breq	.+52     	; 0x16ea <GPIO_writePort+0x58>
    16b6:	2b 81       	ldd	r18, Y+3	; 0x03
    16b8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ba:	22 30       	cpi	r18, 0x02	; 2
    16bc:	31 05       	cpc	r19, r1
    16be:	2c f4       	brge	.+10     	; 0x16ca <GPIO_writePort+0x38>
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	9c 81       	ldd	r25, Y+4	; 0x04
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	61 f0       	breq	.+24     	; 0x16e0 <GPIO_writePort+0x4e>
    16c8:	1e c0       	rjmp	.+60     	; 0x1706 <GPIO_writePort+0x74>
    16ca:	2b 81       	ldd	r18, Y+3	; 0x03
    16cc:	3c 81       	ldd	r19, Y+4	; 0x04
    16ce:	22 30       	cpi	r18, 0x02	; 2
    16d0:	31 05       	cpc	r19, r1
    16d2:	81 f0       	breq	.+32     	; 0x16f4 <GPIO_writePort+0x62>
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	9c 81       	ldd	r25, Y+4	; 0x04
    16d8:	83 30       	cpi	r24, 0x03	; 3
    16da:	91 05       	cpc	r25, r1
    16dc:	81 f0       	breq	.+32     	; 0x16fe <GPIO_writePort+0x6c>
    16de:	13 c0       	rjmp	.+38     	; 0x1706 <GPIO_writePort+0x74>
	case PORTA_ID:
		PORTA=value;
    16e0:	eb e3       	ldi	r30, 0x3B	; 59
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	80 83       	st	Z, r24
    16e8:	0e c0       	rjmp	.+28     	; 0x1706 <GPIO_writePort+0x74>
		break;
	case PORTB_ID:
		PORTB=value;
    16ea:	e8 e3       	ldi	r30, 0x38	; 56
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	80 83       	st	Z, r24
    16f2:	09 c0       	rjmp	.+18     	; 0x1706 <GPIO_writePort+0x74>
		break;
	case PORTC_ID:
		PORTC=value;
    16f4:	e5 e3       	ldi	r30, 0x35	; 53
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	80 83       	st	Z, r24
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <GPIO_writePort+0x74>
		break;
	case PORTD_ID:
		PORTD=value;
    16fe:	e2 e3       	ldi	r30, 0x32	; 50
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	80 83       	st	Z, r24
		break;
	}
}
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	00 d0       	rcall	.+0      	; 0x171a <GPIO_readPort+0x6>
    171a:	00 d0       	rcall	.+0      	; 0x171c <GPIO_readPort+0x8>
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	84 30       	cpi	r24, 0x04	; 4
    1726:	10 f0       	brcs	.+4      	; 0x172c <GPIO_readPort+0x18>
	{
		return LOGIC_LOW;
    1728:	1c 82       	std	Y+4, r1	; 0x04
    172a:	34 c0       	rjmp	.+104    	; 0x1794 <GPIO_readPort+0x80>
	}
	switch(port_num){
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	3b 83       	std	Y+3, r19	; 0x03
    1734:	2a 83       	std	Y+2, r18	; 0x02
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	9b 81       	ldd	r25, Y+3	; 0x03
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	d1 f0       	breq	.+52     	; 0x1774 <GPIO_readPort+0x60>
    1740:	2a 81       	ldd	r18, Y+2	; 0x02
    1742:	3b 81       	ldd	r19, Y+3	; 0x03
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	2c f4       	brge	.+10     	; 0x1754 <GPIO_readPort+0x40>
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	61 f0       	breq	.+24     	; 0x176a <GPIO_readPort+0x56>
    1752:	1f c0       	rjmp	.+62     	; 0x1792 <GPIO_readPort+0x7e>
    1754:	2a 81       	ldd	r18, Y+2	; 0x02
    1756:	3b 81       	ldd	r19, Y+3	; 0x03
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	81 f0       	breq	.+32     	; 0x177e <GPIO_readPort+0x6a>
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	9b 81       	ldd	r25, Y+3	; 0x03
    1762:	83 30       	cpi	r24, 0x03	; 3
    1764:	91 05       	cpc	r25, r1
    1766:	81 f0       	breq	.+32     	; 0x1788 <GPIO_readPort+0x74>
    1768:	14 c0       	rjmp	.+40     	; 0x1792 <GPIO_readPort+0x7e>
	case PORTA_ID:
		return PINA;
    176a:	e9 e3       	ldi	r30, 0x39	; 57
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	90 81       	ld	r25, Z
    1770:	9c 83       	std	Y+4, r25	; 0x04
    1772:	10 c0       	rjmp	.+32     	; 0x1794 <GPIO_readPort+0x80>
		break;
	case PORTB_ID:
		return PINB;
    1774:	e6 e3       	ldi	r30, 0x36	; 54
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	20 81       	ld	r18, Z
    177a:	2c 83       	std	Y+4, r18	; 0x04
    177c:	0b c0       	rjmp	.+22     	; 0x1794 <GPIO_readPort+0x80>
		break;
	case PORTC_ID:
		return PINC;
    177e:	e3 e3       	ldi	r30, 0x33	; 51
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	30 81       	ld	r19, Z
    1784:	3c 83       	std	Y+4, r19	; 0x04
    1786:	06 c0       	rjmp	.+12     	; 0x1794 <GPIO_readPort+0x80>
		break;
	case PORTD_ID:
		return PIND;
    1788:	e0 e3       	ldi	r30, 0x30	; 48
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	8c 83       	std	Y+4, r24	; 0x04
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <GPIO_readPort+0x80>
		break;

		break;
	}
	return LOGIC_LOW;
    1792:	1c 82       	std	Y+4, r1	; 0x04
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <KEYPAD_getPressedKey+0x6>
    17aa:	0f 92       	push	r0
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    17b0:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    17b2:	1b 82       	std	Y+3, r1	; 0x03
    17b4:	42 c0       	rjmp	.+132    	; 0x183a <KEYPAD_getPressedKey+0x96>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	98 2f       	mov	r25, r24
    17c2:	9c 5f       	subi	r25, 0xFC	; 252
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	69 2f       	mov	r22, r25
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    17ca:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9c 01       	movw	r18, r24
    17d6:	2c 5f       	subi	r18, 0xFC	; 252
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <KEYPAD_getPressedKey+0x40>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	2a 95       	dec	r18
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <KEYPAD_getPressedKey+0x3c>
    17e8:	89 83       	std	Y+1, r24	; 0x01
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	69 81       	ldd	r22, Y+1	; 0x01
    17ee:	0e 94 49 0b 	call	0x1692	; 0x1692 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    17f2:	1a 82       	std	Y+2, r1	; 0x02
    17f4:	1c c0       	rjmp	.+56     	; 0x182e <KEYPAD_getPressedKey+0x8a>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	6a 81       	ldd	r22, Y+2	; 0x02
    17fa:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <GPIO_readPin>
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	99 f4       	brne	.+38     	; 0x1828 <KEYPAD_getPressedKey+0x84>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	98 2f       	mov	r25, r24
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	89 0f       	add	r24, r25
    1816:	8f 5f       	subi	r24, 0xFF	; 255
    1818:	0e 94 22 0c 	call	0x1844	; 0x1844 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	8f 5f       	subi	r24, 0xFF	; 255
    182c:	8a 83       	std	Y+2, r24	; 0x02
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	84 30       	cpi	r24, 0x04	; 4
    1832:	08 f3       	brcs	.-62     	; 0x17f6 <KEYPAD_getPressedKey+0x52>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	8f 5f       	subi	r24, 0xFF	; 255
    1838:	8b 83       	std	Y+3, r24	; 0x03
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	84 30       	cpi	r24, 0x04	; 4
    183e:	08 f4       	brcc	.+2      	; 0x1842 <KEYPAD_getPressedKey+0x9e>
    1840:	ba cf       	rjmp	.-140    	; 0x17b6 <KEYPAD_getPressedKey+0x12>
    1842:	b7 cf       	rjmp	.-146    	; 0x17b2 <KEYPAD_getPressedKey+0xe>

00001844 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <KEYPAD_4x4_adjustKeyNumber+0x6>
    184a:	00 d0       	rcall	.+0      	; 0x184c <KEYPAD_4x4_adjustKeyNumber+0x8>
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1852:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3c 83       	std	Y+4, r19	; 0x04
    185c:	2b 83       	std	Y+3, r18	; 0x03
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	88 30       	cpi	r24, 0x08	; 8
    1864:	91 05       	cpc	r25, r1
    1866:	09 f4       	brne	.+2      	; 0x186a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1868:	70 c0       	rjmp	.+224    	; 0x194a <KEYPAD_4x4_adjustKeyNumber+0x106>
    186a:	2b 81       	ldd	r18, Y+3	; 0x03
    186c:	3c 81       	ldd	r19, Y+4	; 0x04
    186e:	29 30       	cpi	r18, 0x09	; 9
    1870:	31 05       	cpc	r19, r1
    1872:	5c f5       	brge	.+86     	; 0x18ca <KEYPAD_4x4_adjustKeyNumber+0x86>
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	84 30       	cpi	r24, 0x04	; 4
    187a:	91 05       	cpc	r25, r1
    187c:	09 f4       	brne	.+2      	; 0x1880 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    187e:	59 c0       	rjmp	.+178    	; 0x1932 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1880:	2b 81       	ldd	r18, Y+3	; 0x03
    1882:	3c 81       	ldd	r19, Y+4	; 0x04
    1884:	25 30       	cpi	r18, 0x05	; 5
    1886:	31 05       	cpc	r19, r1
    1888:	9c f4       	brge	.+38     	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	82 30       	cpi	r24, 0x02	; 2
    1890:	91 05       	cpc	r25, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1894:	48 c0       	rjmp	.+144    	; 0x1926 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1896:	2b 81       	ldd	r18, Y+3	; 0x03
    1898:	3c 81       	ldd	r19, Y+4	; 0x04
    189a:	23 30       	cpi	r18, 0x03	; 3
    189c:	31 05       	cpc	r19, r1
    189e:	0c f0       	brlt	.+2      	; 0x18a2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    18a0:	45 c0       	rjmp	.+138    	; 0x192c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	91 05       	cpc	r25, r1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <KEYPAD_4x4_adjustKeyNumber+0x6a>
    18ac:	39 c0       	rjmp	.+114    	; 0x1920 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    18ae:	67 c0       	rjmp	.+206    	; 0x197e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    18b0:	2b 81       	ldd	r18, Y+3	; 0x03
    18b2:	3c 81       	ldd	r19, Y+4	; 0x04
    18b4:	26 30       	cpi	r18, 0x06	; 6
    18b6:	31 05       	cpc	r19, r1
    18b8:	09 f4       	brne	.+2      	; 0x18bc <KEYPAD_4x4_adjustKeyNumber+0x78>
    18ba:	41 c0       	rjmp	.+130    	; 0x193e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	87 30       	cpi	r24, 0x07	; 7
    18c2:	91 05       	cpc	r25, r1
    18c4:	0c f0       	brlt	.+2      	; 0x18c8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    18c6:	3e c0       	rjmp	.+124    	; 0x1944 <KEYPAD_4x4_adjustKeyNumber+0x100>
    18c8:	37 c0       	rjmp	.+110    	; 0x1938 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    18ca:	2b 81       	ldd	r18, Y+3	; 0x03
    18cc:	3c 81       	ldd	r19, Y+4	; 0x04
    18ce:	2c 30       	cpi	r18, 0x0C	; 12
    18d0:	31 05       	cpc	r19, r1
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    18d4:	46 c0       	rjmp	.+140    	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	8d 30       	cpi	r24, 0x0D	; 13
    18dc:	91 05       	cpc	r25, r1
    18de:	5c f4       	brge	.+22     	; 0x18f6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    18e0:	2b 81       	ldd	r18, Y+3	; 0x03
    18e2:	3c 81       	ldd	r19, Y+4	; 0x04
    18e4:	2a 30       	cpi	r18, 0x0A	; 10
    18e6:	31 05       	cpc	r19, r1
    18e8:	b1 f1       	breq	.+108    	; 0x1956 <KEYPAD_4x4_adjustKeyNumber+0x112>
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	8b 30       	cpi	r24, 0x0B	; 11
    18f0:	91 05       	cpc	r25, r1
    18f2:	a4 f5       	brge	.+104    	; 0x195c <KEYPAD_4x4_adjustKeyNumber+0x118>
    18f4:	2d c0       	rjmp	.+90     	; 0x1950 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    18f6:	2b 81       	ldd	r18, Y+3	; 0x03
    18f8:	3c 81       	ldd	r19, Y+4	; 0x04
    18fa:	2e 30       	cpi	r18, 0x0E	; 14
    18fc:	31 05       	cpc	r19, r1
    18fe:	b9 f1       	breq	.+110    	; 0x196e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	8e 30       	cpi	r24, 0x0E	; 14
    1906:	91 05       	cpc	r25, r1
    1908:	7c f1       	brlt	.+94     	; 0x1968 <KEYPAD_4x4_adjustKeyNumber+0x124>
    190a:	2b 81       	ldd	r18, Y+3	; 0x03
    190c:	3c 81       	ldd	r19, Y+4	; 0x04
    190e:	2f 30       	cpi	r18, 0x0F	; 15
    1910:	31 05       	cpc	r19, r1
    1912:	79 f1       	breq	.+94     	; 0x1972 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	9c 81       	ldd	r25, Y+4	; 0x04
    1918:	80 31       	cpi	r24, 0x10	; 16
    191a:	91 05       	cpc	r25, r1
    191c:	69 f1       	breq	.+90     	; 0x1978 <KEYPAD_4x4_adjustKeyNumber+0x134>
    191e:	2f c0       	rjmp	.+94     	; 0x197e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1920:	87 e0       	ldi	r24, 0x07	; 7
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	2e c0       	rjmp	.+92     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1926:	88 e0       	ldi	r24, 0x08	; 8
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	2b c0       	rjmp	.+86     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    192c:	89 e0       	ldi	r24, 0x09	; 9
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	28 c0       	rjmp	.+80     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1932:	85 e2       	ldi	r24, 0x25	; 37
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	25 c0       	rjmp	.+74     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1938:	84 e0       	ldi	r24, 0x04	; 4
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	22 c0       	rjmp	.+68     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    193e:	85 e0       	ldi	r24, 0x05	; 5
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	1f c0       	rjmp	.+62     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1944:	86 e0       	ldi	r24, 0x06	; 6
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	1c c0       	rjmp	.+56     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    194a:	8a e2       	ldi	r24, 0x2A	; 42
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	19 c0       	rjmp	.+50     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	16 c0       	rjmp	.+44     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	13 c0       	rjmp	.+38     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    195c:	83 e0       	ldi	r24, 0x03	; 3
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	10 c0       	rjmp	.+32     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1962:	8d e2       	ldi	r24, 0x2D	; 45
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	0d c0       	rjmp	.+26     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1968:	8d e0       	ldi	r24, 0x0D	; 13
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	0a c0       	rjmp	.+20     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    196e:	19 82       	std	Y+1, r1	; 0x01
    1970:	08 c0       	rjmp	.+16     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1972:	8d e3       	ldi	r24, 0x3D	; 61
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	05 c0       	rjmp	.+10     	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1978:	8b e2       	ldi	r24, 0x2B	; 43
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1982:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void){
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT,LCD_RS_PIN,PIN_OUTPUT);
    199a:	83 e0       	ldi	r24, 0x03	; 3
    199c:	64 e0       	ldi	r22, 0x04	; 4
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT,LCD_RW_PIN,PIN_OUTPUT);
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	65 e0       	ldi	r22, 0x05	; 5
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT,LCD_E_PIN,PIN_OUTPUT);
    19ae:	83 e0       	ldi	r24, 0x03	; 3
    19b0:	66 e0       	ldi	r22, 0x06	; 6
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DATA_PIN+3,PIN_OUTPUT);
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);/* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
#else
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	6f ef       	ldi	r22, 0xFF	; 255
    19bc:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);/* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    19c0:	88 e3       	ldi	r24, 0x38	; 56
    19c2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_sendCommand>

#endif


	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);
    19c6:	8c e0       	ldi	r24, 0x0C	; 12
    19c8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_DISPLAY);
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_sendCommand>
}
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command){
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	e9 97       	sbiw	r28, 0x39	; 57
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,LOGIC_LOW);
    19ee:	83 e0       	ldi	r24, 0x03	; 3
    19f0:	64 e0       	ldi	r22, 0x04	; 4
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 65 09 	call	0x12ca	; 0x12ca <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT,LCD_RW_PIN,LOGIC_LOW);
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	65 e0       	ldi	r22, 0x05	; 5
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	0e 94 65 09 	call	0x12ca	; 0x12ca <GPIO_writePin>
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	a0 e8       	ldi	r26, 0x80	; 128
    1a08:	bf e3       	ldi	r27, 0x3F	; 63
    1a0a:	8d ab       	std	Y+53, r24	; 0x35
    1a0c:	9e ab       	std	Y+54, r25	; 0x36
    1a0e:	af ab       	std	Y+55, r26	; 0x37
    1a10:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a12:	6d a9       	ldd	r22, Y+53	; 0x35
    1a14:	7e a9       	ldd	r23, Y+54	; 0x36
    1a16:	8f a9       	ldd	r24, Y+55	; 0x37
    1a18:	98 ad       	ldd	r25, Y+56	; 0x38
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	4a e7       	ldi	r20, 0x7A	; 122
    1a20:	53 e4       	ldi	r21, 0x43	; 67
    1a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	89 ab       	std	Y+49, r24	; 0x31
    1a2c:	9a ab       	std	Y+50, r25	; 0x32
    1a2e:	ab ab       	std	Y+51, r26	; 0x33
    1a30:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a32:	69 a9       	ldd	r22, Y+49	; 0x31
    1a34:	7a a9       	ldd	r23, Y+50	; 0x32
    1a36:	8b a9       	ldd	r24, Y+51	; 0x33
    1a38:	9c a9       	ldd	r25, Y+52	; 0x34
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e8       	ldi	r20, 0x80	; 128
    1a40:	5f e3       	ldi	r21, 0x3F	; 63
    1a42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a46:	88 23       	and	r24, r24
    1a48:	2c f4       	brge	.+10     	; 0x1a54 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	98 ab       	std	Y+48, r25	; 0x30
    1a50:	8f a7       	std	Y+47, r24	; 0x2f
    1a52:	3f c0       	rjmp	.+126    	; 0x1ad2 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1a54:	69 a9       	ldd	r22, Y+49	; 0x31
    1a56:	7a a9       	ldd	r23, Y+50	; 0x32
    1a58:	8b a9       	ldd	r24, Y+51	; 0x33
    1a5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	3f ef       	ldi	r19, 0xFF	; 255
    1a60:	4f e7       	ldi	r20, 0x7F	; 127
    1a62:	57 e4       	ldi	r21, 0x47	; 71
    1a64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a68:	18 16       	cp	r1, r24
    1a6a:	4c f5       	brge	.+82     	; 0x1abe <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a6e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a70:	8f a9       	ldd	r24, Y+55	; 0x37
    1a72:	98 ad       	ldd	r25, Y+56	; 0x38
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e2       	ldi	r20, 0x20	; 32
    1a7a:	51 e4       	ldi	r21, 0x41	; 65
    1a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	98 ab       	std	Y+48, r25	; 0x30
    1a92:	8f a7       	std	Y+47, r24	; 0x2f
    1a94:	0f c0       	rjmp	.+30     	; 0x1ab4 <LCD_sendCommand+0xdc>
    1a96:	89 e1       	ldi	r24, 0x19	; 25
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9e a7       	std	Y+46, r25	; 0x2e
    1a9c:	8d a7       	std	Y+45, r24	; 0x2d
    1a9e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aa0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <LCD_sendCommand+0xca>
    1aa6:	9e a7       	std	Y+46, r25	; 0x2e
    1aa8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aac:	98 a9       	ldd	r25, Y+48	; 0x30
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	98 ab       	std	Y+48, r25	; 0x30
    1ab2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ab6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	69 f7       	brne	.-38     	; 0x1a96 <LCD_sendCommand+0xbe>
    1abc:	14 c0       	rjmp	.+40     	; 0x1ae6 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1abe:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ac2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ac4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	98 ab       	std	Y+48, r25	; 0x30
    1ad0:	8f a7       	std	Y+47, r24	; 0x2f
    1ad2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ad4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ad6:	9c a7       	std	Y+44, r25	; 0x2c
    1ad8:	8b a7       	std	Y+43, r24	; 0x2b
    1ada:	8b a5       	ldd	r24, Y+43	; 0x2b
    1adc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <LCD_sendCommand+0x106>
    1ae2:	9c a7       	std	Y+44, r25	; 0x2c
    1ae4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOGIC_HIGH);
    1ae6:	83 e0       	ldi	r24, 0x03	; 3
    1ae8:	66 e0       	ldi	r22, 0x06	; 6
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	0e 94 65 09 	call	0x12ca	; 0x12ca <GPIO_writePin>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a0 e8       	ldi	r26, 0x80	; 128
    1af6:	bf e3       	ldi	r27, 0x3F	; 63
    1af8:	8f a3       	std	Y+39, r24	; 0x27
    1afa:	98 a7       	std	Y+40, r25	; 0x28
    1afc:	a9 a7       	std	Y+41, r26	; 0x29
    1afe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b00:	6f a1       	ldd	r22, Y+39	; 0x27
    1b02:	78 a5       	ldd	r23, Y+40	; 0x28
    1b04:	89 a5       	ldd	r24, Y+41	; 0x29
    1b06:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4a e7       	ldi	r20, 0x7A	; 122
    1b0e:	53 e4       	ldi	r21, 0x43	; 67
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	8b a3       	std	Y+35, r24	; 0x23
    1b1a:	9c a3       	std	Y+36, r25	; 0x24
    1b1c:	ad a3       	std	Y+37, r26	; 0x25
    1b1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b20:	6b a1       	ldd	r22, Y+35	; 0x23
    1b22:	7c a1       	ldd	r23, Y+36	; 0x24
    1b24:	8d a1       	ldd	r24, Y+37	; 0x25
    1b26:	9e a1       	ldd	r25, Y+38	; 0x26
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b34:	88 23       	and	r24, r24
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9a a3       	std	Y+34, r25	; 0x22
    1b3e:	89 a3       	std	Y+33, r24	; 0x21
    1b40:	3f c0       	rjmp	.+126    	; 0x1bc0 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1b42:	6b a1       	ldd	r22, Y+35	; 0x23
    1b44:	7c a1       	ldd	r23, Y+36	; 0x24
    1b46:	8d a1       	ldd	r24, Y+37	; 0x25
    1b48:	9e a1       	ldd	r25, Y+38	; 0x26
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	57 e4       	ldi	r21, 0x47	; 71
    1b52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	4c f5       	brge	.+82     	; 0x1bac <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b5c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b5e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b60:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	9a a3       	std	Y+34, r25	; 0x22
    1b80:	89 a3       	std	Y+33, r24	; 0x21
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <LCD_sendCommand+0x1ca>
    1b84:	89 e1       	ldi	r24, 0x19	; 25
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	98 a3       	std	Y+32, r25	; 0x20
    1b8a:	8f 8f       	std	Y+31, r24	; 0x1f
    1b8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b8e:	98 a1       	ldd	r25, Y+32	; 0x20
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <LCD_sendCommand+0x1b8>
    1b94:	98 a3       	std	Y+32, r25	; 0x20
    1b96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b98:	89 a1       	ldd	r24, Y+33	; 0x21
    1b9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	9a a3       	std	Y+34, r25	; 0x22
    1ba0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	69 f7       	brne	.-38     	; 0x1b84 <LCD_sendCommand+0x1ac>
    1baa:	14 c0       	rjmp	.+40     	; 0x1bd4 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bac:	6b a1       	ldd	r22, Y+35	; 0x23
    1bae:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9a a3       	std	Y+34, r25	; 0x22
    1bbe:	89 a3       	std	Y+33, r24	; 0x21
    1bc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc4:	9e 8f       	std	Y+30, r25	; 0x1e
    1bc6:	8d 8f       	std	Y+29, r24	; 0x1d
    1bc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_sendCommand+0x1f4>
    1bd0:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd2:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePort(LCD_DATA_PORT,lcd_data);
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOGIC_LOW);
	_delay_ms(1);
#else
	GPIO_writePort(LCD_DATA_PORT,command);
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	69 ad       	ldd	r22, Y+57	; 0x39
    1bd8:	0e 94 49 0b 	call	0x1692	; 0x1692 <GPIO_writePort>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a0 e8       	ldi	r26, 0x80	; 128
    1be2:	bf e3       	ldi	r27, 0x3F	; 63
    1be4:	89 8f       	std	Y+25, r24	; 0x19
    1be6:	9a 8f       	std	Y+26, r25	; 0x1a
    1be8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bec:	69 8d       	ldd	r22, Y+25	; 0x19
    1bee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	4a e7       	ldi	r20, 0x7A	; 122
    1bfa:	53 e4       	ldi	r21, 0x43	; 67
    1bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	8d 8b       	std	Y+21, r24	; 0x15
    1c06:	9e 8b       	std	Y+22, r25	; 0x16
    1c08:	af 8b       	std	Y+23, r26	; 0x17
    1c0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	98 8d       	ldd	r25, Y+24	; 0x18
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e8       	ldi	r20, 0x80	; 128
    1c1a:	5f e3       	ldi	r21, 0x3F	; 63
    1c1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c20:	88 23       	and	r24, r24
    1c22:	2c f4       	brge	.+10     	; 0x1c2e <LCD_sendCommand+0x256>
		__ticks = 1;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9c 8b       	std	Y+20, r25	; 0x14
    1c2a:	8b 8b       	std	Y+19, r24	; 0x13
    1c2c:	3f c0       	rjmp	.+126    	; 0x1cac <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1c2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c30:	7e 89       	ldd	r23, Y+22	; 0x16
    1c32:	8f 89       	ldd	r24, Y+23	; 0x17
    1c34:	98 8d       	ldd	r25, Y+24	; 0x18
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	3f ef       	ldi	r19, 0xFF	; 255
    1c3a:	4f e7       	ldi	r20, 0x7F	; 127
    1c3c:	57 e4       	ldi	r21, 0x47	; 71
    1c3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	4c f5       	brge	.+82     	; 0x1c98 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c46:	69 8d       	ldd	r22, Y+25	; 0x19
    1c48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e2       	ldi	r20, 0x20	; 32
    1c54:	51 e4       	ldi	r21, 0x41	; 65
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	bc 01       	movw	r22, r24
    1c60:	cd 01       	movw	r24, r26
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9c 8b       	std	Y+20, r25	; 0x14
    1c6c:	8b 8b       	std	Y+19, r24	; 0x13
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <LCD_sendCommand+0x2b6>
    1c70:	89 e1       	ldi	r24, 0x19	; 25
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9a 8b       	std	Y+18, r25	; 0x12
    1c76:	89 8b       	std	Y+17, r24	; 0x11
    1c78:	89 89       	ldd	r24, Y+17	; 0x11
    1c7a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_sendCommand+0x2a4>
    1c80:	9a 8b       	std	Y+18, r25	; 0x12
    1c82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c84:	8b 89       	ldd	r24, Y+19	; 0x13
    1c86:	9c 89       	ldd	r25, Y+20	; 0x14
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	9c 8b       	std	Y+20, r25	; 0x14
    1c8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c90:	9c 89       	ldd	r25, Y+20	; 0x14
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	69 f7       	brne	.-38     	; 0x1c70 <LCD_sendCommand+0x298>
    1c96:	14 c0       	rjmp	.+40     	; 0x1cc0 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c98:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9c 8b       	std	Y+20, r25	; 0x14
    1caa:	8b 8b       	std	Y+19, r24	; 0x13
    1cac:	8b 89       	ldd	r24, Y+19	; 0x13
    1cae:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb0:	98 8b       	std	Y+16, r25	; 0x10
    1cb2:	8f 87       	std	Y+15, r24	; 0x0f
    1cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb6:	98 89       	ldd	r25, Y+16	; 0x10
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <LCD_sendCommand+0x2e0>
    1cbc:	98 8b       	std	Y+16, r25	; 0x10
    1cbe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOGIC_LOW);
    1cc0:	83 e0       	ldi	r24, 0x03	; 3
    1cc2:	66 e0       	ldi	r22, 0x06	; 6
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	0e 94 65 09 	call	0x12ca	; 0x12ca <GPIO_writePin>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	a0 e8       	ldi	r26, 0x80	; 128
    1cd0:	bf e3       	ldi	r27, 0x3F	; 63
    1cd2:	8b 87       	std	Y+11, r24	; 0x0b
    1cd4:	9c 87       	std	Y+12, r25	; 0x0c
    1cd6:	ad 87       	std	Y+13, r26	; 0x0d
    1cd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	4a e7       	ldi	r20, 0x7A	; 122
    1ce8:	53 e4       	ldi	r21, 0x43	; 67
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	8f 83       	std	Y+7, r24	; 0x07
    1cf4:	98 87       	std	Y+8, r25	; 0x08
    1cf6:	a9 87       	std	Y+9, r26	; 0x09
    1cf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfc:	78 85       	ldd	r23, Y+8	; 0x08
    1cfe:	89 85       	ldd	r24, Y+9	; 0x09
    1d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e8       	ldi	r20, 0x80	; 128
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0e:	88 23       	and	r24, r24
    1d10:	2c f4       	brge	.+10     	; 0x1d1c <LCD_sendCommand+0x344>
		__ticks = 1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9e 83       	std	Y+6, r25	; 0x06
    1d18:	8d 83       	std	Y+5, r24	; 0x05
    1d1a:	3f c0       	rjmp	.+126    	; 0x1d9a <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1e:	78 85       	ldd	r23, Y+8	; 0x08
    1d20:	89 85       	ldd	r24, Y+9	; 0x09
    1d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	3f ef       	ldi	r19, 0xFF	; 255
    1d28:	4f e7       	ldi	r20, 0x7F	; 127
    1d2a:	57 e4       	ldi	r21, 0x47	; 71
    1d2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d30:	18 16       	cp	r1, r24
    1d32:	4c f5       	brge	.+82     	; 0x1d86 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e2       	ldi	r20, 0x20	; 32
    1d42:	51 e4       	ldi	r21, 0x41	; 65
    1d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <LCD_sendCommand+0x3a4>
    1d5e:	89 e1       	ldi	r24, 0x19	; 25
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9c 83       	std	Y+4, r25	; 0x04
    1d64:	8b 83       	std	Y+3, r24	; 0x03
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_sendCommand+0x392>
    1d6e:	9c 83       	std	Y+4, r25	; 0x04
    1d70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	69 f7       	brne	.-38     	; 0x1d5e <LCD_sendCommand+0x386>
    1d84:	14 c0       	rjmp	.+40     	; 0x1dae <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d86:	6f 81       	ldd	r22, Y+7	; 0x07
    1d88:	78 85       	ldd	r23, Y+8	; 0x08
    1d8a:	89 85       	ldd	r24, Y+9	; 0x09
    1d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	9a 81       	ldd	r25, Y+2	; 0x02
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_sendCommand+0x3ce>
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    1dae:	e9 96       	adiw	r28, 0x39	; 57
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 character){
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	e9 97       	sbiw	r28, 0x39	; 57
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,LOGIC_HIGH);
    1dd6:	83 e0       	ldi	r24, 0x03	; 3
    1dd8:	64 e0       	ldi	r22, 0x04	; 4
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 65 09 	call	0x12ca	; 0x12ca <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT,LCD_RW_PIN,LOGIC_LOW);
    1de0:	83 e0       	ldi	r24, 0x03	; 3
    1de2:	65 e0       	ldi	r22, 0x05	; 5
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	0e 94 65 09 	call	0x12ca	; 0x12ca <GPIO_writePin>
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a0 e8       	ldi	r26, 0x80	; 128
    1df0:	bf e3       	ldi	r27, 0x3F	; 63
    1df2:	8d ab       	std	Y+53, r24	; 0x35
    1df4:	9e ab       	std	Y+54, r25	; 0x36
    1df6:	af ab       	std	Y+55, r26	; 0x37
    1df8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfa:	6d a9       	ldd	r22, Y+53	; 0x35
    1dfc:	7e a9       	ldd	r23, Y+54	; 0x36
    1dfe:	8f a9       	ldd	r24, Y+55	; 0x37
    1e00:	98 ad       	ldd	r25, Y+56	; 0x38
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4a e7       	ldi	r20, 0x7A	; 122
    1e08:	53 e4       	ldi	r21, 0x43	; 67
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	89 ab       	std	Y+49, r24	; 0x31
    1e14:	9a ab       	std	Y+50, r25	; 0x32
    1e16:	ab ab       	std	Y+51, r26	; 0x33
    1e18:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e1a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e20:	9c a9       	ldd	r25, Y+52	; 0x34
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e8       	ldi	r20, 0x80	; 128
    1e28:	5f e3       	ldi	r21, 0x3F	; 63
    1e2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	98 ab       	std	Y+48, r25	; 0x30
    1e38:	8f a7       	std	Y+47, r24	; 0x2f
    1e3a:	3f c0       	rjmp	.+126    	; 0x1eba <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1e3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e40:	8b a9       	ldd	r24, Y+51	; 0x33
    1e42:	9c a9       	ldd	r25, Y+52	; 0x34
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	3f ef       	ldi	r19, 0xFF	; 255
    1e48:	4f e7       	ldi	r20, 0x7F	; 127
    1e4a:	57 e4       	ldi	r21, 0x47	; 71
    1e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e50:	18 16       	cp	r1, r24
    1e52:	4c f5       	brge	.+82     	; 0x1ea6 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e54:	6d a9       	ldd	r22, Y+53	; 0x35
    1e56:	7e a9       	ldd	r23, Y+54	; 0x36
    1e58:	8f a9       	ldd	r24, Y+55	; 0x37
    1e5a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e2       	ldi	r20, 0x20	; 32
    1e62:	51 e4       	ldi	r21, 0x41	; 65
    1e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	98 ab       	std	Y+48, r25	; 0x30
    1e7a:	8f a7       	std	Y+47, r24	; 0x2f
    1e7c:	0f c0       	rjmp	.+30     	; 0x1e9c <LCD_displayCharacter+0xdc>
    1e7e:	89 e1       	ldi	r24, 0x19	; 25
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9e a7       	std	Y+46, r25	; 0x2e
    1e84:	8d a7       	std	Y+45, r24	; 0x2d
    1e86:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e88:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <LCD_displayCharacter+0xca>
    1e8e:	9e a7       	std	Y+46, r25	; 0x2e
    1e90:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e94:	98 a9       	ldd	r25, Y+48	; 0x30
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	98 ab       	std	Y+48, r25	; 0x30
    1e9a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	69 f7       	brne	.-38     	; 0x1e7e <LCD_displayCharacter+0xbe>
    1ea4:	14 c0       	rjmp	.+40     	; 0x1ece <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eaa:	8b a9       	ldd	r24, Y+51	; 0x33
    1eac:	9c a9       	ldd	r25, Y+52	; 0x34
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	98 ab       	std	Y+48, r25	; 0x30
    1eb8:	8f a7       	std	Y+47, r24	; 0x2f
    1eba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ebc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ebe:	9c a7       	std	Y+44, r25	; 0x2c
    1ec0:	8b a7       	std	Y+43, r24	; 0x2b
    1ec2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_displayCharacter+0x106>
    1eca:	9c a7       	std	Y+44, r25	; 0x2c
    1ecc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOGIC_HIGH);
    1ece:	83 e0       	ldi	r24, 0x03	; 3
    1ed0:	66 e0       	ldi	r22, 0x06	; 6
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 65 09 	call	0x12ca	; 0x12ca <GPIO_writePin>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	a0 e8       	ldi	r26, 0x80	; 128
    1ede:	bf e3       	ldi	r27, 0x3F	; 63
    1ee0:	8f a3       	std	Y+39, r24	; 0x27
    1ee2:	98 a7       	std	Y+40, r25	; 0x28
    1ee4:	a9 a7       	std	Y+41, r26	; 0x29
    1ee6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eea:	78 a5       	ldd	r23, Y+40	; 0x28
    1eec:	89 a5       	ldd	r24, Y+41	; 0x29
    1eee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	4a e7       	ldi	r20, 0x7A	; 122
    1ef6:	53 e4       	ldi	r21, 0x43	; 67
    1ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	8b a3       	std	Y+35, r24	; 0x23
    1f02:	9c a3       	std	Y+36, r25	; 0x24
    1f04:	ad a3       	std	Y+37, r26	; 0x25
    1f06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f08:	6b a1       	ldd	r22, Y+35	; 0x23
    1f0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e8       	ldi	r20, 0x80	; 128
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f1c:	88 23       	and	r24, r24
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9a a3       	std	Y+34, r25	; 0x22
    1f26:	89 a3       	std	Y+33, r24	; 0x21
    1f28:	3f c0       	rjmp	.+126    	; 0x1fa8 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1f2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f30:	9e a1       	ldd	r25, Y+38	; 0x26
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	3f ef       	ldi	r19, 0xFF	; 255
    1f36:	4f e7       	ldi	r20, 0x7F	; 127
    1f38:	57 e4       	ldi	r21, 0x47	; 71
    1f3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3e:	18 16       	cp	r1, r24
    1f40:	4c f5       	brge	.+82     	; 0x1f94 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f42:	6f a1       	ldd	r22, Y+39	; 0x27
    1f44:	78 a5       	ldd	r23, Y+40	; 0x28
    1f46:	89 a5       	ldd	r24, Y+41	; 0x29
    1f48:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9a a3       	std	Y+34, r25	; 0x22
    1f68:	89 a3       	std	Y+33, r24	; 0x21
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <LCD_displayCharacter+0x1ca>
    1f6c:	89 e1       	ldi	r24, 0x19	; 25
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	98 a3       	std	Y+32, r25	; 0x20
    1f72:	8f 8f       	std	Y+31, r24	; 0x1f
    1f74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f76:	98 a1       	ldd	r25, Y+32	; 0x20
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD_displayCharacter+0x1b8>
    1f7c:	98 a3       	std	Y+32, r25	; 0x20
    1f7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f80:	89 a1       	ldd	r24, Y+33	; 0x21
    1f82:	9a a1       	ldd	r25, Y+34	; 0x22
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	9a a3       	std	Y+34, r25	; 0x22
    1f88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	69 f7       	brne	.-38     	; 0x1f6c <LCD_displayCharacter+0x1ac>
    1f92:	14 c0       	rjmp	.+40     	; 0x1fbc <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f94:	6b a1       	ldd	r22, Y+35	; 0x23
    1f96:	7c a1       	ldd	r23, Y+36	; 0x24
    1f98:	8d a1       	ldd	r24, Y+37	; 0x25
    1f9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9a a3       	std	Y+34, r25	; 0x22
    1fa6:	89 a3       	std	Y+33, r24	; 0x21
    1fa8:	89 a1       	ldd	r24, Y+33	; 0x21
    1faa:	9a a1       	ldd	r25, Y+34	; 0x22
    1fac:	9e 8f       	std	Y+30, r25	; 0x1e
    1fae:	8d 8f       	std	Y+29, r24	; 0x1d
    1fb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <LCD_displayCharacter+0x1f4>
    1fb8:	9e 8f       	std	Y+30, r25	; 0x1e
    1fba:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePort(LCD_DATA_PORT,lcd_data);
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOGIC_LOW);
	_delay_ms(1);
#else
	GPIO_writePort(LCD_DATA_PORT,character);
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	69 ad       	ldd	r22, Y+57	; 0x39
    1fc0:	0e 94 49 0b 	call	0x1692	; 0x1692 <GPIO_writePort>
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	a0 e8       	ldi	r26, 0x80	; 128
    1fca:	bf e3       	ldi	r27, 0x3F	; 63
    1fcc:	89 8f       	std	Y+25, r24	; 0x19
    1fce:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd0:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	4a e7       	ldi	r20, 0x7A	; 122
    1fe2:	53 e4       	ldi	r21, 0x43	; 67
    1fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	8d 8b       	std	Y+21, r24	; 0x15
    1fee:	9e 8b       	std	Y+22, r25	; 0x16
    1ff0:	af 8b       	std	Y+23, r26	; 0x17
    1ff2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e8       	ldi	r20, 0x80	; 128
    2002:	5f e3       	ldi	r21, 0x3F	; 63
    2004:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2008:	88 23       	and	r24, r24
    200a:	2c f4       	brge	.+10     	; 0x2016 <LCD_displayCharacter+0x256>
		__ticks = 1;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9c 8b       	std	Y+20, r25	; 0x14
    2012:	8b 8b       	std	Y+19, r24	; 0x13
    2014:	3f c0       	rjmp	.+126    	; 0x2094 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2016:	6d 89       	ldd	r22, Y+21	; 0x15
    2018:	7e 89       	ldd	r23, Y+22	; 0x16
    201a:	8f 89       	ldd	r24, Y+23	; 0x17
    201c:	98 8d       	ldd	r25, Y+24	; 0x18
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	3f ef       	ldi	r19, 0xFF	; 255
    2022:	4f e7       	ldi	r20, 0x7F	; 127
    2024:	57 e4       	ldi	r21, 0x47	; 71
    2026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202a:	18 16       	cp	r1, r24
    202c:	4c f5       	brge	.+82     	; 0x2080 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202e:	69 8d       	ldd	r22, Y+25	; 0x19
    2030:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2032:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2034:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e2       	ldi	r20, 0x20	; 32
    203c:	51 e4       	ldi	r21, 0x41	; 65
    203e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9c 8b       	std	Y+20, r25	; 0x14
    2054:	8b 8b       	std	Y+19, r24	; 0x13
    2056:	0f c0       	rjmp	.+30     	; 0x2076 <LCD_displayCharacter+0x2b6>
    2058:	89 e1       	ldi	r24, 0x19	; 25
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9a 8b       	std	Y+18, r25	; 0x12
    205e:	89 8b       	std	Y+17, r24	; 0x11
    2060:	89 89       	ldd	r24, Y+17	; 0x11
    2062:	9a 89       	ldd	r25, Y+18	; 0x12
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <LCD_displayCharacter+0x2a4>
    2068:	9a 8b       	std	Y+18, r25	; 0x12
    206a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206c:	8b 89       	ldd	r24, Y+19	; 0x13
    206e:	9c 89       	ldd	r25, Y+20	; 0x14
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	9c 8b       	std	Y+20, r25	; 0x14
    2074:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2076:	8b 89       	ldd	r24, Y+19	; 0x13
    2078:	9c 89       	ldd	r25, Y+20	; 0x14
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	69 f7       	brne	.-38     	; 0x2058 <LCD_displayCharacter+0x298>
    207e:	14 c0       	rjmp	.+40     	; 0x20a8 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2080:	6d 89       	ldd	r22, Y+21	; 0x15
    2082:	7e 89       	ldd	r23, Y+22	; 0x16
    2084:	8f 89       	ldd	r24, Y+23	; 0x17
    2086:	98 8d       	ldd	r25, Y+24	; 0x18
    2088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9c 8b       	std	Y+20, r25	; 0x14
    2092:	8b 8b       	std	Y+19, r24	; 0x13
    2094:	8b 89       	ldd	r24, Y+19	; 0x13
    2096:	9c 89       	ldd	r25, Y+20	; 0x14
    2098:	98 8b       	std	Y+16, r25	; 0x10
    209a:	8f 87       	std	Y+15, r24	; 0x0f
    209c:	8f 85       	ldd	r24, Y+15	; 0x0f
    209e:	98 89       	ldd	r25, Y+16	; 0x10
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <LCD_displayCharacter+0x2e0>
    20a4:	98 8b       	std	Y+16, r25	; 0x10
    20a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOGIC_LOW);
    20a8:	83 e0       	ldi	r24, 0x03	; 3
    20aa:	66 e0       	ldi	r22, 0x06	; 6
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	0e 94 65 09 	call	0x12ca	; 0x12ca <GPIO_writePin>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	a0 e8       	ldi	r26, 0x80	; 128
    20b8:	bf e3       	ldi	r27, 0x3F	; 63
    20ba:	8b 87       	std	Y+11, r24	; 0x0b
    20bc:	9c 87       	std	Y+12, r25	; 0x0c
    20be:	ad 87       	std	Y+13, r26	; 0x0d
    20c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	4a e7       	ldi	r20, 0x7A	; 122
    20d0:	53 e4       	ldi	r21, 0x43	; 67
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	8f 83       	std	Y+7, r24	; 0x07
    20dc:	98 87       	std	Y+8, r25	; 0x08
    20de:	a9 87       	std	Y+9, r26	; 0x09
    20e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e2:	6f 81       	ldd	r22, Y+7	; 0x07
    20e4:	78 85       	ldd	r23, Y+8	; 0x08
    20e6:	89 85       	ldd	r24, Y+9	; 0x09
    20e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e8       	ldi	r20, 0x80	; 128
    20f0:	5f e3       	ldi	r21, 0x3F	; 63
    20f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f6:	88 23       	and	r24, r24
    20f8:	2c f4       	brge	.+10     	; 0x2104 <LCD_displayCharacter+0x344>
		__ticks = 1;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9e 83       	std	Y+6, r25	; 0x06
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	3f c0       	rjmp	.+126    	; 0x2182 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2104:	6f 81       	ldd	r22, Y+7	; 0x07
    2106:	78 85       	ldd	r23, Y+8	; 0x08
    2108:	89 85       	ldd	r24, Y+9	; 0x09
    210a:	9a 85       	ldd	r25, Y+10	; 0x0a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	3f ef       	ldi	r19, 0xFF	; 255
    2110:	4f e7       	ldi	r20, 0x7F	; 127
    2112:	57 e4       	ldi	r21, 0x47	; 71
    2114:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2118:	18 16       	cp	r1, r24
    211a:	4c f5       	brge	.+82     	; 0x216e <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211c:	6b 85       	ldd	r22, Y+11	; 0x0b
    211e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2120:	8d 85       	ldd	r24, Y+13	; 0x0d
    2122:	9e 85       	ldd	r25, Y+14	; 0x0e
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e2       	ldi	r20, 0x20	; 32
    212a:	51 e4       	ldi	r21, 0x41	; 65
    212c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	bc 01       	movw	r22, r24
    2136:	cd 01       	movw	r24, r26
    2138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
    2144:	0f c0       	rjmp	.+30     	; 0x2164 <LCD_displayCharacter+0x3a4>
    2146:	89 e1       	ldi	r24, 0x19	; 25
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9c 83       	std	Y+4, r25	; 0x04
    214c:	8b 83       	std	Y+3, r24	; 0x03
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <LCD_displayCharacter+0x392>
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215a:	8d 81       	ldd	r24, Y+5	; 0x05
    215c:	9e 81       	ldd	r25, Y+6	; 0x06
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	69 f7       	brne	.-38     	; 0x2146 <LCD_displayCharacter+0x386>
    216c:	14 c0       	rjmp	.+40     	; 0x2196 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216e:	6f 81       	ldd	r22, Y+7	; 0x07
    2170:	78 85       	ldd	r23, Y+8	; 0x08
    2172:	89 85       	ldd	r24, Y+9	; 0x09
    2174:	9a 85       	ldd	r25, Y+10	; 0x0a
    2176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	9e 81       	ldd	r25, Y+6	; 0x06
    2186:	9a 83       	std	Y+2, r25	; 0x02
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <LCD_displayCharacter+0x3ce>
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif

}
    2196:	e9 96       	adiw	r28, 0x39	; 57
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(uint8 *str){
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <LCD_displayString+0x6>
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	9a 83       	std	Y+2, r25	; 0x02
    21b4:	89 83       	std	Y+1, r24	; 0x01
    21b6:	0a c0       	rjmp	.+20     	; 0x21cc <LCD_displayString+0x24>
	while (*str != '\0'){
		LCD_displayCharacter(*str);
    21b8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ba:	fa 81       	ldd	r31, Y+2	; 0x02
    21bc:	80 81       	ld	r24, Z
    21be:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_displayCharacter>
		str++;
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	9a 83       	std	Y+2, r25	; 0x02
    21ca:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(uint8 *str){
	while (*str != '\0'){
    21cc:	e9 81       	ldd	r30, Y+1	; 0x01
    21ce:	fa 81       	ldd	r31, Y+2	; 0x02
    21d0:	80 81       	ld	r24, Z
    21d2:	88 23       	and	r24, r24
    21d4:	89 f7       	brne	.-30     	; 0x21b8 <LCD_displayString+0x10>
		LCD_displayCharacter(*str);
		str++;
	}
}
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void){
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_DISPLAY);
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_sendCommand>
}
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row ,uint8 col){
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <LCD_moveCursor+0x6>
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <LCD_moveCursor+0x8>
    21fc:	0f 92       	push	r0
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	8a 83       	std	Y+2, r24	; 0x02
    2204:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_address;
	switch(row){
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	3d 83       	std	Y+5, r19	; 0x05
    220e:	2c 83       	std	Y+4, r18	; 0x04
    2210:	8c 81       	ldd	r24, Y+4	; 0x04
    2212:	9d 81       	ldd	r25, Y+5	; 0x05
    2214:	82 30       	cpi	r24, 0x02	; 2
    2216:	91 05       	cpc	r25, r1
    2218:	c9 f0       	breq	.+50     	; 0x224c <LCD_moveCursor+0x58>
    221a:	2c 81       	ldd	r18, Y+4	; 0x04
    221c:	3d 81       	ldd	r19, Y+5	; 0x05
    221e:	23 30       	cpi	r18, 0x03	; 3
    2220:	31 05       	cpc	r19, r1
    2222:	34 f4       	brge	.+12     	; 0x2230 <LCD_moveCursor+0x3c>
    2224:	8c 81       	ldd	r24, Y+4	; 0x04
    2226:	9d 81       	ldd	r25, Y+5	; 0x05
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	91 05       	cpc	r25, r1
    222c:	61 f0       	breq	.+24     	; 0x2246 <LCD_moveCursor+0x52>
    222e:	19 c0       	rjmp	.+50     	; 0x2262 <LCD_moveCursor+0x6e>
    2230:	2c 81       	ldd	r18, Y+4	; 0x04
    2232:	3d 81       	ldd	r19, Y+5	; 0x05
    2234:	23 30       	cpi	r18, 0x03	; 3
    2236:	31 05       	cpc	r19, r1
    2238:	69 f0       	breq	.+26     	; 0x2254 <LCD_moveCursor+0x60>
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	9d 81       	ldd	r25, Y+5	; 0x05
    223e:	84 30       	cpi	r24, 0x04	; 4
    2240:	91 05       	cpc	r25, r1
    2242:	61 f0       	breq	.+24     	; 0x225c <LCD_moveCursor+0x68>
    2244:	0e c0       	rjmp	.+28     	; 0x2262 <LCD_moveCursor+0x6e>
	case 1:
		lcd_address=col;
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	0b c0       	rjmp	.+22     	; 0x2262 <LCD_moveCursor+0x6e>
		break;
	case 2:
		lcd_address=col+0X40;
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	80 5c       	subi	r24, 0xC0	; 192
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	07 c0       	rjmp	.+14     	; 0x2262 <LCD_moveCursor+0x6e>
		break;
	case 3:
		lcd_address=col+0x10;
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	80 5f       	subi	r24, 0xF0	; 240
    2258:	89 83       	std	Y+1, r24	; 0x01
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <LCD_moveCursor+0x6e>
		break;
	case 4:
		lcd_address=col+0x50;
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	80 5b       	subi	r24, 0xB0	; 176
    2260:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_sendCommand(lcd_address |LCD_SET_CURSOR_LOCATION);
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	80 68       	ori	r24, 0x80	; 128
    2266:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_sendCommand>
}
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,uint8 *str){
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	00 d0       	rcall	.+0      	; 0x2280 <LCD_displayStringRowColumn+0x6>
    2280:	00 d0       	rcall	.+0      	; 0x2282 <LCD_displayStringRowColumn+0x8>
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	6a 83       	std	Y+2, r22	; 0x02
    228a:	5c 83       	std	Y+4, r21	; 0x04
    228c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row ,col);
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	6a 81       	ldd	r22, Y+2	; 0x02
    2292:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_moveCursor>
	LCD_displayString(str);
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	9c 81       	ldd	r25, Y+4	; 0x04
    229a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayString>
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data){
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	62 97       	sbiw	r28, 0x12	; 18
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	9a 8b       	std	Y+18, r25	; 0x12
    22c2:	89 8b       	std	Y+17, r24	; 0x11
	char num[16];
	itoa(data,num,10);
    22c4:	89 89       	ldd	r24, Y+17	; 0x11
    22c6:	9a 89       	ldd	r25, Y+18	; 0x12
    22c8:	9e 01       	movw	r18, r28
    22ca:	2f 5f       	subi	r18, 0xFF	; 255
    22cc:	3f 4f       	sbci	r19, 0xFF	; 255
    22ce:	b9 01       	movw	r22, r18
    22d0:	4a e0       	ldi	r20, 0x0A	; 10
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <itoa>
	LCD_displayString(num);
    22d8:	ce 01       	movw	r24, r28
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayString>
}
    22e0:	62 96       	adiw	r28, 0x12	; 18
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    22f2:	1f 92       	push	r1
    22f4:	0f 92       	push	r0
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	0f 92       	push	r0
    22fa:	11 24       	eor	r1, r1
    22fc:	2f 93       	push	r18
    22fe:	3f 93       	push	r19
    2300:	4f 93       	push	r20
    2302:	5f 93       	push	r21
    2304:	6f 93       	push	r22
    2306:	7f 93       	push	r23
    2308:	8f 93       	push	r24
    230a:	9f 93       	push	r25
    230c:	af 93       	push	r26
    230e:	bf 93       	push	r27
    2310:	ef 93       	push	r30
    2312:	ff 93       	push	r31
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    231c:	80 91 0f 01 	lds	r24, 0x010F
    2320:	90 91 10 01 	lds	r25, 0x0110
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	29 f0       	breq	.+10     	; 0x2332 <__vector_9+0x40>
	{
		(*g_Timer0_callBackPtr)();
    2328:	e0 91 0f 01 	lds	r30, 0x010F
    232c:	f0 91 10 01 	lds	r31, 0x0110
    2330:	09 95       	icall
		/* another method to call the function using pointer to function g_callBackPtr(); */
	}
}
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	ff 91       	pop	r31
    2338:	ef 91       	pop	r30
    233a:	bf 91       	pop	r27
    233c:	af 91       	pop	r26
    233e:	9f 91       	pop	r25
    2340:	8f 91       	pop	r24
    2342:	7f 91       	pop	r23
    2344:	6f 91       	pop	r22
    2346:	5f 91       	pop	r21
    2348:	4f 91       	pop	r20
    234a:	3f 91       	pop	r19
    234c:	2f 91       	pop	r18
    234e:	0f 90       	pop	r0
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	0f 90       	pop	r0
    2354:	1f 90       	pop	r1
    2356:	18 95       	reti

00002358 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2358:	1f 92       	push	r1
    235a:	0f 92       	push	r0
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	0f 92       	push	r0
    2360:	11 24       	eor	r1, r1
    2362:	2f 93       	push	r18
    2364:	3f 93       	push	r19
    2366:	4f 93       	push	r20
    2368:	5f 93       	push	r21
    236a:	6f 93       	push	r22
    236c:	7f 93       	push	r23
    236e:	8f 93       	push	r24
    2370:	9f 93       	push	r25
    2372:	af 93       	push	r26
    2374:	bf 93       	push	r27
    2376:	ef 93       	push	r30
    2378:	ff 93       	push	r31
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    2382:	80 91 0f 01 	lds	r24, 0x010F
    2386:	90 91 10 01 	lds	r25, 0x0110
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	29 f0       	breq	.+10     	; 0x2398 <__vector_19+0x40>
	{

		(*g_Timer0_callBackPtr)();
    238e:	e0 91 0f 01 	lds	r30, 0x010F
    2392:	f0 91 10 01 	lds	r31, 0x0110
    2396:	09 95       	icall
		/* another method to call the function using pointer to function g_callBackPtr(); */
	}
}
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	ff 91       	pop	r31
    239e:	ef 91       	pop	r30
    23a0:	bf 91       	pop	r27
    23a2:	af 91       	pop	r26
    23a4:	9f 91       	pop	r25
    23a6:	8f 91       	pop	r24
    23a8:	7f 91       	pop	r23
    23aa:	6f 91       	pop	r22
    23ac:	5f 91       	pop	r21
    23ae:	4f 91       	pop	r20
    23b0:	3f 91       	pop	r19
    23b2:	2f 91       	pop	r18
    23b4:	0f 90       	pop	r0
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	0f 90       	pop	r0
    23ba:	1f 90       	pop	r1
    23bc:	18 95       	reti

000023be <Timer0_init>:
 *******************************************************************************/

/*
 * Initialization of timer
 */
void Timer0_init(const Timer0_ConfigType* ConfigType){
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <Timer0_init+0x6>
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	9a 83       	std	Y+2, r25	; 0x02
    23ca:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = ConfigType -> initial_value ; /* Set timer initial value */
    23cc:	a2 e5       	ldi	r26, 0x52	; 82
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e9 81       	ldd	r30, Y+1	; 0x01
    23d2:	fa 81       	ldd	r31, Y+2	; 0x02
    23d4:	82 81       	ldd	r24, Z+2	; 0x02
    23d6:	8c 93       	st	X, r24
	SET_BIT(TCCR0, FOC0);  /* for normal and CTC mode,FOC0=1  */
    23d8:	a3 e5       	ldi	r26, 0x53	; 83
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e3 e5       	ldi	r30, 0x53	; 83
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	80 68       	ori	r24, 0x80	; 128
    23e4:	8c 93       	st	X, r24

	TCCR0 &= ~(1 << COM00) & ~(1 << COM01);
    23e6:	a3 e5       	ldi	r26, 0x53	; 83
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e3 e5       	ldi	r30, 0x53	; 83
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	8f 7c       	andi	r24, 0xCF	; 207
    23f2:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xF8) | (ConfigType -> clock) ;
    23f4:	a3 e5       	ldi	r26, 0x53	; 83
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e3 e5       	ldi	r30, 0x53	; 83
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	98 2f       	mov	r25, r24
    2400:	98 7f       	andi	r25, 0xF8	; 248
    2402:	e9 81       	ldd	r30, Y+1	; 0x01
    2404:	fa 81       	ldd	r31, Y+2	; 0x02
    2406:	81 81       	ldd	r24, Z+1	; 0x01
    2408:	89 2b       	or	r24, r25
    240a:	8c 93       	st	X, r24

	if(ConfigType -> mode == Timer0_normal){
    240c:	e9 81       	ldd	r30, Y+1	; 0x01
    240e:	fa 81       	ldd	r31, Y+2	; 0x02
    2410:	80 81       	ld	r24, Z
    2412:	88 23       	and	r24, r24
    2414:	79 f4       	brne	.+30     	; 0x2434 <Timer0_init+0x76>
		TIMSK = (TIMSK & 0xFE) | (1 << TOIE0); /* Enable Timer0 Overflow Interrupt */
    2416:	a9 e5       	ldi	r26, 0x59	; 89
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e9 e5       	ldi	r30, 0x59	; 89
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	81 60       	ori	r24, 0x01	; 1
    2422:	8c 93       	st	X, r24
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock -> CS00 CS01 CS02
		 */

		TCCR0 &= ~(1 << WGM01) & ~(1 << WGM00) ;
    2424:	a3 e5       	ldi	r26, 0x53	; 83
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e3 e5       	ldi	r30, 0x53	; 83
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	87 7b       	andi	r24, 0xB7	; 183
    2430:	8c 93       	st	X, r24
    2432:	20 c0       	rjmp	.+64     	; 0x2474 <Timer0_init+0xb6>

	}
	else if(ConfigType -> mode == Timer0_CTC){
    2434:	e9 81       	ldd	r30, Y+1	; 0x01
    2436:	fa 81       	ldd	r31, Y+2	; 0x02
    2438:	80 81       	ld	r24, Z
    243a:	81 30       	cpi	r24, 0x01	; 1
    243c:	d9 f4       	brne	.+54     	; 0x2474 <Timer0_init+0xb6>

		OCR0  = ConfigType -> compare_value; // Set Compare Value
    243e:	ac e5       	ldi	r26, 0x5C	; 92
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e9 81       	ldd	r30, Y+1	; 0x01
    2444:	fa 81       	ldd	r31, Y+2	; 0x02
    2446:	83 81       	ldd	r24, Z+3	; 0x03
    2448:	8c 93       	st	X, r24
		TIMSK = (TIMSK & 0xFD) |(1 << OCIE0); // Enable Timer0 Compare Interrupt
    244a:	a9 e5       	ldi	r26, 0x59	; 89
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e9 e5       	ldi	r30, 0x59	; 89
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	82 60       	ori	r24, 0x02	; 2
    2456:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. No need for OC0  so COM00=0 & COM01=0
		 * 4. clock -> CS00 CS01 CS02
		 */
		CLEAR_BIT(TCCR0, WGM00);
    2458:	a3 e5       	ldi	r26, 0x53	; 83
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e3 e5       	ldi	r30, 0x53	; 83
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	8f 7b       	andi	r24, 0xBF	; 191
    2464:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    2466:	a3 e5       	ldi	r26, 0x53	; 83
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e3 e5       	ldi	r30, 0x53	; 83
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	88 60       	ori	r24, 0x08	; 8
    2472:	8c 93       	st	X, r24
	}

}
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	08 95       	ret

0000247e <Timer0_SetCallBack>:

/*
 * Set callback function used by timer 0
 */
void Timer0_SetCallBack( void(*ptr2func)(void) ){
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	00 d0       	rcall	.+0      	; 0x2484 <Timer0_SetCallBack+0x6>
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	9a 83       	std	Y+2, r25	; 0x02
    248a:	89 83       	std	Y+1, r24	; 0x01
	g_Timer0_callBackPtr = ptr2func;
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	9a 81       	ldd	r25, Y+2	; 0x02
    2490:	90 93 10 01 	sts	0x0110, r25
    2494:	80 93 0f 01 	sts	0x010F, r24
}
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <Timer0_Deinit>:

/*
 * De-initialization of timer 0
 */
void Timer0_Deinit(){
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0; //stop clock
    24aa:	e3 e5       	ldi	r30, 0x53	; 83
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0); /* disable timer0 interrupts for CTC mode */
    24b0:	a9 e5       	ldi	r26, 0x59	; 89
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e9 e5       	ldi	r30, 0x59	; 89
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	8d 7f       	andi	r24, 0xFD	; 253
    24bc:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0); /* disable timer0 interrupts for overflow mode */
    24be:	a9 e5       	ldi	r26, 0x59	; 89
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e9 e5       	ldi	r30, 0x59	; 89
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	8e 7f       	andi	r24, 0xFE	; 254
    24ca:	8c 93       	st	X, r24
}
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <UART_init+0x6>
    24d8:	00 d0       	rcall	.+0      	; 0x24da <UART_init+0x8>
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	9c 83       	std	Y+4, r25	; 0x04
    24e0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    24e2:	1a 82       	std	Y+2, r1	; 0x02
    24e4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    24e6:	eb e2       	ldi	r30, 0x2B	; 43
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	82 e0       	ldi	r24, 0x02	; 2
    24ec:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = ?? Number of Data Bits --> Depend on the Configuration
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    24ee:	ea e2       	ldi	r30, 0x2A	; 42
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	88 e1       	ldi	r24, 0x18	; 24
    24f4:	80 83       	st	Z, r24
	 * UPM1:0  = ?? Parity bit 			--> Depend on the Configuration
	 * USBS    = ?? Stop bit   			--> Depend on the Configuration
	 * UCSZ1:0 = ?? Number of Data Bits --> Depend on the Configuration
	 * UCPOL   = 0 	Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0);
    24f6:	e0 e4       	ldi	r30, 0x40	; 64
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	82 e8       	ldi	r24, 0x82	; 130
    24fc:	80 83       	st	Z, r24
	/*
	 * Insert Required Parity Mode
	 * in (UCSRC) Register
	 * in the bits ( UPM0, UPM1 )
	 */
	UCSRC = (UCSRC & 0xCF) | ( ( Config_Ptr->parity_bit_type ) << 4 );
    24fe:	a0 e4       	ldi	r26, 0x40	; 64
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e0 e4       	ldi	r30, 0x40	; 64
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	28 2f       	mov	r18, r24
    250a:	2f 7c       	andi	r18, 0xCF	; 207
    250c:	eb 81       	ldd	r30, Y+3	; 0x03
    250e:	fc 81       	ldd	r31, Y+4	; 0x04
    2510:	86 81       	ldd	r24, Z+6	; 0x06
    2512:	88 2f       	mov	r24, r24
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	82 95       	swap	r24
    2518:	92 95       	swap	r25
    251a:	90 7f       	andi	r25, 0xF0	; 240
    251c:	98 27       	eor	r25, r24
    251e:	80 7f       	andi	r24, 0xF0	; 240
    2520:	98 27       	eor	r25, r24
    2522:	82 2b       	or	r24, r18
    2524:	8c 93       	st	X, r24
	/*
	 * Insert Required Stop Bits
	 * in (UCSRC) Register
	 * in the bit ( USBS )
	 */
	UCSRC = (UCSRC & 0xF7)  | ( ( Config_Ptr->number_of_stop_bits ) << 3 );
    2526:	a0 e4       	ldi	r26, 0x40	; 64
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	e0 e4       	ldi	r30, 0x40	; 64
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	28 2f       	mov	r18, r24
    2532:	27 7f       	andi	r18, 0xF7	; 247
    2534:	eb 81       	ldd	r30, Y+3	; 0x03
    2536:	fc 81       	ldd	r31, Y+4	; 0x04
    2538:	85 81       	ldd	r24, Z+5	; 0x05
    253a:	88 2f       	mov	r24, r24
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	88 0f       	add	r24, r24
    2548:	99 1f       	adc	r25, r25
    254a:	82 2b       	or	r24, r18
    254c:	8c 93       	st	X, r24
	 * Insert Required Number Data Bits
	 * in (UCSRC) Register
	 * General : in the bits ( UCSZ0, UCSZ1 )
	 * In 9-bit case : in the bit ( UCSZ2 )
	 */
	if (Config_Ptr->number_of_bits == 9)
    254e:	eb 81       	ldd	r30, Y+3	; 0x03
    2550:	fc 81       	ldd	r31, Y+4	; 0x04
    2552:	84 81       	ldd	r24, Z+4	; 0x04
    2554:	89 30       	cpi	r24, 0x09	; 9
    2556:	79 f4       	brne	.+30     	; 0x2576 <UART_init+0xa4>
	{
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    2558:	a0 e4       	ldi	r26, 0x40	; 64
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e0 e4       	ldi	r30, 0x40	; 64
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	86 60       	ori	r24, 0x06	; 6
    2564:	8c 93       	st	X, r24
		UCSRB |= (1<<UCSZ2);
    2566:	aa e2       	ldi	r26, 0x2A	; 42
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	ea e2       	ldi	r30, 0x2A	; 42
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	84 60       	ori	r24, 0x04	; 4
    2572:	8c 93       	st	X, r24
    2574:	0f c0       	rjmp	.+30     	; 0x2594 <UART_init+0xc2>
	}
	else
	{
		UCSRC |= ( ( Config_Ptr->number_of_bits ) << 1 );
    2576:	a0 e4       	ldi	r26, 0x40	; 64
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e0 e4       	ldi	r30, 0x40	; 64
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	28 2f       	mov	r18, r24
    2582:	eb 81       	ldd	r30, Y+3	; 0x03
    2584:	fc 81       	ldd	r31, Y+4	; 0x04
    2586:	84 81       	ldd	r24, Z+4	; 0x04
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	82 2b       	or	r24, r18
    2592:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2594:	eb 81       	ldd	r30, Y+3	; 0x03
    2596:	fc 81       	ldd	r31, Y+4	; 0x04
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	a2 81       	ldd	r26, Z+2	; 0x02
    259e:	b3 81       	ldd	r27, Z+3	; 0x03
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	aa 1f       	adc	r26, r26
    25a6:	bb 1f       	adc	r27, r27
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	aa 1f       	adc	r26, r26
    25ae:	bb 1f       	adc	r27, r27
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	aa 1f       	adc	r26, r26
    25b6:	bb 1f       	adc	r27, r27
    25b8:	9c 01       	movw	r18, r24
    25ba:	ad 01       	movw	r20, r26
    25bc:	80 e4       	ldi	r24, 0x40	; 64
    25be:	92 e4       	ldi	r25, 0x42	; 66
    25c0:	af e0       	ldi	r26, 0x0F	; 15
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	bc 01       	movw	r22, r24
    25c6:	cd 01       	movw	r24, r26
    25c8:	0e 94 8f 13 	call	0x271e	; 0x271e <__udivmodsi4>
    25cc:	da 01       	movw	r26, r20
    25ce:	c9 01       	movw	r24, r18
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    25d6:	e0 e4       	ldi	r30, 0x40	; 64
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	89 2f       	mov	r24, r25
    25e0:	99 27       	eor	r25, r25
    25e2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    25e4:	e9 e2       	ldi	r30, 0x29	; 41
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	80 83       	st	Z, r24
}
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	0f 92       	push	r0
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA, UDRE)){}
    2606:	eb e2       	ldi	r30, 0x2B	; 43
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	80 72       	andi	r24, 0x20	; 32
    2612:	90 70       	andi	r25, 0x00	; 0
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	b9 f3       	breq	.-18     	; 0x2606 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2618:	ec e2       	ldi	r30, 0x2C	; 44
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2620:	0f 90       	pop	r0
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA, RXC)){}
    2630:	eb e2       	ldi	r30, 0x2B	; 43
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	88 23       	and	r24, r24
    2638:	dc f7       	brge	.-10     	; 0x2630 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    263a:	ec e2       	ldi	r30, 0x2C	; 44
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
}
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	00 d0       	rcall	.+0      	; 0x264c <UART_sendString+0x6>
    264c:	0f 92       	push	r0
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	9b 83       	std	Y+3, r25	; 0x03
    2654:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2656:	19 82       	std	Y+1, r1	; 0x01
    2658:	0e c0       	rjmp	.+28     	; 0x2676 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	9b 81       	ldd	r25, Y+3	; 0x03
    2664:	fc 01       	movw	r30, r24
    2666:	e2 0f       	add	r30, r18
    2668:	f3 1f       	adc	r31, r19
    266a:	80 81       	ld	r24, Z
    266c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <UART_sendByte>
		i++;
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	8f 5f       	subi	r24, 0xFF	; 255
    2674:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	9b 81       	ldd	r25, Y+3	; 0x03
    2680:	fc 01       	movw	r30, r24
    2682:	e2 0f       	add	r30, r18
    2684:	f3 1f       	adc	r31, r19
    2686:	80 81       	ld	r24, Z
    2688:	88 23       	and	r24, r24
    268a:	39 f7       	brne	.-50     	; 0x265a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	cf 91       	pop	r28
    2694:	df 91       	pop	r29
    2696:	08 95       	ret

00002698 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2698:	0f 93       	push	r16
    269a:	1f 93       	push	r17
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <UART_receiveString+0xa>
    26a2:	0f 92       	push	r0
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	9b 83       	std	Y+3, r25	; 0x03
    26aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26ac:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	28 2f       	mov	r18, r24
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	9b 81       	ldd	r25, Y+3	; 0x03
    26b8:	8c 01       	movw	r16, r24
    26ba:	02 0f       	add	r16, r18
    26bc:	13 1f       	adc	r17, r19
    26be:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_recieveByte>
    26c2:	f8 01       	movw	r30, r16
    26c4:	80 83       	st	Z, r24
    26c6:	0f c0       	rjmp	.+30     	; 0x26e6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	8f 5f       	subi	r24, 0xFF	; 255
    26cc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	28 2f       	mov	r18, r24
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	8a 81       	ldd	r24, Y+2	; 0x02
    26d6:	9b 81       	ldd	r25, Y+3	; 0x03
    26d8:	8c 01       	movw	r16, r24
    26da:	02 0f       	add	r16, r18
    26dc:	13 1f       	adc	r17, r19
    26de:	0e 94 14 13 	call	0x2628	; 0x2628 <UART_recieveByte>
    26e2:	f8 01       	movw	r30, r16
    26e4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	9b 81       	ldd	r25, Y+3	; 0x03
    26f0:	fc 01       	movw	r30, r24
    26f2:	e2 0f       	add	r30, r18
    26f4:	f3 1f       	adc	r31, r19
    26f6:	80 81       	ld	r24, Z
    26f8:	83 32       	cpi	r24, 0x23	; 35
    26fa:	31 f7       	brne	.-52     	; 0x26c8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	28 2f       	mov	r18, r24
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
    2704:	9b 81       	ldd	r25, Y+3	; 0x03
    2706:	fc 01       	movw	r30, r24
    2708:	e2 0f       	add	r30, r18
    270a:	f3 1f       	adc	r31, r19
    270c:	10 82       	st	Z, r1
}
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	1f 91       	pop	r17
    271a:	0f 91       	pop	r16
    271c:	08 95       	ret

0000271e <__udivmodsi4>:
    271e:	a1 e2       	ldi	r26, 0x21	; 33
    2720:	1a 2e       	mov	r1, r26
    2722:	aa 1b       	sub	r26, r26
    2724:	bb 1b       	sub	r27, r27
    2726:	fd 01       	movw	r30, r26
    2728:	0d c0       	rjmp	.+26     	; 0x2744 <__udivmodsi4_ep>

0000272a <__udivmodsi4_loop>:
    272a:	aa 1f       	adc	r26, r26
    272c:	bb 1f       	adc	r27, r27
    272e:	ee 1f       	adc	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	a2 17       	cp	r26, r18
    2734:	b3 07       	cpc	r27, r19
    2736:	e4 07       	cpc	r30, r20
    2738:	f5 07       	cpc	r31, r21
    273a:	20 f0       	brcs	.+8      	; 0x2744 <__udivmodsi4_ep>
    273c:	a2 1b       	sub	r26, r18
    273e:	b3 0b       	sbc	r27, r19
    2740:	e4 0b       	sbc	r30, r20
    2742:	f5 0b       	sbc	r31, r21

00002744 <__udivmodsi4_ep>:
    2744:	66 1f       	adc	r22, r22
    2746:	77 1f       	adc	r23, r23
    2748:	88 1f       	adc	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	1a 94       	dec	r1
    274e:	69 f7       	brne	.-38     	; 0x272a <__udivmodsi4_loop>
    2750:	60 95       	com	r22
    2752:	70 95       	com	r23
    2754:	80 95       	com	r24
    2756:	90 95       	com	r25
    2758:	9b 01       	movw	r18, r22
    275a:	ac 01       	movw	r20, r24
    275c:	bd 01       	movw	r22, r26
    275e:	cf 01       	movw	r24, r30
    2760:	08 95       	ret

00002762 <__prologue_saves__>:
    2762:	2f 92       	push	r2
    2764:	3f 92       	push	r3
    2766:	4f 92       	push	r4
    2768:	5f 92       	push	r5
    276a:	6f 92       	push	r6
    276c:	7f 92       	push	r7
    276e:	8f 92       	push	r8
    2770:	9f 92       	push	r9
    2772:	af 92       	push	r10
    2774:	bf 92       	push	r11
    2776:	cf 92       	push	r12
    2778:	df 92       	push	r13
    277a:	ef 92       	push	r14
    277c:	ff 92       	push	r15
    277e:	0f 93       	push	r16
    2780:	1f 93       	push	r17
    2782:	cf 93       	push	r28
    2784:	df 93       	push	r29
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	ca 1b       	sub	r28, r26
    278c:	db 0b       	sbc	r29, r27
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	09 94       	ijmp

0000279a <__epilogue_restores__>:
    279a:	2a 88       	ldd	r2, Y+18	; 0x12
    279c:	39 88       	ldd	r3, Y+17	; 0x11
    279e:	48 88       	ldd	r4, Y+16	; 0x10
    27a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    27a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    27a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    27a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    27a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    27aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    27ac:	b9 84       	ldd	r11, Y+9	; 0x09
    27ae:	c8 84       	ldd	r12, Y+8	; 0x08
    27b0:	df 80       	ldd	r13, Y+7	; 0x07
    27b2:	ee 80       	ldd	r14, Y+6	; 0x06
    27b4:	fd 80       	ldd	r15, Y+5	; 0x05
    27b6:	0c 81       	ldd	r16, Y+4	; 0x04
    27b8:	1b 81       	ldd	r17, Y+3	; 0x03
    27ba:	aa 81       	ldd	r26, Y+2	; 0x02
    27bc:	b9 81       	ldd	r27, Y+1	; 0x01
    27be:	ce 0f       	add	r28, r30
    27c0:	d1 1d       	adc	r29, r1
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	ed 01       	movw	r28, r26
    27ce:	08 95       	ret

000027d0 <itoa>:
    27d0:	fb 01       	movw	r30, r22
    27d2:	9f 01       	movw	r18, r30
    27d4:	e8 94       	clt
    27d6:	42 30       	cpi	r20, 0x02	; 2
    27d8:	c4 f0       	brlt	.+48     	; 0x280a <itoa+0x3a>
    27da:	45 32       	cpi	r20, 0x25	; 37
    27dc:	b4 f4       	brge	.+44     	; 0x280a <itoa+0x3a>
    27de:	4a 30       	cpi	r20, 0x0A	; 10
    27e0:	29 f4       	brne	.+10     	; 0x27ec <itoa+0x1c>
    27e2:	97 fb       	bst	r25, 7
    27e4:	1e f4       	brtc	.+6      	; 0x27ec <itoa+0x1c>
    27e6:	90 95       	com	r25
    27e8:	81 95       	neg	r24
    27ea:	9f 4f       	sbci	r25, 0xFF	; 255
    27ec:	64 2f       	mov	r22, r20
    27ee:	77 27       	eor	r23, r23
    27f0:	0e 94 19 14 	call	0x2832	; 0x2832 <__udivmodhi4>
    27f4:	80 5d       	subi	r24, 0xD0	; 208
    27f6:	8a 33       	cpi	r24, 0x3A	; 58
    27f8:	0c f0       	brlt	.+2      	; 0x27fc <itoa+0x2c>
    27fa:	89 5d       	subi	r24, 0xD9	; 217
    27fc:	81 93       	st	Z+, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	a1 f7       	brne	.-24     	; 0x27ec <itoa+0x1c>
    2804:	16 f4       	brtc	.+4      	; 0x280a <itoa+0x3a>
    2806:	5d e2       	ldi	r21, 0x2D	; 45
    2808:	51 93       	st	Z+, r21
    280a:	10 82       	st	Z, r1
    280c:	c9 01       	movw	r24, r18
    280e:	0c 94 09 14 	jmp	0x2812	; 0x2812 <strrev>

00002812 <strrev>:
    2812:	dc 01       	movw	r26, r24
    2814:	fc 01       	movw	r30, r24
    2816:	67 2f       	mov	r22, r23
    2818:	71 91       	ld	r23, Z+
    281a:	77 23       	and	r23, r23
    281c:	e1 f7       	brne	.-8      	; 0x2816 <strrev+0x4>
    281e:	32 97       	sbiw	r30, 0x02	; 2
    2820:	04 c0       	rjmp	.+8      	; 0x282a <strrev+0x18>
    2822:	7c 91       	ld	r23, X
    2824:	6d 93       	st	X+, r22
    2826:	70 83       	st	Z, r23
    2828:	62 91       	ld	r22, -Z
    282a:	ae 17       	cp	r26, r30
    282c:	bf 07       	cpc	r27, r31
    282e:	c8 f3       	brcs	.-14     	; 0x2822 <strrev+0x10>
    2830:	08 95       	ret

00002832 <__udivmodhi4>:
    2832:	aa 1b       	sub	r26, r26
    2834:	bb 1b       	sub	r27, r27
    2836:	51 e1       	ldi	r21, 0x11	; 17
    2838:	07 c0       	rjmp	.+14     	; 0x2848 <__udivmodhi4_ep>

0000283a <__udivmodhi4_loop>:
    283a:	aa 1f       	adc	r26, r26
    283c:	bb 1f       	adc	r27, r27
    283e:	a6 17       	cp	r26, r22
    2840:	b7 07       	cpc	r27, r23
    2842:	10 f0       	brcs	.+4      	; 0x2848 <__udivmodhi4_ep>
    2844:	a6 1b       	sub	r26, r22
    2846:	b7 0b       	sbc	r27, r23

00002848 <__udivmodhi4_ep>:
    2848:	88 1f       	adc	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	5a 95       	dec	r21
    284e:	a9 f7       	brne	.-22     	; 0x283a <__udivmodhi4_loop>
    2850:	80 95       	com	r24
    2852:	90 95       	com	r25
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	08 95       	ret

0000285a <_exit>:
    285a:	f8 94       	cli

0000285c <__stop_program>:
    285c:	ff cf       	rjmp	.-2      	; 0x285c <__stop_program>
