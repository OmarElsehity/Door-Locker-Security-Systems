
MC_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000021b0  00002244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800076  00800076  0000225a  2**0
                  ALLOC
  3 .stab         0000243c  00000000  00000000  0000225c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014d5  00000000  00000000  00004698  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008951  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009700  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009860  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a2bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 af 10 	jmp	0x215e	; 0x215e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	67 97       	sbiw	r28, 0x17	; 23
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/* Variable to store the pressed key */
	uint8 key_option;

	SREG  |= ( 1 << 7 ); /* Enable Global Interrupts */
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	/* Initialize the UART with Configuration */
	UART_ConfigType UART_Config = {9600, EIGHT_BITS, ONE_STOP_BIT, DISABLED};
     b68:	9e 01       	movw	r18, r28
     b6a:	2e 5f       	subi	r18, 0xFE	; 254
     b6c:	3f 4f       	sbci	r19, 0xFF	; 255
     b6e:	3f 87       	std	Y+15, r19	; 0x0f
     b70:	2e 87       	std	Y+14, r18	; 0x0e
     b72:	8e e6       	ldi	r24, 0x6E	; 110
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	99 8b       	std	Y+17, r25	; 0x11
     b78:	88 8b       	std	Y+16, r24	; 0x10
     b7a:	97 e0       	ldi	r25, 0x07	; 7
     b7c:	9a 8b       	std	Y+18, r25	; 0x12
     b7e:	e8 89       	ldd	r30, Y+16	; 0x10
     b80:	f9 89       	ldd	r31, Y+17	; 0x11
     b82:	00 80       	ld	r0, Z
     b84:	28 89       	ldd	r18, Y+16	; 0x10
     b86:	39 89       	ldd	r19, Y+17	; 0x11
     b88:	2f 5f       	subi	r18, 0xFF	; 255
     b8a:	3f 4f       	sbci	r19, 0xFF	; 255
     b8c:	39 8b       	std	Y+17, r19	; 0x11
     b8e:	28 8b       	std	Y+16, r18	; 0x10
     b90:	ee 85       	ldd	r30, Y+14	; 0x0e
     b92:	ff 85       	ldd	r31, Y+15	; 0x0f
     b94:	00 82       	st	Z, r0
     b96:	2e 85       	ldd	r18, Y+14	; 0x0e
     b98:	3f 85       	ldd	r19, Y+15	; 0x0f
     b9a:	2f 5f       	subi	r18, 0xFF	; 255
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	3f 87       	std	Y+15, r19	; 0x0f
     ba0:	2e 87       	std	Y+14, r18	; 0x0e
     ba2:	3a 89       	ldd	r19, Y+18	; 0x12
     ba4:	31 50       	subi	r19, 0x01	; 1
     ba6:	3a 8b       	std	Y+18, r19	; 0x12
     ba8:	8a 89       	ldd	r24, Y+18	; 0x12
     baa:	88 23       	and	r24, r24
     bac:	41 f7       	brne	.-48     	; 0xb7e <main+0x38>
	UART_init(&UART_Config);
     bae:	ce 01       	movw	r24, r28
     bb0:	02 96       	adiw	r24, 0x02	; 2
     bb2:	0e 94 57 0f 	call	0x1eae	; 0x1eae <UART_init>

	/* Initialize I2C with Configuration */
	TWI_ConfigType TWI_Config = {400000, TWI_Prescaler_1, TWI_ADDRESS};
     bb6:	fe 01       	movw	r30, r28
     bb8:	39 96       	adiw	r30, 0x09	; 9
     bba:	fc 8b       	std	Y+20, r31	; 0x14
     bbc:	eb 8b       	std	Y+19, r30	; 0x13
     bbe:	2b e6       	ldi	r18, 0x6B	; 107
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	3e 8b       	std	Y+22, r19	; 0x16
     bc4:	2d 8b       	std	Y+21, r18	; 0x15
     bc6:	33 e0       	ldi	r19, 0x03	; 3
     bc8:	3f 8b       	std	Y+23, r19	; 0x17
     bca:	ed 89       	ldd	r30, Y+21	; 0x15
     bcc:	fe 89       	ldd	r31, Y+22	; 0x16
     bce:	00 80       	ld	r0, Z
     bd0:	2d 89       	ldd	r18, Y+21	; 0x15
     bd2:	3e 89       	ldd	r19, Y+22	; 0x16
     bd4:	2f 5f       	subi	r18, 0xFF	; 255
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	3e 8b       	std	Y+22, r19	; 0x16
     bda:	2d 8b       	std	Y+21, r18	; 0x15
     bdc:	eb 89       	ldd	r30, Y+19	; 0x13
     bde:	fc 89       	ldd	r31, Y+20	; 0x14
     be0:	00 82       	st	Z, r0
     be2:	2b 89       	ldd	r18, Y+19	; 0x13
     be4:	3c 89       	ldd	r19, Y+20	; 0x14
     be6:	2f 5f       	subi	r18, 0xFF	; 255
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	3c 8b       	std	Y+20, r19	; 0x14
     bec:	2b 8b       	std	Y+19, r18	; 0x13
     bee:	3f 89       	ldd	r19, Y+23	; 0x17
     bf0:	31 50       	subi	r19, 0x01	; 1
     bf2:	3f 8b       	std	Y+23, r19	; 0x17
     bf4:	8f 89       	ldd	r24, Y+23	; 0x17
     bf6:	88 23       	and	r24, r24
     bf8:	41 f7       	brne	.-48     	; 0xbca <main+0x84>
	TWI_init(&TWI_Config);
     bfa:	ce 01       	movw	r24, r28
     bfc:	09 96       	adiw	r24, 0x09	; 9
     bfe:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_init>

	/* Initialize DC Motor */
	DcMotor_Init();
     c02:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <DcMotor_Init>

	/* Initialize Buzzer */
	BUZZER_init();
     c06:	0e 94 4f 09 	call	0x129e	; 0x129e <BUZZER_init>

	/* Save the Password for the first time */
	MC2_newPassword();
     c0a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <MC2_newPassword>

	while(1)
	{
		/* Wait until the MC1 send the inputed password */
		while(MC2_receiveCommand() != SEND_CHECK_PASSWORD);
     c0e:	0e 94 38 09 	call	0x1270	; 0x1270 <MC2_receiveCommand>
     c12:	88 3f       	cpi	r24, 0xF8	; 248
     c14:	e1 f7       	brne	.-8      	; 0xc0e <main+0xc8>
		/* Receive the inputed password and store it */
		MC2_receivePassword(g_receivedPassword);
     c16:	80 e8       	ldi	r24, 0x80	; 128
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <MC2_receivePassword>
		/* Receive the command from the MC1 */
		key_option = MC2_receiveCommand();
     c1e:	0e 94 38 09 	call	0x1270	; 0x1270 <MC2_receiveCommand>
     c22:	89 83       	std	Y+1, r24	; 0x01

		switch (key_option)
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	e8 2f       	mov	r30, r24
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	fd 87       	std	Y+13, r31	; 0x0d
     c2c:	ec 87       	std	Y+12, r30	; 0x0c
     c2e:	2c 85       	ldd	r18, Y+12	; 0x0c
     c30:	3d 85       	ldd	r19, Y+13	; 0x0d
     c32:	2b 32       	cpi	r18, 0x2B	; 43
     c34:	31 05       	cpc	r19, r1
     c36:	31 f0       	breq	.+12     	; 0xc44 <main+0xfe>
     c38:	8c 85       	ldd	r24, Y+12	; 0x0c
     c3a:	9d 85       	ldd	r25, Y+13	; 0x0d
     c3c:	8d 32       	cpi	r24, 0x2D	; 45
     c3e:	91 05       	cpc	r25, r1
     c40:	11 f1       	breq	.+68     	; 0xc86 <main+0x140>
     c42:	e5 cf       	rjmp	.-54     	; 0xc0e <main+0xc8>
		{
		case OPEN_DOOR:

			/* Read Password from the EEPROM */
			MC2_readPassword(g_storedPassword);
     c44:	85 e8       	ldi	r24, 0x85	; 133
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 3f 08 	call	0x107e	; 0x107e <MC2_readPassword>
			/* Compare it with the given from user */
			g_matchStatus = MC2_comparePasswords(g_receivedPassword, g_storedPassword);
     c4c:	80 e8       	ldi	r24, 0x80	; 128
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	25 e8       	ldi	r18, 0x85	; 133
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	b9 01       	movw	r22, r18
     c56:	0e 94 67 07 	call	0xece	; 0xece <MC2_comparePasswords>
     c5a:	80 93 76 00 	sts	0x0076, r24

			/* In case the two passwords matches */
			if(g_matchStatus == PASS_MATCHED)
     c5e:	80 91 76 00 	lds	r24, 0x0076
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	31 f4       	brne	.+12     	; 0xc72 <main+0x12c>
			{
				/* Send Opening Door command to MC1 */
				MC2_sendCommand(OPENING_DOOR);
     c66:	80 ef       	ldi	r24, 0xF0	; 240
     c68:	0e 94 20 09 	call	0x1240	; 0x1240 <MC2_sendCommand>
				MC2_openingDoor();
     c6c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <MC2_openingDoor>
     c70:	ce cf       	rjmp	.-100    	; 0xc0e <main+0xc8>
			}
			/* In case the two passwords did not match */
			else if(g_matchStatus == PASS_MIS_MATCHED)
     c72:	80 91 76 00 	lds	r24, 0x0076
     c76:	88 23       	and	r24, r24
     c78:	51 f6       	brne	.-108    	; 0xc0e <main+0xc8>
			{
				/* Send Wrong Password command to MC1 */
				MC2_sendCommand(WRONG_PASSWORD);
     c7a:	81 ef       	ldi	r24, 0xF1	; 241
     c7c:	0e 94 20 09 	call	0x1240	; 0x1240 <MC2_sendCommand>
				MC2_wrongPassword();
     c80:	0e 94 00 09 	call	0x1200	; 0x1200 <MC2_wrongPassword>
     c84:	c4 cf       	rjmp	.-120    	; 0xc0e <main+0xc8>
			break;

		case CHANGE_PASSWORD:

			/* Read Password from the EEPROM */
			MC2_readPassword(g_storedPassword);
     c86:	85 e8       	ldi	r24, 0x85	; 133
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 3f 08 	call	0x107e	; 0x107e <MC2_readPassword>
			/* Compare it with the inputed user */
			g_matchStatus = MC2_comparePasswords(g_receivedPassword, g_storedPassword);
     c8e:	80 e8       	ldi	r24, 0x80	; 128
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	25 e8       	ldi	r18, 0x85	; 133
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	b9 01       	movw	r22, r18
     c98:	0e 94 67 07 	call	0xece	; 0xece <MC2_comparePasswords>
     c9c:	80 93 76 00 	sts	0x0076, r24

			/* In case the two passwords matches */
			if(g_matchStatus == PASS_MATCHED)
     ca0:	80 91 76 00 	lds	r24, 0x0076
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	31 f4       	brne	.+12     	; 0xcb4 <main+0x16e>
			{
				/* Send Changing Password command to MC1 */
				MC2_sendCommand(CHANGING_PASSWORD);
     ca8:	82 ef       	ldi	r24, 0xF2	; 242
     caa:	0e 94 20 09 	call	0x1240	; 0x1240 <MC2_sendCommand>
				MC2_newPassword();
     cae:	0e 94 8d 06 	call	0xd1a	; 0xd1a <MC2_newPassword>
     cb2:	ad cf       	rjmp	.-166    	; 0xc0e <main+0xc8>
			}
			/* In case the two passwords did not match */
			else if(g_matchStatus == PASS_MIS_MATCHED)
     cb4:	80 91 76 00 	lds	r24, 0x0076
     cb8:	88 23       	and	r24, r24
     cba:	09 f0       	breq	.+2      	; 0xcbe <main+0x178>
     cbc:	a8 cf       	rjmp	.-176    	; 0xc0e <main+0xc8>
			{
				/* Send Wrong Password command to MC1 */
				MC2_sendCommand(WRONG_PASSWORD);
     cbe:	81 ef       	ldi	r24, 0xF1	; 241
     cc0:	0e 94 20 09 	call	0x1240	; 0x1240 <MC2_sendCommand>
				MC2_wrongPassword();
     cc4:	0e 94 00 09 	call	0x1200	; 0x1200 <MC2_wrongPassword>
     cc8:	a2 cf       	rjmp	.-188    	; 0xc0e <main+0xc8>

00000cca <MC2_TimerCallBackProcessing>:
/*
 * Description:
 * Function to set the call back function for the Interrupt to be executed
 */
void MC2_TimerCallBackProcessing(void)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
	g_tick++; /* Increment the counter */
     cd2:	80 91 77 00 	lds	r24, 0x0077
     cd6:	8f 5f       	subi	r24, 0xFF	; 255
     cd8:	80 93 77 00 	sts	0x0077, r24
}
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <MC2_startTimer>:
/*
 * Description:
 * Function to initialize Timer
 */
void MC2_startTimer(void)
{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <MC2_startTimer+0x6>
     ce8:	00 d0       	rcall	.+0      	; 0xcea <MC2_startTimer+0x8>
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	/* Setup Timer Configuration */
	Timer0_ConfigType TIMER_Config = {Timer0_CTC, Timer0_1024_Prescaler, 0, 7813 };
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	85 e0       	ldi	r24, 0x05	; 5
     cf4:	8a 83       	std	Y+2, r24	; 0x02
     cf6:	1b 82       	std	Y+3, r1	; 0x03
     cf8:	85 e8       	ldi	r24, 0x85	; 133
     cfa:	8c 83       	std	Y+4, r24	; 0x04

	/* Initialize the Timer */
	Timer0_init(&TIMER_Config);
     cfc:	ce 01       	movw	r24, r28
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <Timer0_init>

	/* Set Call Back function for the timer */
	Timer0_SetCallBack(MC2_TimerCallBackProcessing);
     d04:	85 e6       	ldi	r24, 0x65	; 101
     d06:	96 e0       	ldi	r25, 0x06	; 6
     d08:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Timer0_SetCallBack>
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <MC2_newPassword>:
/*
 * Description:
 * Function to set a new Password
 */
void MC2_newPassword(void)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	g_matchStatus = PASS_MIS_MATCHED;
     d22:	10 92 76 00 	sts	0x0076, r1
     d26:	2c c0       	rjmp	.+88     	; 0xd80 <MC2_newPassword+0x66>

	/* Loop until the MC1 get the same password */
	while(g_matchStatus == PASS_MIS_MATCHED)
	{
		/* Wait until the MC1 send command for first password */
		while (MC2_receiveCommand() != SEND_FIRST_PASSWORD );
     d28:	0e 94 38 09 	call	0x1270	; 0x1270 <MC2_receiveCommand>
     d2c:	86 3f       	cpi	r24, 0xF6	; 246
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <MC2_newPassword+0xe>
		/* Receive the first password from MC1 */
		MC2_receivePassword(g_receivedPassword);
     d30:	80 e8       	ldi	r24, 0x80	; 128
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 c7 06 	call	0xd8e	; 0xd8e <MC2_receivePassword>

		/* Wait until the MC1 send command for second password */
		while (MC2_receiveCommand() != SEND_SECOND_PASSWORD );
     d38:	0e 94 38 09 	call	0x1270	; 0x1270 <MC2_receiveCommand>
     d3c:	87 3f       	cpi	r24, 0xF7	; 247
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <MC2_newPassword+0x1e>
		/* Receive the first password from MC1 */
		MC2_receivePassword(g_confirmPassword);
     d40:	8b e7       	ldi	r24, 0x7B	; 123
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 c7 06 	call	0xd8e	; 0xd8e <MC2_receivePassword>

		/* Compare the Two received passwords */
		g_matchStatus = MC2_comparePasswords(g_receivedPassword, g_confirmPassword);
     d48:	80 e8       	ldi	r24, 0x80	; 128
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	2b e7       	ldi	r18, 0x7B	; 123
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	b9 01       	movw	r22, r18
     d52:	0e 94 67 07 	call	0xece	; 0xece <MC2_comparePasswords>
     d56:	80 93 76 00 	sts	0x0076, r24

		/* In case the Two Passwords didn't match */
		if( g_matchStatus == PASS_MIS_MATCHED )
     d5a:	80 91 76 00 	lds	r24, 0x0076
     d5e:	88 23       	and	r24, r24
     d60:	21 f4       	brne	.+8      	; 0xd6a <MC2_newPassword+0x50>
		{
			/* Send command informing that the passwords is wrong */
			MC2_sendCommand(PASS_MIS_MATCHED);
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0e 94 20 09 	call	0x1240	; 0x1240 <MC2_sendCommand>
     d68:	0b c0       	rjmp	.+22     	; 0xd80 <MC2_newPassword+0x66>
		}
		/* In case the Passwords matches */
		else if( g_matchStatus == PASS_MATCHED )
     d6a:	80 91 76 00 	lds	r24, 0x0076
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	39 f4       	brne	.+14     	; 0xd80 <MC2_newPassword+0x66>
		{
			MC2_savePassword(g_receivedPassword);
     d72:	80 e8       	ldi	r24, 0x80	; 128
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 9c 07 	call	0xf38	; 0xf38 <MC2_savePassword>
			/* Send command informing that the passwords matched */
			MC2_sendCommand(PASS_MATCHED);
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	0e 94 20 09 	call	0x1240	; 0x1240 <MC2_sendCommand>
void MC2_newPassword(void)
{
	g_matchStatus = PASS_MIS_MATCHED;

	/* Loop until the MC1 get the same password */
	while(g_matchStatus == PASS_MIS_MATCHED)
     d80:	80 91 76 00 	lds	r24, 0x0076
     d84:	88 23       	and	r24, r24
     d86:	81 f2       	breq	.-96     	; 0xd28 <MC2_newPassword+0xe>
			MC2_savePassword(g_receivedPassword);
			/* Send command informing that the passwords matched */
			MC2_sendCommand(PASS_MATCHED);
		}
	}
}
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <MC2_receivePassword>:
/*
 * Description :
 * Takes the Password which received from UART and Store it in an array
 */
void MC2_receivePassword(uint8 a_Password[])
{
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	61 97       	sbiw	r28, 0x11	; 17
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	99 8b       	std	Y+17, r25	; 0x11
     da8:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter;

	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
     daa:	1f 86       	std	Y+15, r1	; 0x0f
     dac:	81 c0       	rjmp	.+258    	; 0xeb0 <MC2_receivePassword+0x122>
	{
		a_Password[counter] = UART_recieveByte(); /* Receive Password from MC1 */
     dae:	8f 85       	ldd	r24, Y+15	; 0x0f
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	88 89       	ldd	r24, Y+16	; 0x10
     db6:	99 89       	ldd	r25, Y+17	; 0x11
     db8:	8c 01       	movw	r16, r24
     dba:	02 0f       	add	r16, r18
     dbc:	13 1f       	adc	r17, r19
     dbe:	0e 94 02 10 	call	0x2004	; 0x2004 <UART_recieveByte>
     dc2:	f8 01       	movw	r30, r16
     dc4:	80 83       	st	Z, r24
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	a0 e2       	ldi	r26, 0x20	; 32
     dcc:	b1 e4       	ldi	r27, 0x41	; 65
     dce:	8b 87       	std	Y+11, r24	; 0x0b
     dd0:	9c 87       	std	Y+12, r25	; 0x0c
     dd2:	ad 87       	std	Y+13, r26	; 0x0d
     dd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dda:	8d 85       	ldd	r24, Y+13	; 0x0d
     ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	4a e7       	ldi	r20, 0x7A	; 122
     de4:	53 e4       	ldi	r21, 0x43	; 67
     de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	8f 83       	std	Y+7, r24	; 0x07
     df0:	98 87       	std	Y+8, r25	; 0x08
     df2:	a9 87       	std	Y+9, r26	; 0x09
     df4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     df6:	6f 81       	ldd	r22, Y+7	; 0x07
     df8:	78 85       	ldd	r23, Y+8	; 0x08
     dfa:	89 85       	ldd	r24, Y+9	; 0x09
     dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e8       	ldi	r20, 0x80	; 128
     e04:	5f e3       	ldi	r21, 0x3F	; 63
     e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e0a:	88 23       	and	r24, r24
     e0c:	2c f4       	brge	.+10     	; 0xe18 <MC2_receivePassword+0x8a>
		__ticks = 1;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9e 83       	std	Y+6, r25	; 0x06
     e14:	8d 83       	std	Y+5, r24	; 0x05
     e16:	3f c0       	rjmp	.+126    	; 0xe96 <MC2_receivePassword+0x108>
	else if (__tmp > 65535)
     e18:	6f 81       	ldd	r22, Y+7	; 0x07
     e1a:	78 85       	ldd	r23, Y+8	; 0x08
     e1c:	89 85       	ldd	r24, Y+9	; 0x09
     e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	3f ef       	ldi	r19, 0xFF	; 255
     e24:	4f e7       	ldi	r20, 0x7F	; 127
     e26:	57 e4       	ldi	r21, 0x47	; 71
     e28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e2c:	18 16       	cp	r1, r24
     e2e:	4c f5       	brge	.+82     	; 0xe82 <MC2_receivePassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e30:	6b 85       	ldd	r22, Y+11	; 0x0b
     e32:	7c 85       	ldd	r23, Y+12	; 0x0c
     e34:	8d 85       	ldd	r24, Y+13	; 0x0d
     e36:	9e 85       	ldd	r25, Y+14	; 0x0e
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e2       	ldi	r20, 0x20	; 32
     e3e:	51 e4       	ldi	r21, 0x41	; 65
     e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	bc 01       	movw	r22, r24
     e4a:	cd 01       	movw	r24, r26
     e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
     e58:	0f c0       	rjmp	.+30     	; 0xe78 <MC2_receivePassword+0xea>
     e5a:	89 e1       	ldi	r24, 0x19	; 25
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9c 83       	std	Y+4, r25	; 0x04
     e60:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	9c 81       	ldd	r25, Y+4	; 0x04
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <MC2_receivePassword+0xd8>
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	9e 83       	std	Y+6, r25	; 0x06
     e76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	9e 81       	ldd	r25, Y+6	; 0x06
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	69 f7       	brne	.-38     	; 0xe5a <MC2_receivePassword+0xcc>
     e80:	14 c0       	rjmp	.+40     	; 0xeaa <MC2_receivePassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e82:	6f 81       	ldd	r22, Y+7	; 0x07
     e84:	78 85       	ldd	r23, Y+8	; 0x08
     e86:	89 85       	ldd	r24, Y+9	; 0x09
     e88:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	9e 83       	std	Y+6, r25	; 0x06
     e94:	8d 83       	std	Y+5, r24	; 0x05
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <MC2_receivePassword+0x114>
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
 */
void MC2_receivePassword(uint8 a_Password[])
{
	uint8 counter;

	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
     eaa:	8f 85       	ldd	r24, Y+15	; 0x0f
     eac:	8f 5f       	subi	r24, 0xFF	; 255
     eae:	8f 87       	std	Y+15, r24	; 0x0f
     eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb2:	85 30       	cpi	r24, 0x05	; 5
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <MC2_receivePassword+0x12a>
     eb6:	7b cf       	rjmp	.-266    	; 0xdae <MC2_receivePassword+0x20>
	{
		a_Password[counter] = UART_recieveByte(); /* Receive Password from MC1 */
		_delay_ms(SEND_RECEIVE_TIME); /* Delay for the time gap for sending receiving time between the MCUs */
	}
}
     eb8:	61 96       	adiw	r28, 0x11	; 17
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	08 95       	ret

00000ece <MC2_comparePasswords>:
 * Description :
 * Function to compare two passwords received from MC1
 * and return the match status between them
 */
uint8 MC2_comparePasswords(uint8 a_password1[], uint8 a_password2[])
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <MC2_comparePasswords+0x6>
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <MC2_comparePasswords+0x8>
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <MC2_comparePasswords+0xa>
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	9b 83       	std	Y+3, r25	; 0x03
     ede:	8a 83       	std	Y+2, r24	; 0x02
     ee0:	7d 83       	std	Y+5, r23	; 0x05
     ee2:	6c 83       	std	Y+4, r22	; 0x04
	uint8 counter;

	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
     ee4:	19 82       	std	Y+1, r1	; 0x01
     ee6:	19 c0       	rjmp	.+50     	; 0xf1a <MC2_comparePasswords+0x4c>
	{
		if (a_password1[counter] != a_password2[counter])
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	9b 81       	ldd	r25, Y+3	; 0x03
     ef2:	fc 01       	movw	r30, r24
     ef4:	e2 0f       	add	r30, r18
     ef6:	f3 1f       	adc	r31, r19
     ef8:	40 81       	ld	r20, Z
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	8c 81       	ldd	r24, Y+4	; 0x04
     f02:	9d 81       	ldd	r25, Y+5	; 0x05
     f04:	fc 01       	movw	r30, r24
     f06:	e2 0f       	add	r30, r18
     f08:	f3 1f       	adc	r31, r19
     f0a:	80 81       	ld	r24, Z
     f0c:	48 17       	cp	r20, r24
     f0e:	11 f0       	breq	.+4      	; 0xf14 <MC2_comparePasswords+0x46>
		{
			return PASS_MIS_MATCHED; /* Return passwords has not matched of one element mis-matched */
     f10:	1e 82       	std	Y+6, r1	; 0x06
     f12:	08 c0       	rjmp	.+16     	; 0xf24 <MC2_comparePasswords+0x56>
 */
uint8 MC2_comparePasswords(uint8 a_password1[], uint8 a_password2[])
{
	uint8 counter;

	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	8f 5f       	subi	r24, 0xFF	; 255
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	85 30       	cpi	r24, 0x05	; 5
     f1e:	20 f3       	brcs	.-56     	; 0xee8 <MC2_comparePasswords+0x1a>
		{
			return PASS_MIS_MATCHED; /* Return passwords has not matched of one element mis-matched */
		}
	}

	return PASS_MATCHED;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	8e 83       	std	Y+6, r24	; 0x06
     f24:	8e 81       	ldd	r24, Y+6	; 0x06
}
     f26:	26 96       	adiw	r28, 0x06	; 6
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <MC2_savePassword>:
/*
 * Description :
 * Function that save the matched password in external EEPROM
 */
void MC2_savePassword(uint8 a_receivedPassword[])
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	61 97       	sbiw	r28, 0x11	; 17
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	99 8b       	std	Y+17, r25	; 0x11
     f4e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter;

	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
     f50:	1f 86       	std	Y+15, r1	; 0x0f
     f52:	88 c0       	rjmp	.+272    	; 0x1064 <MC2_savePassword+0x12c>
	{
		/* Save each element of the password in external EEPROM */
		EEPROM_writeByte( (0x0311+counter), a_receivedPassword[counter]);
     f54:	8f 85       	ldd	r24, Y+15	; 0x0f
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	8f 5e       	subi	r24, 0xEF	; 239
     f5c:	9c 4f       	sbci	r25, 0xFC	; 252
     f5e:	ac 01       	movw	r20, r24
     f60:	8f 85       	ldd	r24, Y+15	; 0x0f
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	88 89       	ldd	r24, Y+16	; 0x10
     f68:	99 89       	ldd	r25, Y+17	; 0x11
     f6a:	fc 01       	movw	r30, r24
     f6c:	e2 0f       	add	r30, r18
     f6e:	f3 1f       	adc	r31, r19
     f70:	20 81       	ld	r18, Z
     f72:	ca 01       	movw	r24, r20
     f74:	62 2f       	mov	r22, r18
     f76:	0e 94 83 09 	call	0x1306	; 0x1306 <EEPROM_writeByte>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a8 ec       	ldi	r26, 0xC8	; 200
     f80:	b2 e4       	ldi	r27, 0x42	; 66
     f82:	8b 87       	std	Y+11, r24	; 0x0b
     f84:	9c 87       	std	Y+12, r25	; 0x0c
     f86:	ad 87       	std	Y+13, r26	; 0x0d
     f88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f90:	9e 85       	ldd	r25, Y+14	; 0x0e
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	4a e7       	ldi	r20, 0x7A	; 122
     f98:	53 e4       	ldi	r21, 0x43	; 67
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	8f 83       	std	Y+7, r24	; 0x07
     fa4:	98 87       	std	Y+8, r25	; 0x08
     fa6:	a9 87       	std	Y+9, r26	; 0x09
     fa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     faa:	6f 81       	ldd	r22, Y+7	; 0x07
     fac:	78 85       	ldd	r23, Y+8	; 0x08
     fae:	89 85       	ldd	r24, Y+9	; 0x09
     fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	2c f4       	brge	.+10     	; 0xfcc <MC2_savePassword+0x94>
		__ticks = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	9e 83       	std	Y+6, r25	; 0x06
     fc8:	8d 83       	std	Y+5, r24	; 0x05
     fca:	3f c0       	rjmp	.+126    	; 0x104a <MC2_savePassword+0x112>
	else if (__tmp > 65535)
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	78 85       	ldd	r23, Y+8	; 0x08
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	3f ef       	ldi	r19, 0xFF	; 255
     fd8:	4f e7       	ldi	r20, 0x7F	; 127
     fda:	57 e4       	ldi	r21, 0x47	; 71
     fdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe0:	18 16       	cp	r1, r24
     fe2:	4c f5       	brge	.+82     	; 0x1036 <MC2_savePassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fea:	9e 85       	ldd	r25, Y+14	; 0x0e
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e2       	ldi	r20, 0x20	; 32
     ff2:	51 e4       	ldi	r21, 0x41	; 65
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9e 83       	std	Y+6, r25	; 0x06
    100a:	8d 83       	std	Y+5, r24	; 0x05
    100c:	0f c0       	rjmp	.+30     	; 0x102c <MC2_savePassword+0xf4>
    100e:	89 e1       	ldi	r24, 0x19	; 25
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9c 83       	std	Y+4, r25	; 0x04
    1014:	8b 83       	std	Y+3, r24	; 0x03
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	9c 81       	ldd	r25, Y+4	; 0x04
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <MC2_savePassword+0xe2>
    101e:	9c 83       	std	Y+4, r25	; 0x04
    1020:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	69 f7       	brne	.-38     	; 0x100e <MC2_savePassword+0xd6>
    1034:	14 c0       	rjmp	.+40     	; 0x105e <MC2_savePassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1036:	6f 81       	ldd	r22, Y+7	; 0x07
    1038:	78 85       	ldd	r23, Y+8	; 0x08
    103a:	89 85       	ldd	r24, Y+9	; 0x09
    103c:	9a 85       	ldd	r25, Y+10	; 0x0a
    103e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	8d 83       	std	Y+5, r24	; 0x05
    104a:	8d 81       	ldd	r24, Y+5	; 0x05
    104c:	9e 81       	ldd	r25, Y+6	; 0x06
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <MC2_savePassword+0x11e>
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	89 83       	std	Y+1, r24	; 0x01
 */
void MC2_savePassword(uint8 a_receivedPassword[])
{
	uint8 counter;

	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    105e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1060:	8f 5f       	subi	r24, 0xFF	; 255
    1062:	8f 87       	std	Y+15, r24	; 0x0f
    1064:	8f 85       	ldd	r24, Y+15	; 0x0f
    1066:	85 30       	cpi	r24, 0x05	; 5
    1068:	08 f4       	brcc	.+2      	; 0x106c <MC2_savePassword+0x134>
    106a:	74 cf       	rjmp	.-280    	; 0xf54 <MC2_savePassword+0x1c>
		/* Save each element of the password in external EEPROM */
		EEPROM_writeByte( (0x0311+counter), a_receivedPassword[counter]);
		/* Delay for the time gap for storing data in EEPROM */
		_delay_ms(STORING_TIME);
	}
}
    106c:	61 96       	adiw	r28, 0x11	; 17
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <MC2_readPassword>:
/*
 * Description :
 * Load the Password from EEPROM and Store it in an array
 */
void MC2_readPassword(uint8 a_storedPassword[])
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	61 97       	sbiw	r28, 0x11	; 17
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	99 8b       	std	Y+17, r25	; 0x11
    1094:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter;

	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    1096:	1f 86       	std	Y+15, r1	; 0x0f
    1098:	86 c0       	rjmp	.+268    	; 0x11a6 <MC2_readPassword+0x128>
	{
		/* Read each element of the password in external EEPROM */
		EEPROM_readByte( (0x0311+counter), &a_storedPassword[counter]);
    109a:	8f 85       	ldd	r24, Y+15	; 0x0f
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	8f 5e       	subi	r24, 0xEF	; 239
    10a2:	9c 4f       	sbci	r25, 0xFC	; 252
    10a4:	ac 01       	movw	r20, r24
    10a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	88 89       	ldd	r24, Y+16	; 0x10
    10ae:	99 89       	ldd	r25, Y+17	; 0x11
    10b0:	28 0f       	add	r18, r24
    10b2:	39 1f       	adc	r19, r25
    10b4:	ca 01       	movw	r24, r20
    10b6:	b9 01       	movw	r22, r18
    10b8:	0e 94 c4 09 	call	0x1388	; 0x1388 <EEPROM_readByte>
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	a8 ec       	ldi	r26, 0xC8	; 200
    10c2:	b2 e4       	ldi	r27, 0x42	; 66
    10c4:	8b 87       	std	Y+11, r24	; 0x0b
    10c6:	9c 87       	std	Y+12, r25	; 0x0c
    10c8:	ad 87       	std	Y+13, r26	; 0x0d
    10ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	4a e7       	ldi	r20, 0x7A	; 122
    10da:	53 e4       	ldi	r21, 0x43	; 67
    10dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	8f 83       	std	Y+7, r24	; 0x07
    10e6:	98 87       	std	Y+8, r25	; 0x08
    10e8:	a9 87       	std	Y+9, r26	; 0x09
    10ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ec:	6f 81       	ldd	r22, Y+7	; 0x07
    10ee:	78 85       	ldd	r23, Y+8	; 0x08
    10f0:	89 85       	ldd	r24, Y+9	; 0x09
    10f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e8       	ldi	r20, 0x80	; 128
    10fa:	5f e3       	ldi	r21, 0x3F	; 63
    10fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1100:	88 23       	and	r24, r24
    1102:	2c f4       	brge	.+10     	; 0x110e <MC2_readPassword+0x90>
		__ticks = 1;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	3f c0       	rjmp	.+126    	; 0x118c <MC2_readPassword+0x10e>
	else if (__tmp > 65535)
    110e:	6f 81       	ldd	r22, Y+7	; 0x07
    1110:	78 85       	ldd	r23, Y+8	; 0x08
    1112:	89 85       	ldd	r24, Y+9	; 0x09
    1114:	9a 85       	ldd	r25, Y+10	; 0x0a
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	3f ef       	ldi	r19, 0xFF	; 255
    111a:	4f e7       	ldi	r20, 0x7F	; 127
    111c:	57 e4       	ldi	r21, 0x47	; 71
    111e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1122:	18 16       	cp	r1, r24
    1124:	4c f5       	brge	.+82     	; 0x1178 <MC2_readPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1126:	6b 85       	ldd	r22, Y+11	; 0x0b
    1128:	7c 85       	ldd	r23, Y+12	; 0x0c
    112a:	8d 85       	ldd	r24, Y+13	; 0x0d
    112c:	9e 85       	ldd	r25, Y+14	; 0x0e
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e2       	ldi	r20, 0x20	; 32
    1134:	51 e4       	ldi	r21, 0x41	; 65
    1136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	bc 01       	movw	r22, r24
    1140:	cd 01       	movw	r24, r26
    1142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	9e 83       	std	Y+6, r25	; 0x06
    114c:	8d 83       	std	Y+5, r24	; 0x05
    114e:	0f c0       	rjmp	.+30     	; 0x116e <MC2_readPassword+0xf0>
    1150:	89 e1       	ldi	r24, 0x19	; 25
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9c 83       	std	Y+4, r25	; 0x04
    1156:	8b 83       	std	Y+3, r24	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	f1 f7       	brne	.-4      	; 0x115c <MC2_readPassword+0xde>
    1160:	9c 83       	std	Y+4, r25	; 0x04
    1162:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	9e 83       	std	Y+6, r25	; 0x06
    116c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	69 f7       	brne	.-38     	; 0x1150 <MC2_readPassword+0xd2>
    1176:	14 c0       	rjmp	.+40     	; 0x11a0 <MC2_readPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1178:	6f 81       	ldd	r22, Y+7	; 0x07
    117a:	78 85       	ldd	r23, Y+8	; 0x08
    117c:	89 85       	ldd	r24, Y+9	; 0x09
    117e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	8d 81       	ldd	r24, Y+5	; 0x05
    118e:	9e 81       	ldd	r25, Y+6	; 0x06
    1190:	9a 83       	std	Y+2, r25	; 0x02
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <MC2_readPassword+0x11a>
    119c:	9a 83       	std	Y+2, r25	; 0x02
    119e:	89 83       	std	Y+1, r24	; 0x01
 */
void MC2_readPassword(uint8 a_storedPassword[])
{
	uint8 counter;

	for( counter = 0; counter < PASSWORD_LENGTH; counter++)
    11a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a2:	8f 5f       	subi	r24, 0xFF	; 255
    11a4:	8f 87       	std	Y+15, r24	; 0x0f
    11a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a8:	85 30       	cpi	r24, 0x05	; 5
    11aa:	08 f4       	brcc	.+2      	; 0x11ae <MC2_readPassword+0x130>
    11ac:	76 cf       	rjmp	.-276    	; 0x109a <MC2_readPassword+0x1c>
		/* Read each element of the password in external EEPROM */
		EEPROM_readByte( (0x0311+counter), &a_storedPassword[counter]);
		/* Delay for the time gap for storing data in EEPROM */
		_delay_ms(STORING_TIME);
	}
}
    11ae:	61 96       	adiw	r28, 0x11	; 17
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <MC2_openingDoor>:
/*
 * Description:
 * Function that rotates the DC Motor
 */
void MC2_openingDoor(void)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
	MC2_startTimer(); /* Start the Timer */
    11c8:	0e 94 71 06 	call	0xce2	; 0xce2 <MC2_startTimer>

	DcMotor_Rotate(CW);
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DcMotor_Rotate>
	while(g_tick != OPEN_DOOR_TIME); /* Count up to 15 */
    11d2:	80 91 77 00 	lds	r24, 0x0077
    11d6:	8f 30       	cpi	r24, 0x0F	; 15
    11d8:	e1 f7       	brne	.-8      	; 0x11d2 <MC2_openingDoor+0x12>
	g_tick = 0; /* Reset counter to reuse it */
    11da:	10 92 77 00 	sts	0x0077, r1

	DcMotor_Rotate(ACW);
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DcMotor_Rotate>
	while(g_tick != CLOSE_DOOR_TIME); /* Count up to 15 */
    11e4:	80 91 77 00 	lds	r24, 0x0077
    11e8:	8f 30       	cpi	r24, 0x0F	; 15
    11ea:	e1 f7       	brne	.-8      	; 0x11e4 <MC2_openingDoor+0x24>
	g_tick = 0; /* Reset counter to reuse it */
    11ec:	10 92 77 00 	sts	0x0077, r1

	DcMotor_Rotate(STOP); /* Stop the Motor */
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DcMotor_Rotate>

	Timer0_Deinit();
    11f6:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <Timer0_Deinit>
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <MC2_wrongPassword>:
/*
 * Description:
 * Function that take care of wrong password States
 */
void MC2_wrongPassword(void)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
	g_passwordMistakes++; /* Increment the wrong counter */
    1208:	80 91 78 00 	lds	r24, 0x0078
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	80 93 78 00 	sts	0x0078, r24

	/* If the user entered the password 3 times wrong */
	if(g_passwordMistakes == MAX_NUM_OF_MISTAKES)
    1212:	80 91 78 00 	lds	r24, 0x0078
    1216:	83 30       	cpi	r24, 0x03	; 3
    1218:	71 f4       	brne	.+28     	; 0x1236 <MC2_wrongPassword+0x36>
	{
		MC2_startTimer(); /* Start the timer to measure time period */
    121a:	0e 94 71 06 	call	0xce2	; 0xce2 <MC2_startTimer>

		BUZZER_ON(); /* Turn on the buzzer */
    121e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <BUZZER_ON>
		while(g_tick != WARNING_TIME); /* Count up to 15 */
    1222:	80 91 77 00 	lds	r24, 0x0077
    1226:	8c 33       	cpi	r24, 0x3C	; 60
    1228:	e1 f7       	brne	.-8      	; 0x1222 <MC2_wrongPassword+0x22>

		/* Reset the counters */
		g_tick = 0;
    122a:	10 92 77 00 	sts	0x0077, r1
		g_passwordMistakes = 0;
    122e:	10 92 78 00 	sts	0x0078, r1

		Timer0_Deinit();
    1232:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <Timer0_Deinit>
	}
	BUZZER_OFF(); /* Turn off the buzzer */
    1236:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <BUZZER_OFF>
}
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <MC2_sendCommand>:
/*
 * Description:
 * Function to send specific commands to the MC1 through UART
 */
void MC2_sendCommand(uint8 g_command)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	0f 92       	push	r0
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	89 83       	std	Y+1, r24	; 0x01
	/* Inform MC1 that you are to send */
	UART_sendByte(READY_TO_SEND);
    124c:	83 ef       	ldi	r24, 0xF3	; 243
    124e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <UART_sendByte>

	/* Wait until MC1 are ready to receive */
	while(UART_recieveByte() != READY_TO_RECEIVE);
    1252:	0e 94 02 10 	call	0x2004	; 0x2004 <UART_recieveByte>
    1256:	84 3f       	cpi	r24, 0xF4	; 244
    1258:	e1 f7       	brne	.-8      	; 0x1252 <MC2_sendCommand+0x12>

	/* Send the required command to the MC1 */
	UART_sendByte(g_command);
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <UART_sendByte>

	/* Wait until the MC1 receive the command */
	while(UART_recieveByte() != RECEIVE_DONE);
    1260:	0e 94 02 10 	call	0x2004	; 0x2004 <UART_recieveByte>
    1264:	85 3f       	cpi	r24, 0xF5	; 245
    1266:	e1 f7       	brne	.-8      	; 0x1260 <MC2_sendCommand+0x20>
}
    1268:	0f 90       	pop	r0
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <MC2_receiveCommand>:
/*
 * Description:
 * Function to receive specific command from the MC1 through UART
 */
uint8 MC2_receiveCommand(void)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the MC1 is ready to send */
	while(UART_recieveByte() != READY_TO_SEND);
    1278:	0e 94 02 10 	call	0x2004	; 0x2004 <UART_recieveByte>
    127c:	83 3f       	cpi	r24, 0xF3	; 243
    127e:	e1 f7       	brne	.-8      	; 0x1278 <MC2_receiveCommand+0x8>

	/* Inform the MC1 that you are ready to receive */
	UART_sendByte(READY_TO_RECEIVE);
    1280:	84 ef       	ldi	r24, 0xF4	; 244
    1282:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <UART_sendByte>

	/* Receive the command from the MC1 */
	g_command = UART_recieveByte();
    1286:	0e 94 02 10 	call	0x2004	; 0x2004 <UART_recieveByte>
    128a:	80 93 8a 00 	sts	0x008A, r24

	/* Inform the MC1 that the receive has been done successfully */
	UART_sendByte(RECEIVE_DONE);
    128e:	85 ef       	ldi	r24, 0xF5	; 245
    1290:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <UART_sendByte>

	return g_command;
    1294:	80 91 8a 00 	lds	r24, 0x008A
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <BUZZER_init>:
 *******************************************************************************/

/*
 * function to initialize buzzer
 */
void BUZZER_init(){
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Buzzer_Port, Buzzer_PIN, PIN_OUTPUT);
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	41 e0       	ldi	r20, 0x01	; 1
    12ac:	0e 94 24 0a 	call	0x1448	; 0x1448 <GPIO_setupPinDirection>
	GPIO_writePin(Buzzer_Port, Buzzer_PIN, LOGIC_LOW);
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	0e 94 0f 0b 	call	0x161e	; 0x161e <GPIO_writePin>
}
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <BUZZER_ON>:

/*
 * function to turn on buzzer
 */
void BUZZER_ON(){
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_Port, Buzzer_PIN, LOGIC_HIGH);
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	0e 94 0f 0b 	call	0x161e	; 0x161e <GPIO_writePin>
}
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <BUZZER_OFF>:

/*
 * function to turn off buzzer
 */
void BUZZER_OFF(){
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_Port, Buzzer_PIN, LOGIC_LOW);
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	0e 94 0f 0b 	call	0x161e	; 0x161e <GPIO_writePin>
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <EEPROM_init>:
 *******************************************************************************/

/*
 * initialization of EEPROM
 */
void EEPROM_init(void){
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62

	TWI_init(&config_ptr);
    12f8:	88 e6       	ldi	r24, 0x68	; 104
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_init>
}
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <EEPROM_writeByte+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <EEPROM_writeByte+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    1318:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    131c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <TWI_getStatus>
    1320:	88 30       	cpi	r24, 0x08	; 8
    1322:	11 f0       	breq	.+4      	; 0x1328 <EEPROM_writeByte+0x22>
		return ERROR;
    1324:	1c 82       	std	Y+4, r1	; 0x04
    1326:	28 c0       	rjmp	.+80     	; 0x1378 <EEPROM_writeByte+0x72>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	80 70       	andi	r24, 0x00	; 0
    132e:	97 70       	andi	r25, 0x07	; 7
    1330:	88 0f       	add	r24, r24
    1332:	89 2f       	mov	r24, r25
    1334:	88 1f       	adc	r24, r24
    1336:	99 0b       	sbc	r25, r25
    1338:	91 95       	neg	r25
    133a:	80 6a       	ori	r24, 0xA0	; 160
    133c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1340:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <TWI_getStatus>
    1344:	88 31       	cpi	r24, 0x18	; 24
    1346:	11 f0       	breq	.+4      	; 0x134c <EEPROM_writeByte+0x46>
		return ERROR;
    1348:	1c 82       	std	Y+4, r1	; 0x04
    134a:	16 c0       	rjmp	.+44     	; 0x1378 <EEPROM_writeByte+0x72>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1352:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <TWI_getStatus>
    1356:	88 32       	cpi	r24, 0x28	; 40
    1358:	11 f0       	breq	.+4      	; 0x135e <EEPROM_writeByte+0x58>
		return ERROR;
    135a:	1c 82       	std	Y+4, r1	; 0x04
    135c:	0d c0       	rjmp	.+26     	; 0x1378 <EEPROM_writeByte+0x72>

	/* write byte to eeprom */
	TWI_writeByte(u8data);
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1364:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <TWI_getStatus>
    1368:	88 32       	cpi	r24, 0x28	; 40
    136a:	11 f0       	breq	.+4      	; 0x1370 <EEPROM_writeByte+0x6a>
		return ERROR;
    136c:	1c 82       	std	Y+4, r1	; 0x04
    136e:	04 c0       	rjmp	.+8      	; 0x1378 <EEPROM_writeByte+0x72>

	/* Send the Stop Bit */
	TWI_stop();
    1370:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <TWI_stop>

	return SUCCESS;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	8c 83       	std	Y+4, r24	; 0x04
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	00 d0       	rcall	.+0      	; 0x138e <EEPROM_readByte+0x6>
    138e:	00 d0       	rcall	.+0      	; 0x1390 <EEPROM_readByte+0x8>
    1390:	0f 92       	push	r0
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	9a 83       	std	Y+2, r25	; 0x02
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	7c 83       	std	Y+4, r23	; 0x04
    139c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    139e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    13a2:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <TWI_getStatus>
    13a6:	88 30       	cpi	r24, 0x08	; 8
    13a8:	11 f0       	breq	.+4      	; 0x13ae <EEPROM_readByte+0x26>
		return ERROR;
    13aa:	1d 82       	std	Y+5, r1	; 0x05
    13ac:	44 c0       	rjmp	.+136    	; 0x1436 <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	80 70       	andi	r24, 0x00	; 0
    13b4:	97 70       	andi	r25, 0x07	; 7
    13b6:	88 0f       	add	r24, r24
    13b8:	89 2f       	mov	r24, r25
    13ba:	88 1f       	adc	r24, r24
    13bc:	99 0b       	sbc	r25, r25
    13be:	91 95       	neg	r25
    13c0:	80 6a       	ori	r24, 0xA0	; 160
    13c2:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13c6:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <TWI_getStatus>
    13ca:	88 31       	cpi	r24, 0x18	; 24
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <EEPROM_readByte+0x4a>
		return ERROR;
    13ce:	1d 82       	std	Y+5, r1	; 0x05
    13d0:	32 c0       	rjmp	.+100    	; 0x1436 <EEPROM_readByte+0xae>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13d8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <TWI_getStatus>
    13dc:	88 32       	cpi	r24, 0x28	; 40
    13de:	11 f0       	breq	.+4      	; 0x13e4 <EEPROM_readByte+0x5c>
		return ERROR;
    13e0:	1d 82       	std	Y+5, r1	; 0x05
    13e2:	29 c0       	rjmp	.+82     	; 0x1436 <EEPROM_readByte+0xae>

	/* Send the Repeated Start Bit */
	TWI_start();
    13e4:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    13e8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <TWI_getStatus>
    13ec:	80 31       	cpi	r24, 0x10	; 16
    13ee:	11 f0       	breq	.+4      	; 0x13f4 <EEPROM_readByte+0x6c>
		return ERROR;
    13f0:	1d 82       	std	Y+5, r1	; 0x05
    13f2:	21 c0       	rjmp	.+66     	; 0x1436 <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	80 70       	andi	r24, 0x00	; 0
    13fa:	97 70       	andi	r25, 0x07	; 7
    13fc:	88 0f       	add	r24, r24
    13fe:	89 2f       	mov	r24, r25
    1400:	88 1f       	adc	r24, r24
    1402:	99 0b       	sbc	r25, r25
    1404:	91 95       	neg	r25
    1406:	81 6a       	ori	r24, 0xA1	; 161
    1408:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    140c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <TWI_getStatus>
    1410:	80 34       	cpi	r24, 0x40	; 64
    1412:	11 f0       	breq	.+4      	; 0x1418 <EEPROM_readByte+0x90>
		return ERROR;
    1414:	1d 82       	std	Y+5, r1	; 0x05
    1416:	0f c0       	rjmp	.+30     	; 0x1436 <EEPROM_readByte+0xae>

	/* Read Byte from Memory without send ACK */
	*u8data = TWI_readByteWithNACK();
    1418:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <TWI_readByteWithNACK>
    141c:	eb 81       	ldd	r30, Y+3	; 0x03
    141e:	fc 81       	ldd	r31, Y+4	; 0x04
    1420:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1422:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <TWI_getStatus>
    1426:	88 35       	cpi	r24, 0x58	; 88
    1428:	11 f0       	breq	.+4      	; 0x142e <EEPROM_readByte+0xa6>
		return ERROR;
    142a:	1d 82       	std	Y+5, r1	; 0x05
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <EEPROM_readByte+0xae>

	/* Send the Stop Bit */
	TWI_stop();
    142e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <TWI_stop>

	return SUCCESS;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	8d 83       	std	Y+5, r24	; 0x05
    1436:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <GPIO_setupPinDirection+0x6>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <GPIO_setupPinDirection+0x8>
    1450:	0f 92       	push	r0
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	6a 83       	std	Y+2, r22	; 0x02
    145a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	88 30       	cpi	r24, 0x08	; 8
    1460:	08 f0       	brcs	.+2      	; 0x1464 <GPIO_setupPinDirection+0x1c>
    1462:	d5 c0       	rjmp	.+426    	; 0x160e <GPIO_setupPinDirection+0x1c6>
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	84 30       	cpi	r24, 0x04	; 4
    1468:	08 f0       	brcs	.+2      	; 0x146c <GPIO_setupPinDirection+0x24>
    146a:	d1 c0       	rjmp	.+418    	; 0x160e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	3d 83       	std	Y+5, r19	; 0x05
    1474:	2c 83       	std	Y+4, r18	; 0x04
    1476:	8c 81       	ldd	r24, Y+4	; 0x04
    1478:	9d 81       	ldd	r25, Y+5	; 0x05
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	91 05       	cpc	r25, r1
    147e:	09 f4       	brne	.+2      	; 0x1482 <GPIO_setupPinDirection+0x3a>
    1480:	43 c0       	rjmp	.+134    	; 0x1508 <GPIO_setupPinDirection+0xc0>
    1482:	2c 81       	ldd	r18, Y+4	; 0x04
    1484:	3d 81       	ldd	r19, Y+5	; 0x05
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	2c f4       	brge	.+10     	; 0x1496 <GPIO_setupPinDirection+0x4e>
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	9d 81       	ldd	r25, Y+5	; 0x05
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	71 f0       	breq	.+28     	; 0x14b0 <GPIO_setupPinDirection+0x68>
    1494:	bc c0       	rjmp	.+376    	; 0x160e <GPIO_setupPinDirection+0x1c6>
    1496:	2c 81       	ldd	r18, Y+4	; 0x04
    1498:	3d 81       	ldd	r19, Y+5	; 0x05
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	09 f4       	brne	.+2      	; 0x14a2 <GPIO_setupPinDirection+0x5a>
    14a0:	5f c0       	rjmp	.+190    	; 0x1560 <GPIO_setupPinDirection+0x118>
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	9d 81       	ldd	r25, Y+5	; 0x05
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	91 05       	cpc	r25, r1
    14aa:	09 f4       	brne	.+2      	; 0x14ae <GPIO_setupPinDirection+0x66>
    14ac:	85 c0       	rjmp	.+266    	; 0x15b8 <GPIO_setupPinDirection+0x170>
    14ae:	af c0       	rjmp	.+350    	; 0x160e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	a1 f4       	brne	.+40     	; 0x14de <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14b6:	aa e3       	ldi	r26, 0x3A	; 58
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ea e3       	ldi	r30, 0x3A	; 58
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <GPIO_setupPinDirection+0x8c>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <GPIO_setupPinDirection+0x88>
    14d8:	84 2b       	or	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	98 c0       	rjmp	.+304    	; 0x160e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14de:	aa e3       	ldi	r26, 0x3A	; 58
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	ea e3       	ldi	r30, 0x3A	; 58
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <GPIO_setupPinDirection+0xb4>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <GPIO_setupPinDirection+0xb0>
    1500:	80 95       	com	r24
    1502:	84 23       	and	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	83 c0       	rjmp	.+262    	; 0x160e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	a1 f4       	brne	.+40     	; 0x1536 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    150e:	a7 e3       	ldi	r26, 0x37	; 55
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e7 e3       	ldi	r30, 0x37	; 55
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 2e       	mov	r0, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <GPIO_setupPinDirection+0xe4>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <GPIO_setupPinDirection+0xe0>
    1530:	84 2b       	or	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	6c c0       	rjmp	.+216    	; 0x160e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1536:	a7 e3       	ldi	r26, 0x37	; 55
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e7 e3       	ldi	r30, 0x37	; 55
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 2e       	mov	r0, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <GPIO_setupPinDirection+0x10c>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <GPIO_setupPinDirection+0x108>
    1558:	80 95       	com	r24
    155a:	84 23       	and	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	57 c0       	rjmp	.+174    	; 0x160e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	a1 f4       	brne	.+40     	; 0x158e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1566:	a4 e3       	ldi	r26, 0x34	; 52
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e4 e3       	ldi	r30, 0x34	; 52
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <GPIO_setupPinDirection+0x13c>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <GPIO_setupPinDirection+0x138>
    1588:	84 2b       	or	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	40 c0       	rjmp	.+128    	; 0x160e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    158e:	a4 e3       	ldi	r26, 0x34	; 52
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e4 e3       	ldi	r30, 0x34	; 52
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <GPIO_setupPinDirection+0x164>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <GPIO_setupPinDirection+0x160>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	2b c0       	rjmp	.+86     	; 0x160e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	a1 f4       	brne	.+40     	; 0x15e6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15be:	a1 e3       	ldi	r26, 0x31	; 49
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e1 e3       	ldi	r30, 0x31	; 49
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 2e       	mov	r0, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <GPIO_setupPinDirection+0x194>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	0a 94       	dec	r0
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <GPIO_setupPinDirection+0x190>
    15e0:	84 2b       	or	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	14 c0       	rjmp	.+40     	; 0x160e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    15e6:	a1 e3       	ldi	r26, 0x31	; 49
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e1 e3       	ldi	r30, 0x31	; 49
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <GPIO_setupPinDirection+0x1bc>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <GPIO_setupPinDirection+0x1b8>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	00 d0       	rcall	.+0      	; 0x1624 <GPIO_writePin+0x6>
    1624:	00 d0       	rcall	.+0      	; 0x1626 <GPIO_writePin+0x8>
    1626:	0f 92       	push	r0
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	6a 83       	std	Y+2, r22	; 0x02
    1630:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	88 30       	cpi	r24, 0x08	; 8
    1636:	08 f0       	brcs	.+2      	; 0x163a <GPIO_writePin+0x1c>
    1638:	d5 c0       	rjmp	.+426    	; 0x17e4 <GPIO_writePin+0x1c6>
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	08 f0       	brcs	.+2      	; 0x1642 <GPIO_writePin+0x24>
    1640:	d1 c0       	rjmp	.+418    	; 0x17e4 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else {
		switch(port_num)
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	3d 83       	std	Y+5, r19	; 0x05
    164a:	2c 83       	std	Y+4, r18	; 0x04
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	9d 81       	ldd	r25, Y+5	; 0x05
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	91 05       	cpc	r25, r1
    1654:	09 f4       	brne	.+2      	; 0x1658 <GPIO_writePin+0x3a>
    1656:	43 c0       	rjmp	.+134    	; 0x16de <GPIO_writePin+0xc0>
    1658:	2c 81       	ldd	r18, Y+4	; 0x04
    165a:	3d 81       	ldd	r19, Y+5	; 0x05
    165c:	22 30       	cpi	r18, 0x02	; 2
    165e:	31 05       	cpc	r19, r1
    1660:	2c f4       	brge	.+10     	; 0x166c <GPIO_writePin+0x4e>
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	9d 81       	ldd	r25, Y+5	; 0x05
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	71 f0       	breq	.+28     	; 0x1686 <GPIO_writePin+0x68>
    166a:	bc c0       	rjmp	.+376    	; 0x17e4 <GPIO_writePin+0x1c6>
    166c:	2c 81       	ldd	r18, Y+4	; 0x04
    166e:	3d 81       	ldd	r19, Y+5	; 0x05
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	09 f4       	brne	.+2      	; 0x1678 <GPIO_writePin+0x5a>
    1676:	5f c0       	rjmp	.+190    	; 0x1736 <GPIO_writePin+0x118>
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	83 30       	cpi	r24, 0x03	; 3
    167e:	91 05       	cpc	r25, r1
    1680:	09 f4       	brne	.+2      	; 0x1684 <GPIO_writePin+0x66>
    1682:	85 c0       	rjmp	.+266    	; 0x178e <GPIO_writePin+0x170>
    1684:	af c0       	rjmp	.+350    	; 0x17e4 <GPIO_writePin+0x1c6>
		{
		case PIN0_ID:
			if(value == LOGIC_HIGH)
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	a1 f4       	brne	.+40     	; 0x16b4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    168c:	ab e3       	ldi	r26, 0x3B	; 59
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	eb e3       	ldi	r30, 0x3B	; 59
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	48 2f       	mov	r20, r24
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 2e       	mov	r0, r18
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <GPIO_writePin+0x8c>
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	0a 94       	dec	r0
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <GPIO_writePin+0x88>
    16ae:	84 2b       	or	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	98 c0       	rjmp	.+304    	; 0x17e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16b4:	ab e3       	ldi	r26, 0x3B	; 59
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	eb e3       	ldi	r30, 0x3B	; 59
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	48 2f       	mov	r20, r24
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 2e       	mov	r0, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <GPIO_writePin+0xb4>
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	0a 94       	dec	r0
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <GPIO_writePin+0xb0>
    16d6:	80 95       	com	r24
    16d8:	84 23       	and	r24, r20
    16da:	8c 93       	st	X, r24
    16dc:	83 c0       	rjmp	.+262    	; 0x17e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	a1 f4       	brne	.+40     	; 0x170c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16e4:	a8 e3       	ldi	r26, 0x38	; 56
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e8 e3       	ldi	r30, 0x38	; 56
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <GPIO_writePin+0xe4>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <GPIO_writePin+0xe0>
    1706:	84 2b       	or	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	6c c0       	rjmp	.+216    	; 0x17e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    170c:	a8 e3       	ldi	r26, 0x38	; 56
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e8 e3       	ldi	r30, 0x38	; 56
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <GPIO_writePin+0x10c>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <GPIO_writePin+0x108>
    172e:	80 95       	com	r24
    1730:	84 23       	and	r24, r20
    1732:	8c 93       	st	X, r24
    1734:	57 c0       	rjmp	.+174    	; 0x17e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	a1 f4       	brne	.+40     	; 0x1764 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    173c:	a5 e3       	ldi	r26, 0x35	; 53
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e5 e3       	ldi	r30, 0x35	; 53
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <GPIO_writePin+0x13c>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <GPIO_writePin+0x138>
    175e:	84 2b       	or	r24, r20
    1760:	8c 93       	st	X, r24
    1762:	40 c0       	rjmp	.+128    	; 0x17e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1764:	a5 e3       	ldi	r26, 0x35	; 53
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e5 e3       	ldi	r30, 0x35	; 53
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 2e       	mov	r0, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <GPIO_writePin+0x164>
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	0a 94       	dec	r0
    1784:	e2 f7       	brpl	.-8      	; 0x177e <GPIO_writePin+0x160>
    1786:	80 95       	com	r24
    1788:	84 23       	and	r24, r20
    178a:	8c 93       	st	X, r24
    178c:	2b c0       	rjmp	.+86     	; 0x17e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	a1 f4       	brne	.+40     	; 0x17bc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1794:	a2 e3       	ldi	r26, 0x32	; 50
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e2 e3       	ldi	r30, 0x32	; 50
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	48 2f       	mov	r20, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 2e       	mov	r0, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <GPIO_writePin+0x194>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <GPIO_writePin+0x190>
    17b6:	84 2b       	or	r24, r20
    17b8:	8c 93       	st	X, r24
    17ba:	14 c0       	rjmp	.+40     	; 0x17e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17bc:	a2 e3       	ldi	r26, 0x32	; 50
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e2 e3       	ldi	r30, 0x32	; 50
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 2e       	mov	r0, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <GPIO_writePin+0x1bc>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <GPIO_writePin+0x1b8>
    17de:	80 95       	com	r24
    17e0:	84 23       	and	r24, r20
    17e2:	8c 93       	st	X, r24
			}
		}
	}
}
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <GPIO_readPin+0x6>
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <GPIO_readPin+0x8>
    17fc:	0f 92       	push	r0
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	88 30       	cpi	r24, 0x08	; 8
    180a:	08 f0       	brcs	.+2      	; 0x180e <GPIO_readPin+0x1a>
    180c:	9e c0       	rjmp	.+316    	; 0x194a <GPIO_readPin+0x156>
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	84 30       	cpi	r24, 0x04	; 4
    1812:	08 f0       	brcs	.+2      	; 0x1816 <GPIO_readPin+0x22>
    1814:	9a c0       	rjmp	.+308    	; 0x194a <GPIO_readPin+0x156>
	{
		/* Do Nothing */
	}
	else {
		switch(port_num)
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3d 83       	std	Y+5, r19	; 0x05
    181e:	2c 83       	std	Y+4, r18	; 0x04
    1820:	4c 81       	ldd	r20, Y+4	; 0x04
    1822:	5d 81       	ldd	r21, Y+5	; 0x05
    1824:	41 30       	cpi	r20, 0x01	; 1
    1826:	51 05       	cpc	r21, r1
    1828:	b1 f1       	breq	.+108    	; 0x1896 <GPIO_readPin+0xa2>
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	9d 81       	ldd	r25, Y+5	; 0x05
    182e:	82 30       	cpi	r24, 0x02	; 2
    1830:	91 05       	cpc	r25, r1
    1832:	34 f4       	brge	.+12     	; 0x1840 <GPIO_readPin+0x4c>
    1834:	2c 81       	ldd	r18, Y+4	; 0x04
    1836:	3d 81       	ldd	r19, Y+5	; 0x05
    1838:	21 15       	cp	r18, r1
    183a:	31 05       	cpc	r19, r1
    183c:	71 f0       	breq	.+28     	; 0x185a <GPIO_readPin+0x66>
    183e:	85 c0       	rjmp	.+266    	; 0x194a <GPIO_readPin+0x156>
    1840:	4c 81       	ldd	r20, Y+4	; 0x04
    1842:	5d 81       	ldd	r21, Y+5	; 0x05
    1844:	42 30       	cpi	r20, 0x02	; 2
    1846:	51 05       	cpc	r21, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <GPIO_readPin+0x58>
    184a:	43 c0       	rjmp	.+134    	; 0x18d2 <GPIO_readPin+0xde>
    184c:	8c 81       	ldd	r24, Y+4	; 0x04
    184e:	9d 81       	ldd	r25, Y+5	; 0x05
    1850:	83 30       	cpi	r24, 0x03	; 3
    1852:	91 05       	cpc	r25, r1
    1854:	09 f4       	brne	.+2      	; 0x1858 <GPIO_readPin+0x64>
    1856:	5b c0       	rjmp	.+182    	; 0x190e <GPIO_readPin+0x11a>
    1858:	78 c0       	rjmp	.+240    	; 0x194a <GPIO_readPin+0x156>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    185a:	e9 e3       	ldi	r30, 0x39	; 57
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	50 e0       	ldi	r21, 0x00	; 0
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <GPIO_readPin+0x80>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	2a 95       	dec	r18
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <GPIO_readPin+0x7c>
    1878:	9a 01       	movw	r18, r20
    187a:	28 23       	and	r18, r24
    187c:	39 23       	and	r19, r25
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a9 01       	movw	r20, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <GPIO_readPin+0x98>
    1888:	55 95       	asr	r21
    188a:	47 95       	ror	r20
    188c:	8a 95       	dec	r24
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <GPIO_readPin+0x94>
    1890:	ca 01       	movw	r24, r20
    1892:	8b 83       	std	Y+3, r24	; 0x03
    1894:	5b c0       	rjmp	.+182    	; 0x194c <GPIO_readPin+0x158>
			break;
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    1896:	e6 e3       	ldi	r30, 0x36	; 54
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	50 e0       	ldi	r21, 0x00	; 0
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <GPIO_readPin+0xbc>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	2a 95       	dec	r18
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <GPIO_readPin+0xb8>
    18b4:	9a 01       	movw	r18, r20
    18b6:	28 23       	and	r18, r24
    18b8:	39 23       	and	r19, r25
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a9 01       	movw	r20, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <GPIO_readPin+0xd4>
    18c4:	55 95       	asr	r21
    18c6:	47 95       	ror	r20
    18c8:	8a 95       	dec	r24
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <GPIO_readPin+0xd0>
    18cc:	ca 01       	movw	r24, r20
    18ce:	8b 83       	std	Y+3, r24	; 0x03
    18d0:	3d c0       	rjmp	.+122    	; 0x194c <GPIO_readPin+0x158>
			break;
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    18d2:	e3 e3       	ldi	r30, 0x33	; 51
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <GPIO_readPin+0xf8>
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	2a 95       	dec	r18
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <GPIO_readPin+0xf4>
    18f0:	9a 01       	movw	r18, r20
    18f2:	28 23       	and	r18, r24
    18f4:	39 23       	and	r19, r25
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	88 2f       	mov	r24, r24
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a9 01       	movw	r20, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <GPIO_readPin+0x110>
    1900:	55 95       	asr	r21
    1902:	47 95       	ror	r20
    1904:	8a 95       	dec	r24
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <GPIO_readPin+0x10c>
    1908:	ca 01       	movw	r24, r20
    190a:	8b 83       	std	Y+3, r24	; 0x03
    190c:	1f c0       	rjmp	.+62     	; 0x194c <GPIO_readPin+0x158>
			break;
		case PORTD_ID:
			return GET_BIT(PIND,pin_num);
    190e:	e0 e3       	ldi	r30, 0x30	; 48
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <GPIO_readPin+0x134>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	2a 95       	dec	r18
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <GPIO_readPin+0x130>
    192c:	9a 01       	movw	r18, r20
    192e:	28 23       	and	r18, r24
    1930:	39 23       	and	r19, r25
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	88 2f       	mov	r24, r24
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	a9 01       	movw	r20, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <GPIO_readPin+0x14c>
    193c:	55 95       	asr	r21
    193e:	47 95       	ror	r20
    1940:	8a 95       	dec	r24
    1942:	e2 f7       	brpl	.-8      	; 0x193c <GPIO_readPin+0x148>
    1944:	ca 01       	movw	r24, r20
    1946:	8b 83       	std	Y+3, r24	; 0x03
    1948:	01 c0       	rjmp	.+2      	; 0x194c <GPIO_readPin+0x158>

		}
	}
	return LOGIC_LOW;
    194a:	1b 82       	std	Y+3, r1	; 0x03
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	00 d0       	rcall	.+0      	; 0x1964 <GPIO_setupPortDirection+0x6>
    1964:	00 d0       	rcall	.+0      	; 0x1966 <GPIO_setupPortDirection+0x8>
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	84 30       	cpi	r24, 0x04	; 4
    1972:	90 f5       	brcc	.+100    	; 0x19d8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	3c 83       	std	Y+4, r19	; 0x04
    197c:	2b 83       	std	Y+3, r18	; 0x03
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	9c 81       	ldd	r25, Y+4	; 0x04
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	91 05       	cpc	r25, r1
    1986:	d1 f0       	breq	.+52     	; 0x19bc <GPIO_setupPortDirection+0x5e>
    1988:	2b 81       	ldd	r18, Y+3	; 0x03
    198a:	3c 81       	ldd	r19, Y+4	; 0x04
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 05       	cpc	r19, r1
    1990:	2c f4       	brge	.+10     	; 0x199c <GPIO_setupPortDirection+0x3e>
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	61 f0       	breq	.+24     	; 0x19b2 <GPIO_setupPortDirection+0x54>
    199a:	1e c0       	rjmp	.+60     	; 0x19d8 <GPIO_setupPortDirection+0x7a>
    199c:	2b 81       	ldd	r18, Y+3	; 0x03
    199e:	3c 81       	ldd	r19, Y+4	; 0x04
    19a0:	22 30       	cpi	r18, 0x02	; 2
    19a2:	31 05       	cpc	r19, r1
    19a4:	81 f0       	breq	.+32     	; 0x19c6 <GPIO_setupPortDirection+0x68>
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	9c 81       	ldd	r25, Y+4	; 0x04
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	91 05       	cpc	r25, r1
    19ae:	81 f0       	breq	.+32     	; 0x19d0 <GPIO_setupPortDirection+0x72>
    19b0:	13 c0       	rjmp	.+38     	; 0x19d8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19b2:	ea e3       	ldi	r30, 0x3A	; 58
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	80 83       	st	Z, r24
    19ba:	0e c0       	rjmp	.+28     	; 0x19d8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19bc:	e7 e3       	ldi	r30, 0x37	; 55
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	80 83       	st	Z, r24
    19c4:	09 c0       	rjmp	.+18     	; 0x19d8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19c6:	e4 e3       	ldi	r30, 0x34	; 52
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	80 83       	st	Z, r24
    19ce:	04 c0       	rjmp	.+8      	; 0x19d8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19d0:	e1 e3       	ldi	r30, 0x31	; 49
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	80 83       	st	Z, r24
			break;
		}
	}
}
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <GPIO_writePort+0x6>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <GPIO_writePort+0x8>
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
	{
		/* Do Nothing */
	}
	switch(port_num){
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	3c 83       	std	Y+4, r19	; 0x04
    19fe:	2b 83       	std	Y+3, r18	; 0x03
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	81 30       	cpi	r24, 0x01	; 1
    1a06:	91 05       	cpc	r25, r1
    1a08:	d1 f0       	breq	.+52     	; 0x1a3e <GPIO_writePort+0x58>
    1a0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0e:	22 30       	cpi	r18, 0x02	; 2
    1a10:	31 05       	cpc	r19, r1
    1a12:	2c f4       	brge	.+10     	; 0x1a1e <GPIO_writePort+0x38>
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	61 f0       	breq	.+24     	; 0x1a34 <GPIO_writePort+0x4e>
    1a1c:	1e c0       	rjmp	.+60     	; 0x1a5a <GPIO_writePort+0x74>
    1a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a20:	3c 81       	ldd	r19, Y+4	; 0x04
    1a22:	22 30       	cpi	r18, 0x02	; 2
    1a24:	31 05       	cpc	r19, r1
    1a26:	81 f0       	breq	.+32     	; 0x1a48 <GPIO_writePort+0x62>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	83 30       	cpi	r24, 0x03	; 3
    1a2e:	91 05       	cpc	r25, r1
    1a30:	81 f0       	breq	.+32     	; 0x1a52 <GPIO_writePort+0x6c>
    1a32:	13 c0       	rjmp	.+38     	; 0x1a5a <GPIO_writePort+0x74>
	case PORTA_ID:
		PORTA=value;
    1a34:	eb e3       	ldi	r30, 0x3B	; 59
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	80 83       	st	Z, r24
    1a3c:	0e c0       	rjmp	.+28     	; 0x1a5a <GPIO_writePort+0x74>
		break;
	case PORTB_ID:
		PORTB=value;
    1a3e:	e8 e3       	ldi	r30, 0x38	; 56
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	80 83       	st	Z, r24
    1a46:	09 c0       	rjmp	.+18     	; 0x1a5a <GPIO_writePort+0x74>
		break;
	case PORTC_ID:
		PORTC=value;
    1a48:	e5 e3       	ldi	r30, 0x35	; 53
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	80 83       	st	Z, r24
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <GPIO_writePort+0x74>
		break;
	case PORTD_ID:
		PORTD=value;
    1a52:	e2 e3       	ldi	r30, 0x32	; 50
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	80 83       	st	Z, r24
		break;
	}
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <GPIO_readPort+0x6>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <GPIO_readPort+0x8>
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	84 30       	cpi	r24, 0x04	; 4
    1a7a:	10 f0       	brcs	.+4      	; 0x1a80 <GPIO_readPort+0x18>
	{
		return LOGIC_LOW;
    1a7c:	1c 82       	std	Y+4, r1	; 0x04
    1a7e:	34 c0       	rjmp	.+104    	; 0x1ae8 <GPIO_readPort+0x80>
	}
	switch(port_num){
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	3b 83       	std	Y+3, r19	; 0x03
    1a88:	2a 83       	std	Y+2, r18	; 0x02
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	91 05       	cpc	r25, r1
    1a92:	d1 f0       	breq	.+52     	; 0x1ac8 <GPIO_readPort+0x60>
    1a94:	2a 81       	ldd	r18, Y+2	; 0x02
    1a96:	3b 81       	ldd	r19, Y+3	; 0x03
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <GPIO_readPort+0x40>
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	61 f0       	breq	.+24     	; 0x1abe <GPIO_readPort+0x56>
    1aa6:	1f c0       	rjmp	.+62     	; 0x1ae6 <GPIO_readPort+0x7e>
    1aa8:	2a 81       	ldd	r18, Y+2	; 0x02
    1aaa:	3b 81       	ldd	r19, Y+3	; 0x03
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	81 f0       	breq	.+32     	; 0x1ad2 <GPIO_readPort+0x6a>
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab6:	83 30       	cpi	r24, 0x03	; 3
    1ab8:	91 05       	cpc	r25, r1
    1aba:	81 f0       	breq	.+32     	; 0x1adc <GPIO_readPort+0x74>
    1abc:	14 c0       	rjmp	.+40     	; 0x1ae6 <GPIO_readPort+0x7e>
	case PORTA_ID:
		return PINA;
    1abe:	e9 e3       	ldi	r30, 0x39	; 57
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	90 81       	ld	r25, Z
    1ac4:	9c 83       	std	Y+4, r25	; 0x04
    1ac6:	10 c0       	rjmp	.+32     	; 0x1ae8 <GPIO_readPort+0x80>
		break;
	case PORTB_ID:
		return PINB;
    1ac8:	e6 e3       	ldi	r30, 0x36	; 54
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	20 81       	ld	r18, Z
    1ace:	2c 83       	std	Y+4, r18	; 0x04
    1ad0:	0b c0       	rjmp	.+22     	; 0x1ae8 <GPIO_readPort+0x80>
		break;
	case PORTC_ID:
		return PINC;
    1ad2:	e3 e3       	ldi	r30, 0x33	; 51
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	30 81       	ld	r19, Z
    1ad8:	3c 83       	std	Y+4, r19	; 0x04
    1ada:	06 c0       	rjmp	.+12     	; 0x1ae8 <GPIO_readPort+0x80>
		break;
	case PORTD_ID:
		return PIND;
    1adc:	e0 e3       	ldi	r30, 0x30	; 48
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	8c 83       	std	Y+4, r24	; 0x04
    1ae4:	01 c0       	rjmp	.+2      	; 0x1ae8 <GPIO_readPort+0x80>
		break;

		break;
	}
	return LOGIC_LOW;
    1ae6:	1c 82       	std	Y+4, r1	; 0x04
    1ae8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <DcMotor_Init>:

/*
 * Description :
 * Function responsible for initialize the DC Motor driver.
 */
void DcMotor_Init(void){
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
	/* motor pin1 output*/
	GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN1, PIN_OUTPUT);
    1b00:	83 e0       	ldi	r24, 0x03	; 3
    1b02:	66 e0       	ldi	r22, 0x06	; 6
    1b04:	41 e0       	ldi	r20, 0x01	; 1
    1b06:	0e 94 24 0a 	call	0x1448	; 0x1448 <GPIO_setupPinDirection>

	/* motor pin2 output*/
	GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN2, PIN_OUTPUT);
    1b0a:	83 e0       	ldi	r24, 0x03	; 3
    1b0c:	67 e0       	ldi	r22, 0x07	; 7
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	0e 94 24 0a 	call	0x1448	; 0x1448 <GPIO_setupPinDirection>

	/* STOP MOTOR AT START*/
	GPIO_writePin(MOTOR_PORT, MOTOR_PIN1, LOGIC_LOW);
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	66 e0       	ldi	r22, 0x06	; 6
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	0e 94 0f 0b 	call	0x161e	; 0x161e <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT, MOTOR_PIN2, LOGIC_LOW);
    1b1e:	83 e0       	ldi	r24, 0x03	; 3
    1b20:	67 e0       	ldi	r22, 0x07	; 7
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	0e 94 0f 0b 	call	0x161e	; 0x161e <GPIO_writePin>
}
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <DcMotor_Rotate>:

/*
 * Description :
 * Function responsible for State the DC Motor driver.
 */
void DcMotor_Rotate(DcMotor_State state){
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <DcMotor_Rotate+0x6>
    1b34:	0f 92       	push	r0
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	89 83       	std	Y+1, r24	; 0x01

	switch(state){
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	3b 83       	std	Y+3, r19	; 0x03
    1b44:	2a 83       	std	Y+2, r18	; 0x02
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	a1 f0       	breq	.+40     	; 0x1b78 <DcMotor_Rotate+0x4a>
    1b50:	2a 81       	ldd	r18, Y+2	; 0x02
    1b52:	3b 81       	ldd	r19, Y+3	; 0x03
    1b54:	22 30       	cpi	r18, 0x02	; 2
    1b56:	31 05       	cpc	r19, r1
    1b58:	d1 f0       	breq	.+52     	; 0x1b8e <DcMotor_Rotate+0x60>
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	01 f5       	brne	.+64     	; 0x1ba2 <DcMotor_Rotate+0x74>

	case 0 :
		/* STOP MOTOR*/
		GPIO_writePin(MOTOR_PORT,MOTOR_PIN1,LOGIC_LOW);
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	66 e0       	ldi	r22, 0x06	; 6
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	0e 94 0f 0b 	call	0x161e	; 0x161e <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT,MOTOR_PIN2,LOGIC_LOW);
    1b6c:	83 e0       	ldi	r24, 0x03	; 3
    1b6e:	67 e0       	ldi	r22, 0x07	; 7
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	0e 94 0f 0b 	call	0x161e	; 0x161e <GPIO_writePin>
    1b76:	15 c0       	rjmp	.+42     	; 0x1ba2 <DcMotor_Rotate+0x74>
		break;
	case 1:
		/* CW Rotation*/
		GPIO_writePin(MOTOR_PORT,MOTOR_PIN1,LOGIC_HIGH);
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	66 e0       	ldi	r22, 0x06	; 6
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	0e 94 0f 0b 	call	0x161e	; 0x161e <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT,MOTOR_PIN2,LOGIC_LOW);
    1b82:	83 e0       	ldi	r24, 0x03	; 3
    1b84:	67 e0       	ldi	r22, 0x07	; 7
    1b86:	40 e0       	ldi	r20, 0x00	; 0
    1b88:	0e 94 0f 0b 	call	0x161e	; 0x161e <GPIO_writePin>
    1b8c:	0a c0       	rjmp	.+20     	; 0x1ba2 <DcMotor_Rotate+0x74>
		break;
	case 2:
		/* ACW Rotation*/
		GPIO_writePin(MOTOR_PORT,MOTOR_PIN1,LOGIC_LOW);
    1b8e:	83 e0       	ldi	r24, 0x03	; 3
    1b90:	66 e0       	ldi	r22, 0x06	; 6
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	0e 94 0f 0b 	call	0x161e	; 0x161e <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT,MOTOR_PIN2,LOGIC_HIGH);
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	67 e0       	ldi	r22, 0x07	; 7
    1b9c:	41 e0       	ldi	r20, 0x01	; 1
    1b9e:	0e 94 0f 0b 	call	0x161e	; 0x161e <GPIO_writePin>
		break;

	}
}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1bae:	1f 92       	push	r1
    1bb0:	0f 92       	push	r0
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	0f 92       	push	r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	2f 93       	push	r18
    1bba:	3f 93       	push	r19
    1bbc:	4f 93       	push	r20
    1bbe:	5f 93       	push	r21
    1bc0:	6f 93       	push	r22
    1bc2:	7f 93       	push	r23
    1bc4:	8f 93       	push	r24
    1bc6:	9f 93       	push	r25
    1bc8:	af 93       	push	r26
    1bca:	bf 93       	push	r27
    1bcc:	ef 93       	push	r30
    1bce:	ff 93       	push	r31
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    1bd8:	80 91 79 00 	lds	r24, 0x0079
    1bdc:	90 91 7a 00 	lds	r25, 0x007A
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	29 f0       	breq	.+10     	; 0x1bee <__vector_9+0x40>
	{
		(*g_Timer0_callBackPtr)();
    1be4:	e0 91 79 00 	lds	r30, 0x0079
    1be8:	f0 91 7a 00 	lds	r31, 0x007A
    1bec:	09 95       	icall
		/* another method to call the function using pointer to function g_callBackPtr(); */
	}
}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	ff 91       	pop	r31
    1bf4:	ef 91       	pop	r30
    1bf6:	bf 91       	pop	r27
    1bf8:	af 91       	pop	r26
    1bfa:	9f 91       	pop	r25
    1bfc:	8f 91       	pop	r24
    1bfe:	7f 91       	pop	r23
    1c00:	6f 91       	pop	r22
    1c02:	5f 91       	pop	r21
    1c04:	4f 91       	pop	r20
    1c06:	3f 91       	pop	r19
    1c08:	2f 91       	pop	r18
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	0f 90       	pop	r0
    1c10:	1f 90       	pop	r1
    1c12:	18 95       	reti

00001c14 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1c14:	1f 92       	push	r1
    1c16:	0f 92       	push	r0
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	0f 92       	push	r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	2f 93       	push	r18
    1c20:	3f 93       	push	r19
    1c22:	4f 93       	push	r20
    1c24:	5f 93       	push	r21
    1c26:	6f 93       	push	r22
    1c28:	7f 93       	push	r23
    1c2a:	8f 93       	push	r24
    1c2c:	9f 93       	push	r25
    1c2e:	af 93       	push	r26
    1c30:	bf 93       	push	r27
    1c32:	ef 93       	push	r30
    1c34:	ff 93       	push	r31
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    1c3e:	80 91 79 00 	lds	r24, 0x0079
    1c42:	90 91 7a 00 	lds	r25, 0x007A
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	29 f0       	breq	.+10     	; 0x1c54 <__vector_19+0x40>
	{

		(*g_Timer0_callBackPtr)();
    1c4a:	e0 91 79 00 	lds	r30, 0x0079
    1c4e:	f0 91 7a 00 	lds	r31, 0x007A
    1c52:	09 95       	icall
		/* another method to call the function using pointer to function g_callBackPtr(); */
	}
}
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	ff 91       	pop	r31
    1c5a:	ef 91       	pop	r30
    1c5c:	bf 91       	pop	r27
    1c5e:	af 91       	pop	r26
    1c60:	9f 91       	pop	r25
    1c62:	8f 91       	pop	r24
    1c64:	7f 91       	pop	r23
    1c66:	6f 91       	pop	r22
    1c68:	5f 91       	pop	r21
    1c6a:	4f 91       	pop	r20
    1c6c:	3f 91       	pop	r19
    1c6e:	2f 91       	pop	r18
    1c70:	0f 90       	pop	r0
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	0f 90       	pop	r0
    1c76:	1f 90       	pop	r1
    1c78:	18 95       	reti

00001c7a <Timer0_init>:
 *******************************************************************************/

/*
 * Initialization of timer
 */
void Timer0_init(const Timer0_ConfigType* ConfigType){
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <Timer0_init+0x6>
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = ConfigType -> initial_value ; /* Set timer initial value */
    1c88:	a2 e5       	ldi	r26, 0x52	; 82
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	8c 93       	st	X, r24
	SET_BIT(TCCR0, FOC0);  /* for normal and CTC mode,FOC0=1  */
    1c94:	a3 e5       	ldi	r26, 0x53	; 83
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e3 e5       	ldi	r30, 0x53	; 83
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	80 68       	ori	r24, 0x80	; 128
    1ca0:	8c 93       	st	X, r24

	TCCR0 &= ~(1 << COM00) & ~(1 << COM01);
    1ca2:	a3 e5       	ldi	r26, 0x53	; 83
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e3 e5       	ldi	r30, 0x53	; 83
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	8f 7c       	andi	r24, 0xCF	; 207
    1cae:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xF8) | (ConfigType -> clock) ;
    1cb0:	a3 e5       	ldi	r26, 0x53	; 83
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e3 e5       	ldi	r30, 0x53	; 83
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	98 2f       	mov	r25, r24
    1cbc:	98 7f       	andi	r25, 0xF8	; 248
    1cbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc2:	81 81       	ldd	r24, Z+1	; 0x01
    1cc4:	89 2b       	or	r24, r25
    1cc6:	8c 93       	st	X, r24

	if(ConfigType -> mode == Timer0_normal){
    1cc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cca:	fa 81       	ldd	r31, Y+2	; 0x02
    1ccc:	80 81       	ld	r24, Z
    1cce:	88 23       	and	r24, r24
    1cd0:	79 f4       	brne	.+30     	; 0x1cf0 <Timer0_init+0x76>
		TIMSK = (TIMSK & 0xFE) | (1 << TOIE0); /* Enable Timer0 Overflow Interrupt */
    1cd2:	a9 e5       	ldi	r26, 0x59	; 89
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e9 e5       	ldi	r30, 0x59	; 89
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	81 60       	ori	r24, 0x01	; 1
    1cde:	8c 93       	st	X, r24
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock -> CS00 CS01 CS02
		 */

		TCCR0 &= ~(1 << WGM01) & ~(1 << WGM00) ;
    1ce0:	a3 e5       	ldi	r26, 0x53	; 83
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e3 e5       	ldi	r30, 0x53	; 83
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	87 7b       	andi	r24, 0xB7	; 183
    1cec:	8c 93       	st	X, r24
    1cee:	20 c0       	rjmp	.+64     	; 0x1d30 <Timer0_init+0xb6>

	}
	else if(ConfigType -> mode == Timer0_CTC){
    1cf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf4:	80 81       	ld	r24, Z
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	d9 f4       	brne	.+54     	; 0x1d30 <Timer0_init+0xb6>

		OCR0  = ConfigType -> compare_value; // Set Compare Value
    1cfa:	ac e5       	ldi	r26, 0x5C	; 92
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1d00:	fa 81       	ldd	r31, Y+2	; 0x02
    1d02:	83 81       	ldd	r24, Z+3	; 0x03
    1d04:	8c 93       	st	X, r24
		TIMSK = (TIMSK & 0xFD) |(1 << OCIE0); // Enable Timer0 Compare Interrupt
    1d06:	a9 e5       	ldi	r26, 0x59	; 89
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e9 e5       	ldi	r30, 0x59	; 89
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	82 60       	ori	r24, 0x02	; 2
    1d12:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. No need for OC0  so COM00=0 & COM01=0
		 * 4. clock -> CS00 CS01 CS02
		 */
		CLEAR_BIT(TCCR0, WGM00);
    1d14:	a3 e5       	ldi	r26, 0x53	; 83
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e3 e5       	ldi	r30, 0x53	; 83
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	8f 7b       	andi	r24, 0xBF	; 191
    1d20:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    1d22:	a3 e5       	ldi	r26, 0x53	; 83
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e3 e5       	ldi	r30, 0x53	; 83
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	88 60       	ori	r24, 0x08	; 8
    1d2e:	8c 93       	st	X, r24
	}

}
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <Timer0_SetCallBack>:

/*
 * Set callback function used by timer 0
 */
void Timer0_SetCallBack( void(*ptr2func)(void) ){
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <Timer0_SetCallBack+0x6>
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01
	g_Timer0_callBackPtr = ptr2func;
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4c:	90 93 7a 00 	sts	0x007A, r25
    1d50:	80 93 79 00 	sts	0x0079, r24
}
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <Timer0_Deinit>:

/*
 * De-initialization of timer 0
 */
void Timer0_Deinit(){
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0; //stop clock
    1d66:	e3 e5       	ldi	r30, 0x53	; 83
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0); /* disable timer0 interrupts for CTC mode */
    1d6c:	a9 e5       	ldi	r26, 0x59	; 89
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e9 e5       	ldi	r30, 0x59	; 89
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	8d 7f       	andi	r24, 0xFD	; 253
    1d78:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0); /* disable timer0 interrupts for overflow mode */
    1d7a:	a9 e5       	ldi	r26, 0x59	; 89
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e9 e5       	ldi	r30, 0x59	; 89
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8e 7f       	andi	r24, 0xFE	; 254
    1d86:	8c 93       	st	X, r24
}
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <TWI_init>:

/*
 * initialization function of TWI using Configuration structure
 */
void TWI_init(const TWI_ConfigType* config_ptr )
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <TWI_init+0x6>
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	9a 83       	std	Y+2, r25	; 0x02
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = config_ptr-> BitRateRegister_TWBR;
    1d9c:	a0 e2       	ldi	r26, 0x20	; 32
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e9 81       	ldd	r30, Y+1	; 0x01
    1da2:	fa 81       	ldd	r31, Y+2	; 0x02
    1da4:	80 81       	ld	r24, Z
    1da6:	8c 93       	st	X, r24
	TWSR = ( TWSR & (0XFC) ) | (config_ptr-> prescaler);
    1da8:	a1 e2       	ldi	r26, 0x21	; 33
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e1 e2       	ldi	r30, 0x21	; 33
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	98 2f       	mov	r25, r24
    1db4:	9c 7f       	andi	r25, 0xFC	; 252
    1db6:	e9 81       	ldd	r30, Y+1	; 0x01
    1db8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dba:	81 81       	ldd	r24, Z+1	; 0x01
    1dbc:	89 2b       	or	r24, r25
    1dbe:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = config_ptr-> My_Address << 1;
    1dc0:	a2 e2       	ldi	r26, 0x22	; 34
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	88 0f       	add	r24, r24
    1dcc:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1dce:	e6 e5       	ldi	r30, 0x56	; 86
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	84 e0       	ldi	r24, 0x04	; 4
    1dd4:	80 83       	st	Z, r24
}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <TWI_start>:

/*
 * function to Send the Start Bit
 */
void TWI_start(void)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1de8:	e6 e5       	ldi	r30, 0x56	; 86
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	84 ea       	ldi	r24, 0xA4	; 164
    1dee:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1df0:	e6 e5       	ldi	r30, 0x56	; 86
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	88 23       	and	r24, r24
    1df8:	dc f7       	brge	.-10     	; 0x1df0 <TWI_start+0x10>
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <TWI_stop>:

/*
 * function to Send the stop Bit
 */
void TWI_stop(void)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1e08:	e6 e5       	ldi	r30, 0x56	; 86
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	84 e9       	ldi	r24, 0x94	; 148
    1e0e:	80 83       	st	Z, r24
}
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <TWI_writeByte>:

/*
 * function to write one byte (8 bits) of data
 */
void TWI_writeByte(uint8 data)
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	0f 92       	push	r0
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1e22:	e3 e2       	ldi	r30, 0x23	; 35
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e2a:	e6 e5       	ldi	r30, 0x56	; 86
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	84 e8       	ldi	r24, 0x84	; 132
    1e30:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e32:	e6 e5       	ldi	r30, 0x56	; 86
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	88 23       	and	r24, r24
    1e3a:	dc f7       	brge	.-10     	; 0x1e32 <TWI_writeByte+0x1c>
}
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <TWI_readByteWithACK>:

/*
 * function to read one byte of data with Acknowledge
 */
uint8 TWI_readByteWithACK(void)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1e4c:	e6 e5       	ldi	r30, 0x56	; 86
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	84 ec       	ldi	r24, 0xC4	; 196
    1e52:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e54:	e6 e5       	ldi	r30, 0x56	; 86
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	88 23       	and	r24, r24
    1e5c:	dc f7       	brge	.-10     	; 0x1e54 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1e5e:	e3 e2       	ldi	r30, 0x23	; 35
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
}
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <TWI_readByteWithNACK>:

/*
 * function to read one byte of data with NACK
 */
uint8 TWI_readByteWithNACK(void)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e72:	e6 e5       	ldi	r30, 0x56	; 86
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	84 e8       	ldi	r24, 0x84	; 132
    1e78:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e7a:	e6 e5       	ldi	r30, 0x56	; 86
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 23       	and	r24, r24
    1e82:	dc f7       	brge	.-10     	; 0x1e7a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1e84:	e3 e2       	ldi	r30, 0x23	; 35
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
}
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <TWI_getStatus>:

/*
 * function to get status of TWI module
 */
uint8 TWI_getStatus(void)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	0f 92       	push	r0
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1e9a:	e1 e2       	ldi	r30, 0x21	; 33
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	88 7f       	andi	r24, 0xF8	; 248
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <UART_init+0x6>
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <UART_init+0x8>
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	9c 83       	std	Y+4, r25	; 0x04
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1ebe:	1a 82       	std	Y+2, r1	; 0x02
    1ec0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1ec2:	eb e2       	ldi	r30, 0x2B	; 43
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = ?? Number of Data Bits --> Depend on the Configuration
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1eca:	ea e2       	ldi	r30, 0x2A	; 42
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	88 e1       	ldi	r24, 0x18	; 24
    1ed0:	80 83       	st	Z, r24
	 * UPM1:0  = ?? Parity bit 			--> Depend on the Configuration
	 * USBS    = ?? Stop bit   			--> Depend on the Configuration
	 * UCSZ1:0 = ?? Number of Data Bits --> Depend on the Configuration
	 * UCPOL   = 0 	Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0);
    1ed2:	e0 e4       	ldi	r30, 0x40	; 64
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	82 e8       	ldi	r24, 0x82	; 130
    1ed8:	80 83       	st	Z, r24
	/*
	 * Insert Required Parity Mode
	 * in (UCSRC) Register
	 * in the bits ( UPM0, UPM1 )
	 */
	UCSRC = (UCSRC & 0xCF) | ( ( Config_Ptr->parity_bit_type ) << 4 );
    1eda:	a0 e4       	ldi	r26, 0x40	; 64
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e0 e4       	ldi	r30, 0x40	; 64
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	2f 7c       	andi	r18, 0xCF	; 207
    1ee8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eea:	fc 81       	ldd	r31, Y+4	; 0x04
    1eec:	86 81       	ldd	r24, Z+6	; 0x06
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	82 95       	swap	r24
    1ef4:	92 95       	swap	r25
    1ef6:	90 7f       	andi	r25, 0xF0	; 240
    1ef8:	98 27       	eor	r25, r24
    1efa:	80 7f       	andi	r24, 0xF0	; 240
    1efc:	98 27       	eor	r25, r24
    1efe:	82 2b       	or	r24, r18
    1f00:	8c 93       	st	X, r24
	/*
	 * Insert Required Stop Bits
	 * in (UCSRC) Register
	 * in the bit ( USBS )
	 */
	UCSRC = (UCSRC & 0xF7)  | ( ( Config_Ptr->number_of_stop_bits ) << 3 );
    1f02:	a0 e4       	ldi	r26, 0x40	; 64
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e0 e4       	ldi	r30, 0x40	; 64
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	27 7f       	andi	r18, 0xF7	; 247
    1f10:	eb 81       	ldd	r30, Y+3	; 0x03
    1f12:	fc 81       	ldd	r31, Y+4	; 0x04
    1f14:	85 81       	ldd	r24, Z+5	; 0x05
    1f16:	88 2f       	mov	r24, r24
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	82 2b       	or	r24, r18
    1f28:	8c 93       	st	X, r24
	 * Insert Required Number Data Bits
	 * in (UCSRC) Register
	 * General : in the bits ( UCSZ0, UCSZ1 )
	 * In 9-bit case : in the bit ( UCSZ2 )
	 */
	if (Config_Ptr->number_of_bits == 9)
    1f2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f2e:	84 81       	ldd	r24, Z+4	; 0x04
    1f30:	89 30       	cpi	r24, 0x09	; 9
    1f32:	79 f4       	brne	.+30     	; 0x1f52 <UART_init+0xa4>
	{
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    1f34:	a0 e4       	ldi	r26, 0x40	; 64
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e0 e4       	ldi	r30, 0x40	; 64
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	86 60       	ori	r24, 0x06	; 6
    1f40:	8c 93       	st	X, r24
		UCSRB |= (1<<UCSZ2);
    1f42:	aa e2       	ldi	r26, 0x2A	; 42
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	ea e2       	ldi	r30, 0x2A	; 42
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	84 60       	ori	r24, 0x04	; 4
    1f4e:	8c 93       	st	X, r24
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <UART_init+0xc2>
	}
	else
	{
		UCSRC |= ( ( Config_Ptr->number_of_bits ) << 1 );
    1f52:	a0 e4       	ldi	r26, 0x40	; 64
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e0 e4       	ldi	r30, 0x40	; 64
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f60:	fc 81       	ldd	r31, Y+4	; 0x04
    1f62:	84 81       	ldd	r24, Z+4	; 0x04
    1f64:	88 2f       	mov	r24, r24
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	82 2b       	or	r24, r18
    1f6e:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1f70:	eb 81       	ldd	r30, Y+3	; 0x03
    1f72:	fc 81       	ldd	r31, Y+4	; 0x04
    1f74:	80 81       	ld	r24, Z
    1f76:	91 81       	ldd	r25, Z+1	; 0x01
    1f78:	a2 81       	ldd	r26, Z+2	; 0x02
    1f7a:	b3 81       	ldd	r27, Z+3	; 0x03
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	aa 1f       	adc	r26, r26
    1f82:	bb 1f       	adc	r27, r27
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	aa 1f       	adc	r26, r26
    1f8a:	bb 1f       	adc	r27, r27
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	aa 1f       	adc	r26, r26
    1f92:	bb 1f       	adc	r27, r27
    1f94:	9c 01       	movw	r18, r24
    1f96:	ad 01       	movw	r20, r26
    1f98:	80 e4       	ldi	r24, 0x40	; 64
    1f9a:	92 e4       	ldi	r25, 0x42	; 66
    1f9c:	af e0       	ldi	r26, 0x0F	; 15
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__udivmodsi4>
    1fa8:	da 01       	movw	r26, r20
    1faa:	c9 01       	movw	r24, r18
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1fb2:	e0 e4       	ldi	r30, 0x40	; 64
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fba:	89 2f       	mov	r24, r25
    1fbc:	99 27       	eor	r25, r25
    1fbe:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1fc0:	e9 e2       	ldi	r30, 0x29	; 41
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	80 83       	st	Z, r24
}
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	0f 92       	push	r0
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA, UDRE)){}
    1fe2:	eb e2       	ldi	r30, 0x2B	; 43
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	88 2f       	mov	r24, r24
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	80 72       	andi	r24, 0x20	; 32
    1fee:	90 70       	andi	r25, 0x00	; 0
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	b9 f3       	breq	.-18     	; 0x1fe2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1ff4:	ec e2       	ldi	r30, 0x2C	; 44
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA, RXC)){}
    200c:	eb e2       	ldi	r30, 0x2B	; 43
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	88 23       	and	r24, r24
    2014:	dc f7       	brge	.-10     	; 0x200c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2016:	ec e2       	ldi	r30, 0x2C	; 44
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
}
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <UART_sendString+0x6>
    2028:	0f 92       	push	r0
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	9b 83       	std	Y+3, r25	; 0x03
    2030:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2032:	19 82       	std	Y+1, r1	; 0x01
    2034:	0e c0       	rjmp	.+28     	; 0x2052 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	9b 81       	ldd	r25, Y+3	; 0x03
    2040:	fc 01       	movw	r30, r24
    2042:	e2 0f       	add	r30, r18
    2044:	f3 1f       	adc	r31, r19
    2046:	80 81       	ld	r24, Z
    2048:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <UART_sendByte>
		i++;
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	8f 5f       	subi	r24, 0xFF	; 255
    2050:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	9b 81       	ldd	r25, Y+3	; 0x03
    205c:	fc 01       	movw	r30, r24
    205e:	e2 0f       	add	r30, r18
    2060:	f3 1f       	adc	r31, r19
    2062:	80 81       	ld	r24, Z
    2064:	88 23       	and	r24, r24
    2066:	39 f7       	brne	.-50     	; 0x2036 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2074:	0f 93       	push	r16
    2076:	1f 93       	push	r17
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	00 d0       	rcall	.+0      	; 0x207e <UART_receiveString+0xa>
    207e:	0f 92       	push	r0
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	9b 83       	std	Y+3, r25	; 0x03
    2086:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2088:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	9b 81       	ldd	r25, Y+3	; 0x03
    2094:	8c 01       	movw	r16, r24
    2096:	02 0f       	add	r16, r18
    2098:	13 1f       	adc	r17, r19
    209a:	0e 94 02 10 	call	0x2004	; 0x2004 <UART_recieveByte>
    209e:	f8 01       	movw	r30, r16
    20a0:	80 83       	st	Z, r24
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	8f 5f       	subi	r24, 0xFF	; 255
    20a8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	9b 81       	ldd	r25, Y+3	; 0x03
    20b4:	8c 01       	movw	r16, r24
    20b6:	02 0f       	add	r16, r18
    20b8:	13 1f       	adc	r17, r19
    20ba:	0e 94 02 10 	call	0x2004	; 0x2004 <UART_recieveByte>
    20be:	f8 01       	movw	r30, r16
    20c0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	9b 81       	ldd	r25, Y+3	; 0x03
    20cc:	fc 01       	movw	r30, r24
    20ce:	e2 0f       	add	r30, r18
    20d0:	f3 1f       	adc	r31, r19
    20d2:	80 81       	ld	r24, Z
    20d4:	83 32       	cpi	r24, 0x23	; 35
    20d6:	31 f7       	brne	.-52     	; 0x20a4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	9b 81       	ldd	r25, Y+3	; 0x03
    20e2:	fc 01       	movw	r30, r24
    20e4:	e2 0f       	add	r30, r18
    20e6:	f3 1f       	adc	r31, r19
    20e8:	10 82       	st	Z, r1
}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	1f 91       	pop	r17
    20f6:	0f 91       	pop	r16
    20f8:	08 95       	ret

000020fa <__udivmodsi4>:
    20fa:	a1 e2       	ldi	r26, 0x21	; 33
    20fc:	1a 2e       	mov	r1, r26
    20fe:	aa 1b       	sub	r26, r26
    2100:	bb 1b       	sub	r27, r27
    2102:	fd 01       	movw	r30, r26
    2104:	0d c0       	rjmp	.+26     	; 0x2120 <__udivmodsi4_ep>

00002106 <__udivmodsi4_loop>:
    2106:	aa 1f       	adc	r26, r26
    2108:	bb 1f       	adc	r27, r27
    210a:	ee 1f       	adc	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	a2 17       	cp	r26, r18
    2110:	b3 07       	cpc	r27, r19
    2112:	e4 07       	cpc	r30, r20
    2114:	f5 07       	cpc	r31, r21
    2116:	20 f0       	brcs	.+8      	; 0x2120 <__udivmodsi4_ep>
    2118:	a2 1b       	sub	r26, r18
    211a:	b3 0b       	sbc	r27, r19
    211c:	e4 0b       	sbc	r30, r20
    211e:	f5 0b       	sbc	r31, r21

00002120 <__udivmodsi4_ep>:
    2120:	66 1f       	adc	r22, r22
    2122:	77 1f       	adc	r23, r23
    2124:	88 1f       	adc	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	1a 94       	dec	r1
    212a:	69 f7       	brne	.-38     	; 0x2106 <__udivmodsi4_loop>
    212c:	60 95       	com	r22
    212e:	70 95       	com	r23
    2130:	80 95       	com	r24
    2132:	90 95       	com	r25
    2134:	9b 01       	movw	r18, r22
    2136:	ac 01       	movw	r20, r24
    2138:	bd 01       	movw	r22, r26
    213a:	cf 01       	movw	r24, r30
    213c:	08 95       	ret

0000213e <__prologue_saves__>:
    213e:	2f 92       	push	r2
    2140:	3f 92       	push	r3
    2142:	4f 92       	push	r4
    2144:	5f 92       	push	r5
    2146:	6f 92       	push	r6
    2148:	7f 92       	push	r7
    214a:	8f 92       	push	r8
    214c:	9f 92       	push	r9
    214e:	af 92       	push	r10
    2150:	bf 92       	push	r11
    2152:	cf 92       	push	r12
    2154:	df 92       	push	r13
    2156:	ef 92       	push	r14
    2158:	ff 92       	push	r15
    215a:	0f 93       	push	r16
    215c:	1f 93       	push	r17
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	ca 1b       	sub	r28, r26
    2168:	db 0b       	sbc	r29, r27
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	09 94       	ijmp

00002176 <__epilogue_restores__>:
    2176:	2a 88       	ldd	r2, Y+18	; 0x12
    2178:	39 88       	ldd	r3, Y+17	; 0x11
    217a:	48 88       	ldd	r4, Y+16	; 0x10
    217c:	5f 84       	ldd	r5, Y+15	; 0x0f
    217e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2180:	7d 84       	ldd	r7, Y+13	; 0x0d
    2182:	8c 84       	ldd	r8, Y+12	; 0x0c
    2184:	9b 84       	ldd	r9, Y+11	; 0x0b
    2186:	aa 84       	ldd	r10, Y+10	; 0x0a
    2188:	b9 84       	ldd	r11, Y+9	; 0x09
    218a:	c8 84       	ldd	r12, Y+8	; 0x08
    218c:	df 80       	ldd	r13, Y+7	; 0x07
    218e:	ee 80       	ldd	r14, Y+6	; 0x06
    2190:	fd 80       	ldd	r15, Y+5	; 0x05
    2192:	0c 81       	ldd	r16, Y+4	; 0x04
    2194:	1b 81       	ldd	r17, Y+3	; 0x03
    2196:	aa 81       	ldd	r26, Y+2	; 0x02
    2198:	b9 81       	ldd	r27, Y+1	; 0x01
    219a:	ce 0f       	add	r28, r30
    219c:	d1 1d       	adc	r29, r1
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	ed 01       	movw	r28, r26
    21aa:	08 95       	ret

000021ac <_exit>:
    21ac:	f8 94       	cli

000021ae <__stop_program>:
    21ae:	ff cf       	rjmp	.-2      	; 0x21ae <__stop_program>
